// +build !ignore_autogenerated

/*
Copyright (c) 2020 SAP SE or an SAP affiliate company. All rights reserved. This file is licensed under the Apache Software License, v. 2 except as noted otherwise in the LICENSE file

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

     http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by openapi-gen. DO NOT EDIT.

// This file was autogenerated by openapi-gen. Do not edit it manually!

package openapi

import (
	v1beta1 "github.com/gardener/gardener/pkg/apis/garden/v1beta1"
	spec "github.com/go-openapi/spec"
	v1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	common "k8s.io/kube-openapi/pkg/common"
)

func GetOpenAPIDefinitions(ref common.ReferenceCallback) map[string]common.OpenAPIDefinition {
	return map[string]common.OpenAPIDefinition{
		"github.com/gardener/gardener/pkg/apis/garden/v1beta1.AWSCloud":                             schema_pkg_apis_garden_v1beta1_AWSCloud(ref),
		"github.com/gardener/gardener/pkg/apis/garden/v1beta1.AWSConstraints":                       schema_pkg_apis_garden_v1beta1_AWSConstraints(ref),
		"github.com/gardener/gardener/pkg/apis/garden/v1beta1.AWSNetworks":                          schema_pkg_apis_garden_v1beta1_AWSNetworks(ref),
		"github.com/gardener/gardener/pkg/apis/garden/v1beta1.AWSProfile":                           schema_pkg_apis_garden_v1beta1_AWSProfile(ref),
		"github.com/gardener/gardener/pkg/apis/garden/v1beta1.AWSVPC":                               schema_pkg_apis_garden_v1beta1_AWSVPC(ref),
		"github.com/gardener/gardener/pkg/apis/garden/v1beta1.AWSWorker":                            schema_pkg_apis_garden_v1beta1_AWSWorker(ref),
		"github.com/gardener/gardener/pkg/apis/garden/v1beta1.Addon":                                schema_pkg_apis_garden_v1beta1_Addon(ref),
		"github.com/gardener/gardener/pkg/apis/garden/v1beta1.AddonClusterAutoscaler":               schema_pkg_apis_garden_v1beta1_AddonClusterAutoscaler(ref),
		"github.com/gardener/gardener/pkg/apis/garden/v1beta1.Addons":                               schema_pkg_apis_garden_v1beta1_Addons(ref),
		"github.com/gardener/gardener/pkg/apis/garden/v1beta1.AdmissionPlugin":                      schema_pkg_apis_garden_v1beta1_AdmissionPlugin(ref),
		"github.com/gardener/gardener/pkg/apis/garden/v1beta1.Alerting":                             schema_pkg_apis_garden_v1beta1_Alerting(ref),
		"github.com/gardener/gardener/pkg/apis/garden/v1beta1.Alicloud":                             schema_pkg_apis_garden_v1beta1_Alicloud(ref),
		"github.com/gardener/gardener/pkg/apis/garden/v1beta1.AlicloudConstraints":                  schema_pkg_apis_garden_v1beta1_AlicloudConstraints(ref),
		"github.com/gardener/gardener/pkg/apis/garden/v1beta1.AlicloudMachineType":                  schema_pkg_apis_garden_v1beta1_AlicloudMachineType(ref),
		"github.com/gardener/gardener/pkg/apis/garden/v1beta1.AlicloudNetworks":                     schema_pkg_apis_garden_v1beta1_AlicloudNetworks(ref),
		"github.com/gardener/gardener/pkg/apis/garden/v1beta1.AlicloudProfile":                      schema_pkg_apis_garden_v1beta1_AlicloudProfile(ref),
		"github.com/gardener/gardener/pkg/apis/garden/v1beta1.AlicloudVPC":                          schema_pkg_apis_garden_v1beta1_AlicloudVPC(ref),
		"github.com/gardener/gardener/pkg/apis/garden/v1beta1.AlicloudVolumeType":                   schema_pkg_apis_garden_v1beta1_AlicloudVolumeType(ref),
		"github.com/gardener/gardener/pkg/apis/garden/v1beta1.AlicloudWorker":                       schema_pkg_apis_garden_v1beta1_AlicloudWorker(ref),
		"github.com/gardener/gardener/pkg/apis/garden/v1beta1.AuditConfig":                          schema_pkg_apis_garden_v1beta1_AuditConfig(ref),
		"github.com/gardener/gardener/pkg/apis/garden/v1beta1.AuditPolicy":                          schema_pkg_apis_garden_v1beta1_AuditPolicy(ref),
		"github.com/gardener/gardener/pkg/apis/garden/v1beta1.AzureCloud":                           schema_pkg_apis_garden_v1beta1_AzureCloud(ref),
		"github.com/gardener/gardener/pkg/apis/garden/v1beta1.AzureConstraints":                     schema_pkg_apis_garden_v1beta1_AzureConstraints(ref),
		"github.com/gardener/gardener/pkg/apis/garden/v1beta1.AzureDomainCount":                     schema_pkg_apis_garden_v1beta1_AzureDomainCount(ref),
		"github.com/gardener/gardener/pkg/apis/garden/v1beta1.AzureNetworks":                        schema_pkg_apis_garden_v1beta1_AzureNetworks(ref),
		"github.com/gardener/gardener/pkg/apis/garden/v1beta1.AzureProfile":                         schema_pkg_apis_garden_v1beta1_AzureProfile(ref),
		"github.com/gardener/gardener/pkg/apis/garden/v1beta1.AzureResourceGroup":                   schema_pkg_apis_garden_v1beta1_AzureResourceGroup(ref),
		"github.com/gardener/gardener/pkg/apis/garden/v1beta1.AzureVNet":                            schema_pkg_apis_garden_v1beta1_AzureVNet(ref),
		"github.com/gardener/gardener/pkg/apis/garden/v1beta1.AzureWorker":                          schema_pkg_apis_garden_v1beta1_AzureWorker(ref),
		"github.com/gardener/gardener/pkg/apis/garden/v1beta1.BackupProfile":                        schema_pkg_apis_garden_v1beta1_BackupProfile(ref),
		"github.com/gardener/gardener/pkg/apis/garden/v1beta1.Cloud":                                schema_pkg_apis_garden_v1beta1_Cloud(ref),
		"github.com/gardener/gardener/pkg/apis/garden/v1beta1.CloudControllerManagerConfig":         schema_pkg_apis_garden_v1beta1_CloudControllerManagerConfig(ref),
		"github.com/gardener/gardener/pkg/apis/garden/v1beta1.CloudProfile":                         schema_pkg_apis_garden_v1beta1_CloudProfile(ref),
		"github.com/gardener/gardener/pkg/apis/garden/v1beta1.CloudProfileList":                     schema_pkg_apis_garden_v1beta1_CloudProfileList(ref),
		"github.com/gardener/gardener/pkg/apis/garden/v1beta1.CloudProfileSpec":                     schema_pkg_apis_garden_v1beta1_CloudProfileSpec(ref),
		"github.com/gardener/gardener/pkg/apis/garden/v1beta1.ClusterAutoscaler":                    schema_pkg_apis_garden_v1beta1_ClusterAutoscaler(ref),
		"github.com/gardener/gardener/pkg/apis/garden/v1beta1.DNS":                                  schema_pkg_apis_garden_v1beta1_DNS(ref),
		"github.com/gardener/gardener/pkg/apis/garden/v1beta1.DNSProviderConstraint":                schema_pkg_apis_garden_v1beta1_DNSProviderConstraint(ref),
		"github.com/gardener/gardener/pkg/apis/garden/v1beta1.Extension":                            schema_pkg_apis_garden_v1beta1_Extension(ref),
		"github.com/gardener/gardener/pkg/apis/garden/v1beta1.GCPCloud":                             schema_pkg_apis_garden_v1beta1_GCPCloud(ref),
		"github.com/gardener/gardener/pkg/apis/garden/v1beta1.GCPConstraints":                       schema_pkg_apis_garden_v1beta1_GCPConstraints(ref),
		"github.com/gardener/gardener/pkg/apis/garden/v1beta1.GCPNetworks":                          schema_pkg_apis_garden_v1beta1_GCPNetworks(ref),
		"github.com/gardener/gardener/pkg/apis/garden/v1beta1.GCPProfile":                           schema_pkg_apis_garden_v1beta1_GCPProfile(ref),
		"github.com/gardener/gardener/pkg/apis/garden/v1beta1.GCPVPC":                               schema_pkg_apis_garden_v1beta1_GCPVPC(ref),
		"github.com/gardener/gardener/pkg/apis/garden/v1beta1.GCPWorker":                            schema_pkg_apis_garden_v1beta1_GCPWorker(ref),
		"github.com/gardener/gardener/pkg/apis/garden/v1beta1.Gardener":                             schema_pkg_apis_garden_v1beta1_Gardener(ref),
		"github.com/gardener/gardener/pkg/apis/garden/v1beta1.GardenerDuration":                     schema_pkg_apis_garden_v1beta1_GardenerDuration(ref),
		"github.com/gardener/gardener/pkg/apis/garden/v1beta1.Heapster":                             schema_pkg_apis_garden_v1beta1_Heapster(ref),
		"github.com/gardener/gardener/pkg/apis/garden/v1beta1.HelmTiller":                           schema_pkg_apis_garden_v1beta1_HelmTiller(ref),
		"github.com/gardener/gardener/pkg/apis/garden/v1beta1.Hibernation":                          schema_pkg_apis_garden_v1beta1_Hibernation(ref),
		"github.com/gardener/gardener/pkg/apis/garden/v1beta1.HibernationSchedule":                  schema_pkg_apis_garden_v1beta1_HibernationSchedule(ref),
		"github.com/gardener/gardener/pkg/apis/garden/v1beta1.HorizontalPodAutoscalerConfig":        schema_pkg_apis_garden_v1beta1_HorizontalPodAutoscalerConfig(ref),
		"github.com/gardener/gardener/pkg/apis/garden/v1beta1.K8SNetworks":                          schema_pkg_apis_garden_v1beta1_K8SNetworks(ref),
		"github.com/gardener/gardener/pkg/apis/garden/v1beta1.Kube2IAM":                             schema_pkg_apis_garden_v1beta1_Kube2IAM(ref),
		"github.com/gardener/gardener/pkg/apis/garden/v1beta1.Kube2IAMRole":                         schema_pkg_apis_garden_v1beta1_Kube2IAMRole(ref),
		"github.com/gardener/gardener/pkg/apis/garden/v1beta1.KubeAPIServerConfig":                  schema_pkg_apis_garden_v1beta1_KubeAPIServerConfig(ref),
		"github.com/gardener/gardener/pkg/apis/garden/v1beta1.KubeControllerManagerConfig":          schema_pkg_apis_garden_v1beta1_KubeControllerManagerConfig(ref),
		"github.com/gardener/gardener/pkg/apis/garden/v1beta1.KubeLego":                             schema_pkg_apis_garden_v1beta1_KubeLego(ref),
		"github.com/gardener/gardener/pkg/apis/garden/v1beta1.KubeProxyConfig":                      schema_pkg_apis_garden_v1beta1_KubeProxyConfig(ref),
		"github.com/gardener/gardener/pkg/apis/garden/v1beta1.KubeSchedulerConfig":                  schema_pkg_apis_garden_v1beta1_KubeSchedulerConfig(ref),
		"github.com/gardener/gardener/pkg/apis/garden/v1beta1.KubeletConfig":                        schema_pkg_apis_garden_v1beta1_KubeletConfig(ref),
		"github.com/gardener/gardener/pkg/apis/garden/v1beta1.KubeletConfigEviction":                schema_pkg_apis_garden_v1beta1_KubeletConfigEviction(ref),
		"github.com/gardener/gardener/pkg/apis/garden/v1beta1.KubeletConfigEvictionMinimumReclaim":  schema_pkg_apis_garden_v1beta1_KubeletConfigEvictionMinimumReclaim(ref),
		"github.com/gardener/gardener/pkg/apis/garden/v1beta1.KubeletConfigEvictionSoftGracePeriod": schema_pkg_apis_garden_v1beta1_KubeletConfigEvictionSoftGracePeriod(ref),
		"github.com/gardener/gardener/pkg/apis/garden/v1beta1.Kubernetes":                           schema_pkg_apis_garden_v1beta1_Kubernetes(ref),
		"github.com/gardener/gardener/pkg/apis/garden/v1beta1.KubernetesConfig":                     schema_pkg_apis_garden_v1beta1_KubernetesConfig(ref),
		"github.com/gardener/gardener/pkg/apis/garden/v1beta1.KubernetesConstraints":                schema_pkg_apis_garden_v1beta1_KubernetesConstraints(ref),
		"github.com/gardener/gardener/pkg/apis/garden/v1beta1.KubernetesDashboard":                  schema_pkg_apis_garden_v1beta1_KubernetesDashboard(ref),
		"github.com/gardener/gardener/pkg/apis/garden/v1beta1.KubernetesVersion":                    schema_pkg_apis_garden_v1beta1_KubernetesVersion(ref),
		"github.com/gardener/gardener/pkg/apis/garden/v1beta1.MachineImage":                         schema_pkg_apis_garden_v1beta1_MachineImage(ref),
		"github.com/gardener/gardener/pkg/apis/garden/v1beta1.MachineImageVersion":                  schema_pkg_apis_garden_v1beta1_MachineImageVersion(ref),
		"github.com/gardener/gardener/pkg/apis/garden/v1beta1.MachineType":                          schema_pkg_apis_garden_v1beta1_MachineType(ref),
		"github.com/gardener/gardener/pkg/apis/garden/v1beta1.MachineTypeStorage":                   schema_pkg_apis_garden_v1beta1_MachineTypeStorage(ref),
		"github.com/gardener/gardener/pkg/apis/garden/v1beta1.Maintenance":                          schema_pkg_apis_garden_v1beta1_Maintenance(ref),
		"github.com/gardener/gardener/pkg/apis/garden/v1beta1.MaintenanceAutoUpdate":                schema_pkg_apis_garden_v1beta1_MaintenanceAutoUpdate(ref),
		"github.com/gardener/gardener/pkg/apis/garden/v1beta1.MaintenanceTimeWindow":                schema_pkg_apis_garden_v1beta1_MaintenanceTimeWindow(ref),
		"github.com/gardener/gardener/pkg/apis/garden/v1beta1.Monitoring":                           schema_pkg_apis_garden_v1beta1_Monitoring(ref),
		"github.com/gardener/gardener/pkg/apis/garden/v1beta1.Monocular":                            schema_pkg_apis_garden_v1beta1_Monocular(ref),
		"github.com/gardener/gardener/pkg/apis/garden/v1beta1.Networking":                           schema_pkg_apis_garden_v1beta1_Networking(ref),
		"github.com/gardener/gardener/pkg/apis/garden/v1beta1.NginxIngress":                         schema_pkg_apis_garden_v1beta1_NginxIngress(ref),
		"github.com/gardener/gardener/pkg/apis/garden/v1beta1.OIDCConfig":                           schema_pkg_apis_garden_v1beta1_OIDCConfig(ref),
		"github.com/gardener/gardener/pkg/apis/garden/v1beta1.OpenIDConnectClientAuthentication":    schema_pkg_apis_garden_v1beta1_OpenIDConnectClientAuthentication(ref),
		"github.com/gardener/gardener/pkg/apis/garden/v1beta1.OpenStackCloud":                       schema_pkg_apis_garden_v1beta1_OpenStackCloud(ref),
		"github.com/gardener/gardener/pkg/apis/garden/v1beta1.OpenStackConstraints":                 schema_pkg_apis_garden_v1beta1_OpenStackConstraints(ref),
		"github.com/gardener/gardener/pkg/apis/garden/v1beta1.OpenStackFloatingPool":                schema_pkg_apis_garden_v1beta1_OpenStackFloatingPool(ref),
		"github.com/gardener/gardener/pkg/apis/garden/v1beta1.OpenStackLoadBalancerClass":           schema_pkg_apis_garden_v1beta1_OpenStackLoadBalancerClass(ref),
		"github.com/gardener/gardener/pkg/apis/garden/v1beta1.OpenStackLoadBalancerProvider":        schema_pkg_apis_garden_v1beta1_OpenStackLoadBalancerProvider(ref),
		"github.com/gardener/gardener/pkg/apis/garden/v1beta1.OpenStackMachineType":                 schema_pkg_apis_garden_v1beta1_OpenStackMachineType(ref),
		"github.com/gardener/gardener/pkg/apis/garden/v1beta1.OpenStackNetworks":                    schema_pkg_apis_garden_v1beta1_OpenStackNetworks(ref),
		"github.com/gardener/gardener/pkg/apis/garden/v1beta1.OpenStackProfile":                     schema_pkg_apis_garden_v1beta1_OpenStackProfile(ref),
		"github.com/gardener/gardener/pkg/apis/garden/v1beta1.OpenStackRouter":                      schema_pkg_apis_garden_v1beta1_OpenStackRouter(ref),
		"github.com/gardener/gardener/pkg/apis/garden/v1beta1.OpenStackWorker":                      schema_pkg_apis_garden_v1beta1_OpenStackWorker(ref),
		"github.com/gardener/gardener/pkg/apis/garden/v1beta1.PacketCloud":                          schema_pkg_apis_garden_v1beta1_PacketCloud(ref),
		"github.com/gardener/gardener/pkg/apis/garden/v1beta1.PacketConstraints":                    schema_pkg_apis_garden_v1beta1_PacketConstraints(ref),
		"github.com/gardener/gardener/pkg/apis/garden/v1beta1.PacketNetworks":                       schema_pkg_apis_garden_v1beta1_PacketNetworks(ref),
		"github.com/gardener/gardener/pkg/apis/garden/v1beta1.PacketProfile":                        schema_pkg_apis_garden_v1beta1_PacketProfile(ref),
		"github.com/gardener/gardener/pkg/apis/garden/v1beta1.PacketWorker":                         schema_pkg_apis_garden_v1beta1_PacketWorker(ref),
		"github.com/gardener/gardener/pkg/apis/garden/v1beta1.Project":                              schema_pkg_apis_garden_v1beta1_Project(ref),
		"github.com/gardener/gardener/pkg/apis/garden/v1beta1.ProjectList":                          schema_pkg_apis_garden_v1beta1_ProjectList(ref),
		"github.com/gardener/gardener/pkg/apis/garden/v1beta1.ProjectSpec":                          schema_pkg_apis_garden_v1beta1_ProjectSpec(ref),
		"github.com/gardener/gardener/pkg/apis/garden/v1beta1.ProjectStatus":                        schema_pkg_apis_garden_v1beta1_ProjectStatus(ref),
		"github.com/gardener/gardener/pkg/apis/garden/v1beta1.Quota":                                schema_pkg_apis_garden_v1beta1_Quota(ref),
		"github.com/gardener/gardener/pkg/apis/garden/v1beta1.QuotaList":                            schema_pkg_apis_garden_v1beta1_QuotaList(ref),
		"github.com/gardener/gardener/pkg/apis/garden/v1beta1.QuotaSpec":                            schema_pkg_apis_garden_v1beta1_QuotaSpec(ref),
		"github.com/gardener/gardener/pkg/apis/garden/v1beta1.SecretBinding":                        schema_pkg_apis_garden_v1beta1_SecretBinding(ref),
		"github.com/gardener/gardener/pkg/apis/garden/v1beta1.SecretBindingList":                    schema_pkg_apis_garden_v1beta1_SecretBindingList(ref),
		"github.com/gardener/gardener/pkg/apis/garden/v1beta1.Seed":                                 schema_pkg_apis_garden_v1beta1_Seed(ref),
		"github.com/gardener/gardener/pkg/apis/garden/v1beta1.SeedCloud":                            schema_pkg_apis_garden_v1beta1_SeedCloud(ref),
		"github.com/gardener/gardener/pkg/apis/garden/v1beta1.SeedList":                             schema_pkg_apis_garden_v1beta1_SeedList(ref),
		"github.com/gardener/gardener/pkg/apis/garden/v1beta1.SeedNetworks":                         schema_pkg_apis_garden_v1beta1_SeedNetworks(ref),
		"github.com/gardener/gardener/pkg/apis/garden/v1beta1.SeedSpec":                             schema_pkg_apis_garden_v1beta1_SeedSpec(ref),
		"github.com/gardener/gardener/pkg/apis/garden/v1beta1.SeedStatus":                           schema_pkg_apis_garden_v1beta1_SeedStatus(ref),
		"github.com/gardener/gardener/pkg/apis/garden/v1beta1.ServiceAccountConfig":                 schema_pkg_apis_garden_v1beta1_ServiceAccountConfig(ref),
		"github.com/gardener/gardener/pkg/apis/garden/v1beta1.Shoot":                                schema_pkg_apis_garden_v1beta1_Shoot(ref),
		"github.com/gardener/gardener/pkg/apis/garden/v1beta1.ShootList":                            schema_pkg_apis_garden_v1beta1_ShootList(ref),
		"github.com/gardener/gardener/pkg/apis/garden/v1beta1.ShootMachineImage":                    schema_pkg_apis_garden_v1beta1_ShootMachineImage(ref),
		"github.com/gardener/gardener/pkg/apis/garden/v1beta1.ShootNetworks":                        schema_pkg_apis_garden_v1beta1_ShootNetworks(ref),
		"github.com/gardener/gardener/pkg/apis/garden/v1beta1.ShootSpec":                            schema_pkg_apis_garden_v1beta1_ShootSpec(ref),
		"github.com/gardener/gardener/pkg/apis/garden/v1beta1.ShootStatus":                          schema_pkg_apis_garden_v1beta1_ShootStatus(ref),
		"github.com/gardener/gardener/pkg/apis/garden/v1beta1.VolumeType":                           schema_pkg_apis_garden_v1beta1_VolumeType(ref),
		"github.com/gardener/gardener/pkg/apis/garden/v1beta1.Worker":                               schema_pkg_apis_garden_v1beta1_Worker(ref),
		"github.com/gardener/gardener/pkg/apis/garden/v1beta1.Zone":                                 schema_pkg_apis_garden_v1beta1_Zone(ref),
		"k8s.io/apimachinery/pkg/apis/meta/v1.APIGroup":                                             schema_pkg_apis_meta_v1_APIGroup(ref),
		"k8s.io/apimachinery/pkg/apis/meta/v1.APIGroupList":                                         schema_pkg_apis_meta_v1_APIGroupList(ref),
		"k8s.io/apimachinery/pkg/apis/meta/v1.APIResource":                                          schema_pkg_apis_meta_v1_APIResource(ref),
		"k8s.io/apimachinery/pkg/apis/meta/v1.APIResourceList":                                      schema_pkg_apis_meta_v1_APIResourceList(ref),
		"k8s.io/apimachinery/pkg/apis/meta/v1.APIVersions":                                          schema_pkg_apis_meta_v1_APIVersions(ref),
		"k8s.io/apimachinery/pkg/apis/meta/v1.CreateOptions":                                        schema_pkg_apis_meta_v1_CreateOptions(ref),
		"k8s.io/apimachinery/pkg/apis/meta/v1.DeleteOptions":                                        schema_pkg_apis_meta_v1_DeleteOptions(ref),
		"k8s.io/apimachinery/pkg/apis/meta/v1.Duration":                                             schema_pkg_apis_meta_v1_Duration(ref),
		"k8s.io/apimachinery/pkg/apis/meta/v1.ExportOptions":                                        schema_pkg_apis_meta_v1_ExportOptions(ref),
		"k8s.io/apimachinery/pkg/apis/meta/v1.FieldsV1":                                             schema_pkg_apis_meta_v1_FieldsV1(ref),
		"k8s.io/apimachinery/pkg/apis/meta/v1.GetOptions":                                           schema_pkg_apis_meta_v1_GetOptions(ref),
		"k8s.io/apimachinery/pkg/apis/meta/v1.GroupKind":                                            schema_pkg_apis_meta_v1_GroupKind(ref),
		"k8s.io/apimachinery/pkg/apis/meta/v1.GroupResource":                                        schema_pkg_apis_meta_v1_GroupResource(ref),
		"k8s.io/apimachinery/pkg/apis/meta/v1.GroupVersion":                                         schema_pkg_apis_meta_v1_GroupVersion(ref),
		"k8s.io/apimachinery/pkg/apis/meta/v1.GroupVersionForDiscovery":                             schema_pkg_apis_meta_v1_GroupVersionForDiscovery(ref),
		"k8s.io/apimachinery/pkg/apis/meta/v1.GroupVersionKind":                                     schema_pkg_apis_meta_v1_GroupVersionKind(ref),
		"k8s.io/apimachinery/pkg/apis/meta/v1.GroupVersionResource":                                 schema_pkg_apis_meta_v1_GroupVersionResource(ref),
		"k8s.io/apimachinery/pkg/apis/meta/v1.InternalEvent":                                        schema_pkg_apis_meta_v1_InternalEvent(ref),
		"k8s.io/apimachinery/pkg/apis/meta/v1.LabelSelector":                                        schema_pkg_apis_meta_v1_LabelSelector(ref),
		"k8s.io/apimachinery/pkg/apis/meta/v1.LabelSelectorRequirement":                             schema_pkg_apis_meta_v1_LabelSelectorRequirement(ref),
		"k8s.io/apimachinery/pkg/apis/meta/v1.List":                                                 schema_pkg_apis_meta_v1_List(ref),
		"k8s.io/apimachinery/pkg/apis/meta/v1.ListMeta":                                             schema_pkg_apis_meta_v1_ListMeta(ref),
		"k8s.io/apimachinery/pkg/apis/meta/v1.ListOptions":                                          schema_pkg_apis_meta_v1_ListOptions(ref),
		"k8s.io/apimachinery/pkg/apis/meta/v1.ManagedFieldsEntry":                                   schema_pkg_apis_meta_v1_ManagedFieldsEntry(ref),
		"k8s.io/apimachinery/pkg/apis/meta/v1.MicroTime":                                            schema_pkg_apis_meta_v1_MicroTime(ref),
		"k8s.io/apimachinery/pkg/apis/meta/v1.ObjectMeta":                                           schema_pkg_apis_meta_v1_ObjectMeta(ref),
		"k8s.io/apimachinery/pkg/apis/meta/v1.OwnerReference":                                       schema_pkg_apis_meta_v1_OwnerReference(ref),
		"k8s.io/apimachinery/pkg/apis/meta/v1.PartialObjectMetadata":                                schema_pkg_apis_meta_v1_PartialObjectMetadata(ref),
		"k8s.io/apimachinery/pkg/apis/meta/v1.PartialObjectMetadataList":                            schema_pkg_apis_meta_v1_PartialObjectMetadataList(ref),
		"k8s.io/apimachinery/pkg/apis/meta/v1.Patch":                                                schema_pkg_apis_meta_v1_Patch(ref),
		"k8s.io/apimachinery/pkg/apis/meta/v1.PatchOptions":                                         schema_pkg_apis_meta_v1_PatchOptions(ref),
		"k8s.io/apimachinery/pkg/apis/meta/v1.Preconditions":                                        schema_pkg_apis_meta_v1_Preconditions(ref),
		"k8s.io/apimachinery/pkg/apis/meta/v1.RootPaths":                                            schema_pkg_apis_meta_v1_RootPaths(ref),
		"k8s.io/apimachinery/pkg/apis/meta/v1.ServerAddressByClientCIDR":                            schema_pkg_apis_meta_v1_ServerAddressByClientCIDR(ref),
		"k8s.io/apimachinery/pkg/apis/meta/v1.Status":                                               schema_pkg_apis_meta_v1_Status(ref),
		"k8s.io/apimachinery/pkg/apis/meta/v1.StatusCause":                                          schema_pkg_apis_meta_v1_StatusCause(ref),
		"k8s.io/apimachinery/pkg/apis/meta/v1.StatusDetails":                                        schema_pkg_apis_meta_v1_StatusDetails(ref),
		"k8s.io/apimachinery/pkg/apis/meta/v1.Table":                                                schema_pkg_apis_meta_v1_Table(ref),
		"k8s.io/apimachinery/pkg/apis/meta/v1.TableColumnDefinition":                                schema_pkg_apis_meta_v1_TableColumnDefinition(ref),
		"k8s.io/apimachinery/pkg/apis/meta/v1.TableOptions":                                         schema_pkg_apis_meta_v1_TableOptions(ref),
		"k8s.io/apimachinery/pkg/apis/meta/v1.TableRow":                                             schema_pkg_apis_meta_v1_TableRow(ref),
		"k8s.io/apimachinery/pkg/apis/meta/v1.TableRowCondition":                                    schema_pkg_apis_meta_v1_TableRowCondition(ref),
		"k8s.io/apimachinery/pkg/apis/meta/v1.Time":                                                 schema_pkg_apis_meta_v1_Time(ref),
		"k8s.io/apimachinery/pkg/apis/meta/v1.Timestamp":                                            schema_pkg_apis_meta_v1_Timestamp(ref),
		"k8s.io/apimachinery/pkg/apis/meta/v1.TypeMeta":                                             schema_pkg_apis_meta_v1_TypeMeta(ref),
		"k8s.io/apimachinery/pkg/apis/meta/v1.UpdateOptions":                                        schema_pkg_apis_meta_v1_UpdateOptions(ref),
		"k8s.io/apimachinery/pkg/apis/meta/v1.WatchEvent":                                           schema_pkg_apis_meta_v1_WatchEvent(ref),
		"k8s.io/apimachinery/pkg/runtime.RawExtension":                                              schema_k8sio_apimachinery_pkg_runtime_RawExtension(ref),
		"k8s.io/apimachinery/pkg/runtime.TypeMeta":                                                  schema_k8sio_apimachinery_pkg_runtime_TypeMeta(ref),
		"k8s.io/apimachinery/pkg/runtime.Unknown":                                                   schema_k8sio_apimachinery_pkg_runtime_Unknown(ref),
		"k8s.io/apimachinery/pkg/version.Info":                                                      schema_k8sio_apimachinery_pkg_version_Info(ref),
	}
}

func schema_pkg_apis_garden_v1beta1_AWSCloud(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "AWSCloud contains the Shoot specification for AWS.",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"machineImage": {
						SchemaProps: spec.SchemaProps{
							Description: "ShootMachineImage holds information about the machine image to use for all workers. It will default to the latest version of the first image stated in the referenced CloudProfile if no value has been provided.",
							Ref:         ref("github.com/gardener/gardener/pkg/apis/garden/v1beta1.ShootMachineImage"),
						},
					},
					"networks": {
						SchemaProps: spec.SchemaProps{
							Description: "Networks holds information about the Kubernetes and infrastructure networks.",
							Ref:         ref("github.com/gardener/gardener/pkg/apis/garden/v1beta1.AWSNetworks"),
						},
					},
					"workers": {
						VendorExtensible: spec.VendorExtensible{
							Extensions: spec.Extensions{
								"x-kubernetes-patch-merge-key": "name",
								"x-kubernetes-patch-strategy":  "merge",
							},
						},
						SchemaProps: spec.SchemaProps{
							Description: "Workers is a list of worker groups.",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Ref: ref("github.com/gardener/gardener/pkg/apis/garden/v1beta1.AWSWorker"),
									},
								},
							},
						},
					},
					"zones": {
						SchemaProps: spec.SchemaProps{
							Description: "Zones is a list of availability zones to deploy the Shoot cluster to.",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Type:   []string{"string"},
										Format: "",
									},
								},
							},
						},
					},
				},
				Required: []string{"networks", "workers", "zones"},
			},
		},
		Dependencies: []string{
			"github.com/gardener/gardener/pkg/apis/garden/v1beta1.AWSNetworks", "github.com/gardener/gardener/pkg/apis/garden/v1beta1.AWSWorker", "github.com/gardener/gardener/pkg/apis/garden/v1beta1.ShootMachineImage"},
	}
}

func schema_pkg_apis_garden_v1beta1_AWSConstraints(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "AWSConstraints is an object containing constraints for certain values in the Shoot specification.",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"dnsProviders": {
						VendorExtensible: spec.VendorExtensible{
							Extensions: spec.Extensions{
								"x-kubernetes-patch-merge-key": "name",
								"x-kubernetes-patch-strategy":  "merge",
							},
						},
						SchemaProps: spec.SchemaProps{
							Description: "DNSProviders contains constraints regarding allowed values of the 'dns.provider' block in the Shoot specification.",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Ref: ref("github.com/gardener/gardener/pkg/apis/garden/v1beta1.DNSProviderConstraint"),
									},
								},
							},
						},
					},
					"kubernetes": {
						SchemaProps: spec.SchemaProps{
							Description: "Kubernetes contains constraints regarding allowed values of the 'kubernetes' block in the Shoot specification.",
							Ref:         ref("github.com/gardener/gardener/pkg/apis/garden/v1beta1.KubernetesConstraints"),
						},
					},
					"machineImages": {
						VendorExtensible: spec.VendorExtensible{
							Extensions: spec.Extensions{
								"x-kubernetes-patch-merge-key": "name",
								"x-kubernetes-patch-strategy":  "merge",
							},
						},
						SchemaProps: spec.SchemaProps{
							Description: "MachineImages contains constraints regarding allowed values for machine images in the Shoot specification.",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Ref: ref("github.com/gardener/gardener/pkg/apis/garden/v1beta1.MachineImage"),
									},
								},
							},
						},
					},
					"machineTypes": {
						VendorExtensible: spec.VendorExtensible{
							Extensions: spec.Extensions{
								"x-kubernetes-patch-merge-key": "name",
								"x-kubernetes-patch-strategy":  "merge",
							},
						},
						SchemaProps: spec.SchemaProps{
							Description: "MachineTypes contains constraints regarding allowed values for machine types in the 'workers' block in the Shoot specification.",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Ref: ref("github.com/gardener/gardener/pkg/apis/garden/v1beta1.MachineType"),
									},
								},
							},
						},
					},
					"volumeTypes": {
						VendorExtensible: spec.VendorExtensible{
							Extensions: spec.Extensions{
								"x-kubernetes-patch-merge-key": "name",
								"x-kubernetes-patch-strategy":  "merge",
							},
						},
						SchemaProps: spec.SchemaProps{
							Description: "VolumeTypes contains constraints regarding allowed values for volume types in the 'workers' block in the Shoot specification.",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Ref: ref("github.com/gardener/gardener/pkg/apis/garden/v1beta1.VolumeType"),
									},
								},
							},
						},
					},
					"zones": {
						VendorExtensible: spec.VendorExtensible{
							Extensions: spec.Extensions{
								"x-kubernetes-patch-merge-key": "region",
								"x-kubernetes-patch-strategy":  "merge",
							},
						},
						SchemaProps: spec.SchemaProps{
							Description: "Zones contains constraints regarding allowed values for 'zones' block in the Shoot specification.",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Ref: ref("github.com/gardener/gardener/pkg/apis/garden/v1beta1.Zone"),
									},
								},
							},
						},
					},
				},
				Required: []string{"kubernetes", "machineImages", "machineTypes", "volumeTypes", "zones"},
			},
		},
		Dependencies: []string{
			"github.com/gardener/gardener/pkg/apis/garden/v1beta1.DNSProviderConstraint", "github.com/gardener/gardener/pkg/apis/garden/v1beta1.KubernetesConstraints", "github.com/gardener/gardener/pkg/apis/garden/v1beta1.MachineImage", "github.com/gardener/gardener/pkg/apis/garden/v1beta1.MachineType", "github.com/gardener/gardener/pkg/apis/garden/v1beta1.VolumeType", "github.com/gardener/gardener/pkg/apis/garden/v1beta1.Zone"},
	}
}

func schema_pkg_apis_garden_v1beta1_AWSNetworks(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "AWSNetworks holds information about the Kubernetes and infrastructure networks.",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"nodes": {
						SchemaProps: spec.SchemaProps{
							Description: "Nodes is the CIDR of the node network.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"pods": {
						SchemaProps: spec.SchemaProps{
							Description: "Pods is the CIDR of the pod network.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"services": {
						SchemaProps: spec.SchemaProps{
							Description: "Services is the CIDR of the service network.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"vpc": {
						SchemaProps: spec.SchemaProps{
							Description: "VPC indicates whether to use an existing VPC or create a new one.",
							Ref:         ref("github.com/gardener/gardener/pkg/apis/garden/v1beta1.AWSVPC"),
						},
					},
					"internal": {
						SchemaProps: spec.SchemaProps{
							Description: "Internal is a list of private subnets to create (used for internal load balancers).",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Type:   []string{"string"},
										Format: "",
									},
								},
							},
						},
					},
					"public": {
						SchemaProps: spec.SchemaProps{
							Description: "Public is a list of public subnets to create (used for bastion and load balancers).",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Type:   []string{"string"},
										Format: "",
									},
								},
							},
						},
					},
					"workers": {
						SchemaProps: spec.SchemaProps{
							Description: "Workers is a list of worker subnets (private) to create (used for the VMs).",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Type:   []string{"string"},
										Format: "",
									},
								},
							},
						},
					},
				},
				Required: []string{"vpc", "internal", "public", "workers"},
			},
		},
		Dependencies: []string{
			"github.com/gardener/gardener/pkg/apis/garden/v1beta1.AWSVPC"},
	}
}

func schema_pkg_apis_garden_v1beta1_AWSProfile(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "AWSProfile defines certain constraints and definitions for the AWS cloud.",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"constraints": {
						SchemaProps: spec.SchemaProps{
							Description: "Constraints is an object containing constraints for certain values in the Shoot specification.",
							Ref:         ref("github.com/gardener/gardener/pkg/apis/garden/v1beta1.AWSConstraints"),
						},
					},
				},
				Required: []string{"constraints"},
			},
		},
		Dependencies: []string{
			"github.com/gardener/gardener/pkg/apis/garden/v1beta1.AWSConstraints"},
	}
}

func schema_pkg_apis_garden_v1beta1_AWSVPC(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "AWSVPC contains either an id (of an existing VPC) or the CIDR (for a VPC to be created).",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"id": {
						SchemaProps: spec.SchemaProps{
							Description: "ID is the AWS VPC id of an existing VPC.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"cidr": {
						SchemaProps: spec.SchemaProps{
							Description: "CIDR is a CIDR range for a new VPC.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
				},
			},
		},
	}
}

func schema_pkg_apis_garden_v1beta1_AWSWorker(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "AWSWorker is the definition of a worker group.",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"name": {
						SchemaProps: spec.SchemaProps{
							Description: "Name is the name of the worker group.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"machineType": {
						SchemaProps: spec.SchemaProps{
							Description: "MachineType is the machine type of the worker group.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"machineImage": {
						SchemaProps: spec.SchemaProps{
							Description: "ShootMachineImage holds information about the machine image to use for all workers. It will default to the latest version of the first image stated in the referenced CloudProfile if no value has been provided.",
							Ref:         ref("github.com/gardener/gardener/pkg/apis/garden/v1beta1.ShootMachineImage"),
						},
					},
					"autoScalerMin": {
						SchemaProps: spec.SchemaProps{
							Description: "AutoScalerMin is the minimum number of VMs to create.",
							Type:        []string{"integer"},
							Format:      "int32",
						},
					},
					"autoScalerMax": {
						SchemaProps: spec.SchemaProps{
							Description: "AutoScalerMin is the maximum number of VMs to create.",
							Type:        []string{"integer"},
							Format:      "int32",
						},
					},
					"maxSurge": {
						SchemaProps: spec.SchemaProps{
							Description: "MaxSurge is maximum number of VMs that are created during an update.",
							Ref:         ref("k8s.io/apimachinery/pkg/util/intstr.IntOrString"),
						},
					},
					"maxUnavailable": {
						SchemaProps: spec.SchemaProps{
							Description: "MaxUnavailable is the maximum number of VMs that can be unavailable during an update.",
							Ref:         ref("k8s.io/apimachinery/pkg/util/intstr.IntOrString"),
						},
					},
					"annotations": {
						SchemaProps: spec.SchemaProps{
							Description: "Annotations is a map of key/value pairs for annotations for all the `Node` objects in this worker pool.",
							Type:        []string{"object"},
							AdditionalProperties: &spec.SchemaOrBool{
								Allows: true,
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Type:   []string{"string"},
										Format: "",
									},
								},
							},
						},
					},
					"labels": {
						SchemaProps: spec.SchemaProps{
							Description: "Labels is a map of key/value pairs for labels for all the `Node` objects in this worker pool.",
							Type:        []string{"object"},
							AdditionalProperties: &spec.SchemaOrBool{
								Allows: true,
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Type:   []string{"string"},
										Format: "",
									},
								},
							},
						},
					},
					"taints": {
						SchemaProps: spec.SchemaProps{
							Description: "Taints is a list of taints for all the `Node` objects in this worker pool.",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Ref: ref("k8s.io/api/core/v1.Taint"),
									},
								},
							},
						},
					},
					"kubelet": {
						SchemaProps: spec.SchemaProps{
							Description: "Kubelet contains configuration settings for the kubelet.",
							Ref:         ref("github.com/gardener/gardener/pkg/apis/garden/v1beta1.KubeletConfig"),
						},
					},
					"caBundle": {
						SchemaProps: spec.SchemaProps{
							Description: "CABundle is a certificate bundle which will be installed onto every machine of this worker pool.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"volumeType": {
						SchemaProps: spec.SchemaProps{
							Description: "VolumeType is the type of the root volumes.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"volumeSize": {
						SchemaProps: spec.SchemaProps{
							Description: "VolumeSize is the size of the root volume.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
				},
				Required: []string{"name", "machineType", "autoScalerMin", "autoScalerMax", "volumeType", "volumeSize"},
			},
		},
		Dependencies: []string{
			"github.com/gardener/gardener/pkg/apis/garden/v1beta1.KubeletConfig", "github.com/gardener/gardener/pkg/apis/garden/v1beta1.ShootMachineImage", "k8s.io/api/core/v1.Taint", "k8s.io/apimachinery/pkg/util/intstr.IntOrString"},
	}
}

func schema_pkg_apis_garden_v1beta1_Addon(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "Addon also enabling or disabling a specific addon and is used to derive from.",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"enabled": {
						SchemaProps: spec.SchemaProps{
							Description: "Enabled indicates whether the addon is enabled or not.",
							Type:        []string{"boolean"},
							Format:      "",
						},
					},
				},
				Required: []string{"enabled"},
			},
		},
	}
}

func schema_pkg_apis_garden_v1beta1_AddonClusterAutoscaler(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "ClusterAutoscaler describes configuration values for the cluster-autoscaler addon.",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"enabled": {
						SchemaProps: spec.SchemaProps{
							Description: "Enabled indicates whether the addon is enabled or not.",
							Type:        []string{"boolean"},
							Format:      "",
						},
					},
				},
				Required: []string{"enabled"},
			},
		},
	}
}

func schema_pkg_apis_garden_v1beta1_Addons(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "Addons is a collection of configuration for specific addons which are managed by the Gardener.",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"kubernetes-dashboard": {
						SchemaProps: spec.SchemaProps{
							Description: "KubernetesDashboard holds configuration settings for the kubernetes dashboard addon.",
							Ref:         ref("github.com/gardener/gardener/pkg/apis/garden/v1beta1.KubernetesDashboard"),
						},
					},
					"nginx-ingress": {
						SchemaProps: spec.SchemaProps{
							Description: "NginxIngress holds configuration settings for the nginx-ingress addon. DEPRECATED: This field will be removed in a future version.",
							Ref:         ref("github.com/gardener/gardener/pkg/apis/garden/v1beta1.NginxIngress"),
						},
					},
					"cluster-autoscaler": {
						SchemaProps: spec.SchemaProps{
							Description: "ClusterAutoscaler holds configuration settings for the cluster autoscaler addon. DEPRECATED: This field will be removed in a future version.",
							Ref:         ref("github.com/gardener/gardener/pkg/apis/garden/v1beta1.AddonClusterAutoscaler"),
						},
					},
					"heapster": {
						SchemaProps: spec.SchemaProps{
							Description: "Heapster holds configuration settings for the heapster addon. DEPRECATED: This field will be removed in a future version.",
							Ref:         ref("github.com/gardener/gardener/pkg/apis/garden/v1beta1.Heapster"),
						},
					},
					"kube2iam": {
						SchemaProps: spec.SchemaProps{
							Description: "Kube2IAM holds configuration settings for the kube2iam addon (only AWS). DEPRECATED: This field will be removed in a future version.",
							Ref:         ref("github.com/gardener/gardener/pkg/apis/garden/v1beta1.Kube2IAM"),
						},
					},
					"kube-lego": {
						SchemaProps: spec.SchemaProps{
							Description: "KubeLego holds configuration settings for the kube-lego addon. DEPRECATED: This field will be removed in a future version.",
							Ref:         ref("github.com/gardener/gardener/pkg/apis/garden/v1beta1.KubeLego"),
						},
					},
					"monocular": {
						SchemaProps: spec.SchemaProps{
							Description: "Monocular holds configuration settings for the monocular addon. DEPRECATED: This field will be removed in a future version.",
							Ref:         ref("github.com/gardener/gardener/pkg/apis/garden/v1beta1.Monocular"),
						},
					},
				},
			},
		},
		Dependencies: []string{
			"github.com/gardener/gardener/pkg/apis/garden/v1beta1.AddonClusterAutoscaler", "github.com/gardener/gardener/pkg/apis/garden/v1beta1.Heapster", "github.com/gardener/gardener/pkg/apis/garden/v1beta1.Kube2IAM", "github.com/gardener/gardener/pkg/apis/garden/v1beta1.KubeLego", "github.com/gardener/gardener/pkg/apis/garden/v1beta1.KubernetesDashboard", "github.com/gardener/gardener/pkg/apis/garden/v1beta1.Monocular", "github.com/gardener/gardener/pkg/apis/garden/v1beta1.NginxIngress"},
	}
}

func schema_pkg_apis_garden_v1beta1_AdmissionPlugin(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "AdmissionPlugin contains information about a specific admission plugin and its corresponding configuration.",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"name": {
						SchemaProps: spec.SchemaProps{
							Description: "Name is the name of the plugin.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"config": {
						SchemaProps: spec.SchemaProps{
							Description: "Config is the configuration of the plugin.",
							Ref:         ref("github.com/gardener/gardener/pkg/apis/core/v1alpha1.ProviderConfig"),
						},
					},
				},
				Required: []string{"name"},
			},
		},
		Dependencies: []string{
			"github.com/gardener/gardener/pkg/apis/core/v1alpha1.ProviderConfig"},
	}
}

func schema_pkg_apis_garden_v1beta1_Alerting(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "Alerting contains information about how alerting will be done (i.e. who will receive alerts and how).",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"emailReceivers": {
						SchemaProps: spec.SchemaProps{
							Description: "MonitoringEmailReceivers is a list of recipients for alerts",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Type:   []string{"string"},
										Format: "",
									},
								},
							},
						},
					},
				},
			},
		},
	}
}

func schema_pkg_apis_garden_v1beta1_Alicloud(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "Alicloud contains the Shoot specification for Alibaba cloud",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"machineImage": {
						SchemaProps: spec.SchemaProps{
							Description: "ShootMachineImage holds information about the machine image to use for all workers. It will default to the latest version of the first image stated in the referenced CloudProfile if no value has been provided.",
							Ref:         ref("github.com/gardener/gardener/pkg/apis/garden/v1beta1.ShootMachineImage"),
						},
					},
					"networks": {
						SchemaProps: spec.SchemaProps{
							Description: "Networks holds information about the Kubernetes and infrastructure networks.",
							Ref:         ref("github.com/gardener/gardener/pkg/apis/garden/v1beta1.AlicloudNetworks"),
						},
					},
					"workers": {
						VendorExtensible: spec.VendorExtensible{
							Extensions: spec.Extensions{
								"x-kubernetes-patch-merge-key": "name",
								"x-kubernetes-patch-strategy":  "merge",
							},
						},
						SchemaProps: spec.SchemaProps{
							Description: "Workers is a list of worker groups.",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Ref: ref("github.com/gardener/gardener/pkg/apis/garden/v1beta1.AlicloudWorker"),
									},
								},
							},
						},
					},
					"zones": {
						SchemaProps: spec.SchemaProps{
							Description: "Zones is a list of availability zones to deploy the Shoot cluster to, currently, only one is supported.",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Type:   []string{"string"},
										Format: "",
									},
								},
							},
						},
					},
				},
				Required: []string{"networks", "workers", "zones"},
			},
		},
		Dependencies: []string{
			"github.com/gardener/gardener/pkg/apis/garden/v1beta1.AlicloudNetworks", "github.com/gardener/gardener/pkg/apis/garden/v1beta1.AlicloudWorker", "github.com/gardener/gardener/pkg/apis/garden/v1beta1.ShootMachineImage"},
	}
}

func schema_pkg_apis_garden_v1beta1_AlicloudConstraints(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "AlicloudConstraints is an object containing constraints for certain values in the Shoot specification",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"dnsProviders": {
						VendorExtensible: spec.VendorExtensible{
							Extensions: spec.Extensions{
								"x-kubernetes-patch-merge-key": "name",
								"x-kubernetes-patch-strategy":  "merge",
							},
						},
						SchemaProps: spec.SchemaProps{
							Description: "DNSProviders contains constraints regarding allowed values of the 'dns.provider' block in the Shoot specification.",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Ref: ref("github.com/gardener/gardener/pkg/apis/garden/v1beta1.DNSProviderConstraint"),
									},
								},
							},
						},
					},
					"kubernetes": {
						SchemaProps: spec.SchemaProps{
							Description: "Kubernetes contains constraints regarding allowed values of the 'kubernetes' block in the Shoot specification.",
							Ref:         ref("github.com/gardener/gardener/pkg/apis/garden/v1beta1.KubernetesConstraints"),
						},
					},
					"machineImages": {
						VendorExtensible: spec.VendorExtensible{
							Extensions: spec.Extensions{
								"x-kubernetes-patch-merge-key": "name",
								"x-kubernetes-patch-strategy":  "merge",
							},
						},
						SchemaProps: spec.SchemaProps{
							Description: "MachineImages contains constraints regarding allowed values for machine images in the Shoot specification.",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Ref: ref("github.com/gardener/gardener/pkg/apis/garden/v1beta1.MachineImage"),
									},
								},
							},
						},
					},
					"machineTypes": {
						VendorExtensible: spec.VendorExtensible{
							Extensions: spec.Extensions{
								"x-kubernetes-patch-merge-key": "name",
								"x-kubernetes-patch-strategy":  "merge",
							},
						},
						SchemaProps: spec.SchemaProps{
							Description: "MachineTypes contains constraints regarding allowed values for machine types in the 'workers' block in the Shoot specification.",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Ref: ref("github.com/gardener/gardener/pkg/apis/garden/v1beta1.AlicloudMachineType"),
									},
								},
							},
						},
					},
					"volumeTypes": {
						VendorExtensible: spec.VendorExtensible{
							Extensions: spec.Extensions{
								"x-kubernetes-patch-merge-key": "name",
								"x-kubernetes-patch-strategy":  "merge",
							},
						},
						SchemaProps: spec.SchemaProps{
							Description: "VolumeTypes contains constraints regarding allowed values for volume types in the 'workers' block in the Shoot specification.",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Ref: ref("github.com/gardener/gardener/pkg/apis/garden/v1beta1.AlicloudVolumeType"),
									},
								},
							},
						},
					},
					"zones": {
						VendorExtensible: spec.VendorExtensible{
							Extensions: spec.Extensions{
								"x-kubernetes-patch-merge-key": "region",
								"x-kubernetes-patch-strategy":  "merge",
							},
						},
						SchemaProps: spec.SchemaProps{
							Description: "Zones contains constraints regarding allowed values for 'zones' block in the Shoot specification.",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Ref: ref("github.com/gardener/gardener/pkg/apis/garden/v1beta1.Zone"),
									},
								},
							},
						},
					},
				},
				Required: []string{"kubernetes", "machineImages", "machineTypes", "volumeTypes", "zones"},
			},
		},
		Dependencies: []string{
			"github.com/gardener/gardener/pkg/apis/garden/v1beta1.AlicloudMachineType", "github.com/gardener/gardener/pkg/apis/garden/v1beta1.AlicloudVolumeType", "github.com/gardener/gardener/pkg/apis/garden/v1beta1.DNSProviderConstraint", "github.com/gardener/gardener/pkg/apis/garden/v1beta1.KubernetesConstraints", "github.com/gardener/gardener/pkg/apis/garden/v1beta1.MachineImage", "github.com/gardener/gardener/pkg/apis/garden/v1beta1.Zone"},
	}
}

func schema_pkg_apis_garden_v1beta1_AlicloudMachineType(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "AlicloudMachineType defines certain machine types and zone constraints.",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"name": {
						SchemaProps: spec.SchemaProps{
							Description: "Name is the name of the machine type.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"usable": {
						SchemaProps: spec.SchemaProps{
							Description: "Usable defines if the machine type can be used for shoot clusters.",
							Type:        []string{"boolean"},
							Format:      "",
						},
					},
					"cpu": {
						SchemaProps: spec.SchemaProps{
							Description: "CPU is the number of CPUs for this machine type.",
							Ref:         ref("k8s.io/apimachinery/pkg/api/resource.Quantity"),
						},
					},
					"gpu": {
						SchemaProps: spec.SchemaProps{
							Description: "GPU is the number of GPUs for this machine type.",
							Ref:         ref("k8s.io/apimachinery/pkg/api/resource.Quantity"),
						},
					},
					"storage": {
						SchemaProps: spec.SchemaProps{
							Description: "Storage is the amount of storage associated with the root volume of this machine type.",
							Ref:         ref("github.com/gardener/gardener/pkg/apis/garden/v1beta1.MachineTypeStorage"),
						},
					},
					"memory": {
						SchemaProps: spec.SchemaProps{
							Description: "Memory is the amount of memory for this machine type.",
							Ref:         ref("k8s.io/apimachinery/pkg/api/resource.Quantity"),
						},
					},
					"zones": {
						SchemaProps: spec.SchemaProps{
							Type: []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Type:   []string{"string"},
										Format: "",
									},
								},
							},
						},
					},
				},
				Required: []string{"name", "cpu", "gpu", "memory", "zones"},
			},
		},
		Dependencies: []string{
			"github.com/gardener/gardener/pkg/apis/garden/v1beta1.MachineTypeStorage", "k8s.io/apimachinery/pkg/api/resource.Quantity"},
	}
}

func schema_pkg_apis_garden_v1beta1_AlicloudNetworks(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "AlicloudNetworks holds information about the Kubernetes and infrastructure networks.",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"nodes": {
						SchemaProps: spec.SchemaProps{
							Description: "Nodes is the CIDR of the node network.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"pods": {
						SchemaProps: spec.SchemaProps{
							Description: "Pods is the CIDR of the pod network.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"services": {
						SchemaProps: spec.SchemaProps{
							Description: "Services is the CIDR of the service network.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"vpc": {
						SchemaProps: spec.SchemaProps{
							Description: "VPC indicates whether to use an existing VPC or create a new one.",
							Ref:         ref("github.com/gardener/gardener/pkg/apis/garden/v1beta1.AlicloudVPC"),
						},
					},
					"workers": {
						SchemaProps: spec.SchemaProps{
							Description: "Workers is a CIDR of a worker subnet (private) to create (used for the VMs).",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Type:   []string{"string"},
										Format: "",
									},
								},
							},
						},
					},
				},
				Required: []string{"vpc", "workers"},
			},
		},
		Dependencies: []string{
			"github.com/gardener/gardener/pkg/apis/garden/v1beta1.AlicloudVPC"},
	}
}

func schema_pkg_apis_garden_v1beta1_AlicloudProfile(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "AlicloudProfile defines constraints and definitions in Alibaba Cloud environment.",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"constraints": {
						SchemaProps: spec.SchemaProps{
							Description: "Constraints is an object containing constraints for certain values in the Shoot specification.",
							Ref:         ref("github.com/gardener/gardener/pkg/apis/garden/v1beta1.AlicloudConstraints"),
						},
					},
				},
				Required: []string{"constraints"},
			},
		},
		Dependencies: []string{
			"github.com/gardener/gardener/pkg/apis/garden/v1beta1.AlicloudConstraints"},
	}
}

func schema_pkg_apis_garden_v1beta1_AlicloudVPC(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "AlicloudVPC contains either an id (of an existing VPC) or the CIDR (for a VPC to be created).",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"id": {
						SchemaProps: spec.SchemaProps{
							Description: "ID is the Alicloud VPC id of an existing VPC.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"cidr": {
						SchemaProps: spec.SchemaProps{
							Description: "CIDR is a CIDR range for a new VPC.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
				},
			},
		},
	}
}

func schema_pkg_apis_garden_v1beta1_AlicloudVolumeType(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "AlicloudVolumeType defines certain volume types and zone constraints.",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"name": {
						SchemaProps: spec.SchemaProps{
							Description: "Name is the name of the volume type.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"usable": {
						SchemaProps: spec.SchemaProps{
							Description: "Usable defines if the volume type can be used for shoot clusters.",
							Type:        []string{"boolean"},
							Format:      "",
						},
					},
					"class": {
						SchemaProps: spec.SchemaProps{
							Description: "Class is the class of the volume type.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"zones": {
						SchemaProps: spec.SchemaProps{
							Type: []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Type:   []string{"string"},
										Format: "",
									},
								},
							},
						},
					},
				},
				Required: []string{"name", "class", "zones"},
			},
		},
	}
}

func schema_pkg_apis_garden_v1beta1_AlicloudWorker(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "AlicloudWorker is the definition of a worker group.",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"name": {
						SchemaProps: spec.SchemaProps{
							Description: "Name is the name of the worker group.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"machineType": {
						SchemaProps: spec.SchemaProps{
							Description: "MachineType is the machine type of the worker group.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"machineImage": {
						SchemaProps: spec.SchemaProps{
							Description: "ShootMachineImage holds information about the machine image to use for all workers. It will default to the latest version of the first image stated in the referenced CloudProfile if no value has been provided.",
							Ref:         ref("github.com/gardener/gardener/pkg/apis/garden/v1beta1.ShootMachineImage"),
						},
					},
					"autoScalerMin": {
						SchemaProps: spec.SchemaProps{
							Description: "AutoScalerMin is the minimum number of VMs to create.",
							Type:        []string{"integer"},
							Format:      "int32",
						},
					},
					"autoScalerMax": {
						SchemaProps: spec.SchemaProps{
							Description: "AutoScalerMin is the maximum number of VMs to create.",
							Type:        []string{"integer"},
							Format:      "int32",
						},
					},
					"maxSurge": {
						SchemaProps: spec.SchemaProps{
							Description: "MaxSurge is maximum number of VMs that are created during an update.",
							Ref:         ref("k8s.io/apimachinery/pkg/util/intstr.IntOrString"),
						},
					},
					"maxUnavailable": {
						SchemaProps: spec.SchemaProps{
							Description: "MaxUnavailable is the maximum number of VMs that can be unavailable during an update.",
							Ref:         ref("k8s.io/apimachinery/pkg/util/intstr.IntOrString"),
						},
					},
					"annotations": {
						SchemaProps: spec.SchemaProps{
							Description: "Annotations is a map of key/value pairs for annotations for all the `Node` objects in this worker pool.",
							Type:        []string{"object"},
							AdditionalProperties: &spec.SchemaOrBool{
								Allows: true,
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Type:   []string{"string"},
										Format: "",
									},
								},
							},
						},
					},
					"labels": {
						SchemaProps: spec.SchemaProps{
							Description: "Labels is a map of key/value pairs for labels for all the `Node` objects in this worker pool.",
							Type:        []string{"object"},
							AdditionalProperties: &spec.SchemaOrBool{
								Allows: true,
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Type:   []string{"string"},
										Format: "",
									},
								},
							},
						},
					},
					"taints": {
						SchemaProps: spec.SchemaProps{
							Description: "Taints is a list of taints for all the `Node` objects in this worker pool.",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Ref: ref("k8s.io/api/core/v1.Taint"),
									},
								},
							},
						},
					},
					"kubelet": {
						SchemaProps: spec.SchemaProps{
							Description: "Kubelet contains configuration settings for the kubelet.",
							Ref:         ref("github.com/gardener/gardener/pkg/apis/garden/v1beta1.KubeletConfig"),
						},
					},
					"caBundle": {
						SchemaProps: spec.SchemaProps{
							Description: "CABundle is a certificate bundle which will be installed onto every machine of this worker pool.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"volumeType": {
						SchemaProps: spec.SchemaProps{
							Description: "VolumeType is the type of the root volumes.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"volumeSize": {
						SchemaProps: spec.SchemaProps{
							Description: "VolumeSize is the size of the root volume.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
				},
				Required: []string{"name", "machineType", "autoScalerMin", "autoScalerMax", "volumeType", "volumeSize"},
			},
		},
		Dependencies: []string{
			"github.com/gardener/gardener/pkg/apis/garden/v1beta1.KubeletConfig", "github.com/gardener/gardener/pkg/apis/garden/v1beta1.ShootMachineImage", "k8s.io/api/core/v1.Taint", "k8s.io/apimachinery/pkg/util/intstr.IntOrString"},
	}
}

func schema_pkg_apis_garden_v1beta1_AuditConfig(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "AuditConfig contains settings for audit of the api server",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"auditPolicy": {
						SchemaProps: spec.SchemaProps{
							Description: "AuditPolicy contains configuration settings for audit policy of the kube-apiserver.",
							Ref:         ref("github.com/gardener/gardener/pkg/apis/garden/v1beta1.AuditPolicy"),
						},
					},
				},
			},
		},
		Dependencies: []string{
			"github.com/gardener/gardener/pkg/apis/garden/v1beta1.AuditPolicy"},
	}
}

func schema_pkg_apis_garden_v1beta1_AuditPolicy(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "AuditPolicy contains audit policy for kube-apiserver",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"configMapRef": {
						SchemaProps: spec.SchemaProps{
							Description: "ConfigMapRef is a reference to a ConfigMap object in the same namespace, which contains the audit policy for the kube-apiserver.",
							Ref:         ref("k8s.io/api/core/v1.ObjectReference"),
						},
					},
				},
			},
		},
		Dependencies: []string{
			"k8s.io/api/core/v1.ObjectReference"},
	}
}

func schema_pkg_apis_garden_v1beta1_AzureCloud(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "AzureCloud contains the Shoot specification for Azure.",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"machineImage": {
						SchemaProps: spec.SchemaProps{
							Description: "ShootMachineImage holds information about the machine image to use for all workers. It will default to the latest version of the first image stated in the referenced CloudProfile if no value has been provided.",
							Ref:         ref("github.com/gardener/gardener/pkg/apis/garden/v1beta1.ShootMachineImage"),
						},
					},
					"networks": {
						SchemaProps: spec.SchemaProps{
							Description: "Networks holds information about the Kubernetes and infrastructure networks.",
							Ref:         ref("github.com/gardener/gardener/pkg/apis/garden/v1beta1.AzureNetworks"),
						},
					},
					"resourceGroup": {
						SchemaProps: spec.SchemaProps{
							Description: "ResourceGroup indicates whether to use an existing resource group or create a new one.",
							Ref:         ref("github.com/gardener/gardener/pkg/apis/garden/v1beta1.AzureResourceGroup"),
						},
					},
					"workers": {
						VendorExtensible: spec.VendorExtensible{
							Extensions: spec.Extensions{
								"x-kubernetes-patch-merge-key": "name",
								"x-kubernetes-patch-strategy":  "merge",
							},
						},
						SchemaProps: spec.SchemaProps{
							Description: "Workers is a list of worker groups.",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Ref: ref("github.com/gardener/gardener/pkg/apis/garden/v1beta1.AzureWorker"),
									},
								},
							},
						},
					},
					"zones": {
						SchemaProps: spec.SchemaProps{
							Description: "Zones is a list of availability zones to deploy the Shoot cluster to.",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Type:   []string{"string"},
										Format: "",
									},
								},
							},
						},
					},
				},
				Required: []string{"networks", "workers"},
			},
		},
		Dependencies: []string{
			"github.com/gardener/gardener/pkg/apis/garden/v1beta1.AzureNetworks", "github.com/gardener/gardener/pkg/apis/garden/v1beta1.AzureResourceGroup", "github.com/gardener/gardener/pkg/apis/garden/v1beta1.AzureWorker", "github.com/gardener/gardener/pkg/apis/garden/v1beta1.ShootMachineImage"},
	}
}

func schema_pkg_apis_garden_v1beta1_AzureConstraints(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "AzureConstraints is an object containing constraints for certain values in the Shoot specification.",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"dnsProviders": {
						VendorExtensible: spec.VendorExtensible{
							Extensions: spec.Extensions{
								"x-kubernetes-patch-merge-key": "name",
								"x-kubernetes-patch-strategy":  "merge",
							},
						},
						SchemaProps: spec.SchemaProps{
							Description: "DNSProviders contains constraints regarding allowed values of the 'dns.provider' block in the Shoot specification.",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Ref: ref("github.com/gardener/gardener/pkg/apis/garden/v1beta1.DNSProviderConstraint"),
									},
								},
							},
						},
					},
					"kubernetes": {
						SchemaProps: spec.SchemaProps{
							Description: "Kubernetes contains constraints regarding allowed values of the 'kubernetes' block in the Shoot specification.",
							Ref:         ref("github.com/gardener/gardener/pkg/apis/garden/v1beta1.KubernetesConstraints"),
						},
					},
					"machineImages": {
						VendorExtensible: spec.VendorExtensible{
							Extensions: spec.Extensions{
								"x-kubernetes-patch-merge-key": "name",
								"x-kubernetes-patch-strategy":  "merge",
							},
						},
						SchemaProps: spec.SchemaProps{
							Description: "MachineImages contains constraints regarding allowed values for machine images in the Shoot specification.",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Ref: ref("github.com/gardener/gardener/pkg/apis/garden/v1beta1.MachineImage"),
									},
								},
							},
						},
					},
					"machineTypes": {
						VendorExtensible: spec.VendorExtensible{
							Extensions: spec.Extensions{
								"x-kubernetes-patch-merge-key": "name",
								"x-kubernetes-patch-strategy":  "merge",
							},
						},
						SchemaProps: spec.SchemaProps{
							Description: "MachineTypes contains constraints regarding allowed values for machine types in the 'workers' block in the Shoot specification.",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Ref: ref("github.com/gardener/gardener/pkg/apis/garden/v1beta1.MachineType"),
									},
								},
							},
						},
					},
					"volumeTypes": {
						VendorExtensible: spec.VendorExtensible{
							Extensions: spec.Extensions{
								"x-kubernetes-patch-merge-key": "name",
								"x-kubernetes-patch-strategy":  "merge",
							},
						},
						SchemaProps: spec.SchemaProps{
							Description: "VolumeTypes contains constraints regarding allowed values for volume types in the 'workers' block in the Shoot specification.",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Ref: ref("github.com/gardener/gardener/pkg/apis/garden/v1beta1.VolumeType"),
									},
								},
							},
						},
					},
					"zones": {
						VendorExtensible: spec.VendorExtensible{
							Extensions: spec.Extensions{
								"x-kubernetes-patch-merge-key": "region",
								"x-kubernetes-patch-strategy":  "merge",
							},
						},
						SchemaProps: spec.SchemaProps{
							Description: "Zones contains constraints regarding allowed values for 'zones' block in the Shoot specification.",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Ref: ref("github.com/gardener/gardener/pkg/apis/garden/v1beta1.Zone"),
									},
								},
							},
						},
					},
				},
				Required: []string{"kubernetes", "machineImages", "machineTypes", "volumeTypes"},
			},
		},
		Dependencies: []string{
			"github.com/gardener/gardener/pkg/apis/garden/v1beta1.DNSProviderConstraint", "github.com/gardener/gardener/pkg/apis/garden/v1beta1.KubernetesConstraints", "github.com/gardener/gardener/pkg/apis/garden/v1beta1.MachineImage", "github.com/gardener/gardener/pkg/apis/garden/v1beta1.MachineType", "github.com/gardener/gardener/pkg/apis/garden/v1beta1.VolumeType", "github.com/gardener/gardener/pkg/apis/garden/v1beta1.Zone"},
	}
}

func schema_pkg_apis_garden_v1beta1_AzureDomainCount(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "AzureDomainCount defines the region and the count for this domain count value.",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"region": {
						SchemaProps: spec.SchemaProps{
							Description: "Region is a region in Azure.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"count": {
						SchemaProps: spec.SchemaProps{
							Description: "Count is the count value for the respective domain count.",
							Type:        []string{"integer"},
							Format:      "int32",
						},
					},
				},
				Required: []string{"region", "count"},
			},
		},
	}
}

func schema_pkg_apis_garden_v1beta1_AzureNetworks(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "AzureNetworks holds information about the Kubernetes and infrastructure networks.",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"nodes": {
						SchemaProps: spec.SchemaProps{
							Description: "Nodes is the CIDR of the node network.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"pods": {
						SchemaProps: spec.SchemaProps{
							Description: "Pods is the CIDR of the pod network.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"services": {
						SchemaProps: spec.SchemaProps{
							Description: "Services is the CIDR of the service network.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"vnet": {
						SchemaProps: spec.SchemaProps{
							Description: "VNet indicates whether to use an existing VNet or create a new one.",
							Ref:         ref("github.com/gardener/gardener/pkg/apis/garden/v1beta1.AzureVNet"),
						},
					},
					"workers": {
						SchemaProps: spec.SchemaProps{
							Description: "Workers is a CIDR of a worker subnet (private) to create (used for the VMs).",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"serviceEndpoints": {
						SchemaProps: spec.SchemaProps{
							Description: "ServiceEndpoints is a list of Azure ServiceEndpoints which should be associated with the worker subnet.",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Type:   []string{"string"},
										Format: "",
									},
								},
							},
						},
					},
				},
				Required: []string{"vnet", "workers"},
			},
		},
		Dependencies: []string{
			"github.com/gardener/gardener/pkg/apis/garden/v1beta1.AzureVNet"},
	}
}

func schema_pkg_apis_garden_v1beta1_AzureProfile(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "AzureProfile defines certain constraints and definitions for the Azure cloud.",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"constraints": {
						SchemaProps: spec.SchemaProps{
							Description: "Constraints is an object containing constraints for certain values in the Shoot specification.",
							Ref:         ref("github.com/gardener/gardener/pkg/apis/garden/v1beta1.AzureConstraints"),
						},
					},
					"countUpdateDomains": {
						VendorExtensible: spec.VendorExtensible{
							Extensions: spec.Extensions{
								"x-kubernetes-patch-merge-key": "region",
								"x-kubernetes-patch-strategy":  "merge",
							},
						},
						SchemaProps: spec.SchemaProps{
							Description: "CountUpdateDomains is list of Azure update domain counts for each region.",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Ref: ref("github.com/gardener/gardener/pkg/apis/garden/v1beta1.AzureDomainCount"),
									},
								},
							},
						},
					},
					"countFaultDomains": {
						VendorExtensible: spec.VendorExtensible{
							Extensions: spec.Extensions{
								"x-kubernetes-patch-merge-key": "region",
								"x-kubernetes-patch-strategy":  "merge",
							},
						},
						SchemaProps: spec.SchemaProps{
							Description: "CountFaultDomains is list of Azure fault domain counts for each region.",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Ref: ref("github.com/gardener/gardener/pkg/apis/garden/v1beta1.AzureDomainCount"),
									},
								},
							},
						},
					},
				},
				Required: []string{"constraints", "countUpdateDomains", "countFaultDomains"},
			},
		},
		Dependencies: []string{
			"github.com/gardener/gardener/pkg/apis/garden/v1beta1.AzureConstraints", "github.com/gardener/gardener/pkg/apis/garden/v1beta1.AzureDomainCount"},
	}
}

func schema_pkg_apis_garden_v1beta1_AzureResourceGroup(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "AzureResourceGroup indicates whether to use an existing resource group or create a new one.",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"name": {
						SchemaProps: spec.SchemaProps{
							Description: "Name is the name of an existing resource group.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
				},
				Required: []string{"name"},
			},
		},
	}
}

func schema_pkg_apis_garden_v1beta1_AzureVNet(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "AzureVNet indicates whether to use an existing VNet or create a new one.",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"name": {
						SchemaProps: spec.SchemaProps{
							Description: "Name is the AWS VNet name of an existing VNet.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"resourceGroup": {
						SchemaProps: spec.SchemaProps{
							Description: "ResourceGroup is the resourceGroup where the VNet is located.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"cidr": {
						SchemaProps: spec.SchemaProps{
							Description: "CIDR is a CIDR range for a new VNet.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
				},
			},
		},
	}
}

func schema_pkg_apis_garden_v1beta1_AzureWorker(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "AzureWorker is the definition of a worker group.",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"name": {
						SchemaProps: spec.SchemaProps{
							Description: "Name is the name of the worker group.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"machineType": {
						SchemaProps: spec.SchemaProps{
							Description: "MachineType is the machine type of the worker group.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"machineImage": {
						SchemaProps: spec.SchemaProps{
							Description: "ShootMachineImage holds information about the machine image to use for all workers. It will default to the latest version of the first image stated in the referenced CloudProfile if no value has been provided.",
							Ref:         ref("github.com/gardener/gardener/pkg/apis/garden/v1beta1.ShootMachineImage"),
						},
					},
					"autoScalerMin": {
						SchemaProps: spec.SchemaProps{
							Description: "AutoScalerMin is the minimum number of VMs to create.",
							Type:        []string{"integer"},
							Format:      "int32",
						},
					},
					"autoScalerMax": {
						SchemaProps: spec.SchemaProps{
							Description: "AutoScalerMin is the maximum number of VMs to create.",
							Type:        []string{"integer"},
							Format:      "int32",
						},
					},
					"maxSurge": {
						SchemaProps: spec.SchemaProps{
							Description: "MaxSurge is maximum number of VMs that are created during an update.",
							Ref:         ref("k8s.io/apimachinery/pkg/util/intstr.IntOrString"),
						},
					},
					"maxUnavailable": {
						SchemaProps: spec.SchemaProps{
							Description: "MaxUnavailable is the maximum number of VMs that can be unavailable during an update.",
							Ref:         ref("k8s.io/apimachinery/pkg/util/intstr.IntOrString"),
						},
					},
					"annotations": {
						SchemaProps: spec.SchemaProps{
							Description: "Annotations is a map of key/value pairs for annotations for all the `Node` objects in this worker pool.",
							Type:        []string{"object"},
							AdditionalProperties: &spec.SchemaOrBool{
								Allows: true,
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Type:   []string{"string"},
										Format: "",
									},
								},
							},
						},
					},
					"labels": {
						SchemaProps: spec.SchemaProps{
							Description: "Labels is a map of key/value pairs for labels for all the `Node` objects in this worker pool.",
							Type:        []string{"object"},
							AdditionalProperties: &spec.SchemaOrBool{
								Allows: true,
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Type:   []string{"string"},
										Format: "",
									},
								},
							},
						},
					},
					"taints": {
						SchemaProps: spec.SchemaProps{
							Description: "Taints is a list of taints for all the `Node` objects in this worker pool.",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Ref: ref("k8s.io/api/core/v1.Taint"),
									},
								},
							},
						},
					},
					"kubelet": {
						SchemaProps: spec.SchemaProps{
							Description: "Kubelet contains configuration settings for the kubelet.",
							Ref:         ref("github.com/gardener/gardener/pkg/apis/garden/v1beta1.KubeletConfig"),
						},
					},
					"caBundle": {
						SchemaProps: spec.SchemaProps{
							Description: "CABundle is a certificate bundle which will be installed onto every machine of this worker pool.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"volumeType": {
						SchemaProps: spec.SchemaProps{
							Description: "VolumeType is the type of the root volumes.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"volumeSize": {
						SchemaProps: spec.SchemaProps{
							Description: "VolumeSize is the size of the root volume.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
				},
				Required: []string{"name", "machineType", "autoScalerMin", "autoScalerMax", "volumeType", "volumeSize"},
			},
		},
		Dependencies: []string{
			"github.com/gardener/gardener/pkg/apis/garden/v1beta1.KubeletConfig", "github.com/gardener/gardener/pkg/apis/garden/v1beta1.ShootMachineImage", "k8s.io/api/core/v1.Taint", "k8s.io/apimachinery/pkg/util/intstr.IntOrString"},
	}
}

func schema_pkg_apis_garden_v1beta1_BackupProfile(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "BackupProfile contains the object store configuration for backups for shoot(currently only etcd).",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"provider": {
						SchemaProps: spec.SchemaProps{
							Description: "Provider is a provider name.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"region": {
						SchemaProps: spec.SchemaProps{
							Description: "Region is a region name.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"secretRef": {
						SchemaProps: spec.SchemaProps{
							Description: "SecretRef is a reference to a Secret object containing the cloud provider credentials for the object store where backups should be stored. It should have enough privileges to manipulate the objects as well as buckets.",
							Ref:         ref("k8s.io/api/core/v1.SecretReference"),
						},
					},
				},
				Required: []string{"provider", "secretRef"},
			},
		},
		Dependencies: []string{
			"k8s.io/api/core/v1.SecretReference"},
	}
}

func schema_pkg_apis_garden_v1beta1_Cloud(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "Cloud contains information about the cloud environment and their specific settings. It must contain exactly one key of the below cloud providers.",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"profile": {
						SchemaProps: spec.SchemaProps{
							Description: "Profile is a name of a CloudProfile object.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"region": {
						SchemaProps: spec.SchemaProps{
							Description: "Region is a name of a cloud provider region.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"secretBindingRef": {
						SchemaProps: spec.SchemaProps{
							Description: "SecretBindingRef is a reference to a SecretBinding object.",
							Ref:         ref("k8s.io/api/core/v1.LocalObjectReference"),
						},
					},
					"seed": {
						SchemaProps: spec.SchemaProps{
							Description: "Seed is the name of a Seed object.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"aws": {
						SchemaProps: spec.SchemaProps{
							Description: "AWS contains the Shoot specification for the Amazon Web Services cloud.",
							Ref:         ref("github.com/gardener/gardener/pkg/apis/garden/v1beta1.AWSCloud"),
						},
					},
					"azure": {
						SchemaProps: spec.SchemaProps{
							Description: "Azure contains the Shoot specification for the Microsoft Azure cloud.",
							Ref:         ref("github.com/gardener/gardener/pkg/apis/garden/v1beta1.AzureCloud"),
						},
					},
					"gcp": {
						SchemaProps: spec.SchemaProps{
							Description: "GCP contains the Shoot specification for the Google Cloud Platform cloud.",
							Ref:         ref("github.com/gardener/gardener/pkg/apis/garden/v1beta1.GCPCloud"),
						},
					},
					"openstack": {
						SchemaProps: spec.SchemaProps{
							Description: "OpenStack contains the Shoot specification for the OpenStack cloud.",
							Ref:         ref("github.com/gardener/gardener/pkg/apis/garden/v1beta1.OpenStackCloud"),
						},
					},
					"alicloud": {
						SchemaProps: spec.SchemaProps{
							Description: "Alicloud contains the Shoot specification for the Alibaba cloud.",
							Ref:         ref("github.com/gardener/gardener/pkg/apis/garden/v1beta1.Alicloud"),
						},
					},
					"packet": {
						SchemaProps: spec.SchemaProps{
							Description: "Packet contains the Shoot specification for the Packet cloud.",
							Ref:         ref("github.com/gardener/gardener/pkg/apis/garden/v1beta1.PacketCloud"),
						},
					},
				},
				Required: []string{"profile", "region", "secretBindingRef"},
			},
		},
		Dependencies: []string{
			"github.com/gardener/gardener/pkg/apis/garden/v1beta1.AWSCloud", "github.com/gardener/gardener/pkg/apis/garden/v1beta1.Alicloud", "github.com/gardener/gardener/pkg/apis/garden/v1beta1.AzureCloud", "github.com/gardener/gardener/pkg/apis/garden/v1beta1.GCPCloud", "github.com/gardener/gardener/pkg/apis/garden/v1beta1.OpenStackCloud", "github.com/gardener/gardener/pkg/apis/garden/v1beta1.PacketCloud", "k8s.io/api/core/v1.LocalObjectReference"},
	}
}

func schema_pkg_apis_garden_v1beta1_CloudControllerManagerConfig(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "CloudControllerManagerConfig contains configuration settings for the cloud-controller-manager.",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"featureGates": {
						SchemaProps: spec.SchemaProps{
							Description: "FeatureGates contains information about enabled feature gates.",
							Type:        []string{"object"},
							AdditionalProperties: &spec.SchemaOrBool{
								Allows: true,
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Type:   []string{"boolean"},
										Format: "",
									},
								},
							},
						},
					},
				},
			},
		},
	}
}

func schema_pkg_apis_garden_v1beta1_CloudProfile(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "CloudProfile represents certain properties about a cloud environment.",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"kind": {
						SchemaProps: spec.SchemaProps{
							Description: "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"apiVersion": {
						SchemaProps: spec.SchemaProps{
							Description: "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"metadata": {
						SchemaProps: spec.SchemaProps{
							Description: "Standard object metadata.",
							Ref:         ref("k8s.io/apimachinery/pkg/apis/meta/v1.ObjectMeta"),
						},
					},
					"spec": {
						SchemaProps: spec.SchemaProps{
							Description: "Spec defines the cloud environment properties.",
							Ref:         ref("github.com/gardener/gardener/pkg/apis/garden/v1beta1.CloudProfileSpec"),
						},
					},
				},
			},
		},
		Dependencies: []string{
			"github.com/gardener/gardener/pkg/apis/garden/v1beta1.CloudProfileSpec", "k8s.io/apimachinery/pkg/apis/meta/v1.ObjectMeta"},
	}
}

func schema_pkg_apis_garden_v1beta1_CloudProfileList(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "CloudProfileList is a collection of CloudProfiles.",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"kind": {
						SchemaProps: spec.SchemaProps{
							Description: "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"apiVersion": {
						SchemaProps: spec.SchemaProps{
							Description: "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"metadata": {
						SchemaProps: spec.SchemaProps{
							Description: "Standard list object metadata.",
							Ref:         ref("k8s.io/apimachinery/pkg/apis/meta/v1.ListMeta"),
						},
					},
					"items": {
						SchemaProps: spec.SchemaProps{
							Description: "Items is the list of CloudProfiles.",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Ref: ref("github.com/gardener/gardener/pkg/apis/garden/v1beta1.CloudProfile"),
									},
								},
							},
						},
					},
				},
				Required: []string{"items"},
			},
		},
		Dependencies: []string{
			"github.com/gardener/gardener/pkg/apis/garden/v1beta1.CloudProfile", "k8s.io/apimachinery/pkg/apis/meta/v1.ListMeta"},
	}
}

func schema_pkg_apis_garden_v1beta1_CloudProfileSpec(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "CloudProfileSpec is the specification of a CloudProfile. It must contain exactly one of its defined keys.",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"aws": {
						SchemaProps: spec.SchemaProps{
							Description: "AWS is the profile specification for the Amazon Web Services cloud.",
							Ref:         ref("github.com/gardener/gardener/pkg/apis/garden/v1beta1.AWSProfile"),
						},
					},
					"azure": {
						SchemaProps: spec.SchemaProps{
							Description: "Azure is the profile specification for the Microsoft Azure cloud.",
							Ref:         ref("github.com/gardener/gardener/pkg/apis/garden/v1beta1.AzureProfile"),
						},
					},
					"gcp": {
						SchemaProps: spec.SchemaProps{
							Description: "GCP is the profile specification for the Google Cloud Platform cloud.",
							Ref:         ref("github.com/gardener/gardener/pkg/apis/garden/v1beta1.GCPProfile"),
						},
					},
					"openstack": {
						SchemaProps: spec.SchemaProps{
							Description: "OpenStack is the profile specification for the OpenStack cloud.",
							Ref:         ref("github.com/gardener/gardener/pkg/apis/garden/v1beta1.OpenStackProfile"),
						},
					},
					"alicloud": {
						SchemaProps: spec.SchemaProps{
							Description: "Alicloud is the profile specification for the Alibaba cloud.",
							Ref:         ref("github.com/gardener/gardener/pkg/apis/garden/v1beta1.AlicloudProfile"),
						},
					},
					"packet": {
						SchemaProps: spec.SchemaProps{
							Description: "Packet is the profile specification for the Packet cloud.",
							Ref:         ref("github.com/gardener/gardener/pkg/apis/garden/v1beta1.PacketProfile"),
						},
					},
					"caBundle": {
						SchemaProps: spec.SchemaProps{
							Description: "CABundle is a certificate bundle which will be installed onto every host machine of the Shoot cluster.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
				},
			},
		},
		Dependencies: []string{
			"github.com/gardener/gardener/pkg/apis/garden/v1beta1.AWSProfile", "github.com/gardener/gardener/pkg/apis/garden/v1beta1.AlicloudProfile", "github.com/gardener/gardener/pkg/apis/garden/v1beta1.AzureProfile", "github.com/gardener/gardener/pkg/apis/garden/v1beta1.GCPProfile", "github.com/gardener/gardener/pkg/apis/garden/v1beta1.OpenStackProfile", "github.com/gardener/gardener/pkg/apis/garden/v1beta1.PacketProfile"},
	}
}

func schema_pkg_apis_garden_v1beta1_ClusterAutoscaler(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "ClusterAutoscaler contains the configration flags for the Kubernetes cluster autoscaler.",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"scaleDownUtilizationThreshold": {
						SchemaProps: spec.SchemaProps{
							Description: "ScaleDownUtilizationThreshold defines the threshold in % under which a node is being removed",
							Type:        []string{"number"},
							Format:      "double",
						},
					},
					"scaleDownUnneededTime": {
						SchemaProps: spec.SchemaProps{
							Description: "ScaleDownUnneededTime defines how long a node should be unneeded before it is eligible for scale down (default: 10 mins).",
							Ref:         ref("k8s.io/apimachinery/pkg/apis/meta/v1.Duration"),
						},
					},
					"scaleDownDelayAfterAdd": {
						SchemaProps: spec.SchemaProps{
							Description: "ScaleDownDelayAfterAdd defines how long after scale up that scale down evaluation resumes (default: 10 mins).",
							Ref:         ref("k8s.io/apimachinery/pkg/apis/meta/v1.Duration"),
						},
					},
					"scaleDownDelayAfterFailure": {
						SchemaProps: spec.SchemaProps{
							Description: "ScaleDownDelayAfterFailure how long after scale down failure that scale down evaluation resumes (default: 3 mins).",
							Ref:         ref("k8s.io/apimachinery/pkg/apis/meta/v1.Duration"),
						},
					},
					"scaleDownDelayAfterDelete": {
						SchemaProps: spec.SchemaProps{
							Description: "ScaleDownDelayAfterDelete how long after node deletion that scale down evaluation resumes, defaults to scanInterval (defaults to ScanInterval).",
							Ref:         ref("k8s.io/apimachinery/pkg/apis/meta/v1.Duration"),
						},
					},
					"scanInterval": {
						SchemaProps: spec.SchemaProps{
							Description: "ScanInterval how often cluster is reevaluated for scale up or down (default: 10 secs).",
							Ref:         ref("k8s.io/apimachinery/pkg/apis/meta/v1.Duration"),
						},
					},
				},
			},
		},
		Dependencies: []string{
			"k8s.io/apimachinery/pkg/apis/meta/v1.Duration"},
	}
}

func schema_pkg_apis_garden_v1beta1_DNS(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "DNS holds information about the provider, the hosted zone id and the domain.",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"domain": {
						SchemaProps: spec.SchemaProps{
							Description: "Domain is the external available domain of the Shoot cluster.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"secretName": {
						SchemaProps: spec.SchemaProps{
							Description: "SecretName is a name of a secret containing credentials for the stated domain and the provider. When not specified, the Gardener will use the cloud provider credentials referenced by the Shoot and try to find respective credentials there. Specifying this field may override this behavior, i.e. forcing the Gardener to only look into the given secret.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"provider": {
						SchemaProps: spec.SchemaProps{
							Description: "Provider is the DNS provider type for the Shoot.  Only relevant if not the default domain is used for this shoot.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"includeDomains": {
						SchemaProps: spec.SchemaProps{
							Description: "IncludeDomains is a list of domains that shall be included. Only relevant if not the default domain is used for this shoot.",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Type:   []string{"string"},
										Format: "",
									},
								},
							},
						},
					},
					"excludeDomains": {
						SchemaProps: spec.SchemaProps{
							Description: "ExcludeDomains is a list of domains that shall be excluded. Only relevant if not the default domain is used for this shoot.",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Type:   []string{"string"},
										Format: "",
									},
								},
							},
						},
					},
					"includeZones": {
						SchemaProps: spec.SchemaProps{
							Description: "IncludeZones is a list of hosted zone IDs that shall be included. Only relevant if not the default domain is used for this shoot.",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Type:   []string{"string"},
										Format: "",
									},
								},
							},
						},
					},
					"excludeZones": {
						SchemaProps: spec.SchemaProps{
							Description: "ExcludeZones is a list of hosted zone IDs that shall be excluded. Only relevant if not the default domain is used for this shoot.",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Type:   []string{"string"},
										Format: "",
									},
								},
							},
						},
					},
				},
			},
		},
	}
}

func schema_pkg_apis_garden_v1beta1_DNSProviderConstraint(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "DNSProviderConstraint contains constraints regarding allowed values of the 'dns.provider' block in the Shoot specification.",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"name": {
						SchemaProps: spec.SchemaProps{
							Description: "Name is the name of the DNS provider.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
				},
				Required: []string{"name"},
			},
		},
	}
}

func schema_pkg_apis_garden_v1beta1_Extension(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "Extension contains type and provider information for Shoot extensions.",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"type": {
						SchemaProps: spec.SchemaProps{
							Description: "Type is the type of the extension resource.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"providerConfig": {
						SchemaProps: spec.SchemaProps{
							Description: "ProviderConfig is the configuration passed to extension resource.",
							Ref:         ref("github.com/gardener/gardener/pkg/apis/core/v1alpha1.ProviderConfig"),
						},
					},
				},
				Required: []string{"type"},
			},
		},
		Dependencies: []string{
			"github.com/gardener/gardener/pkg/apis/core/v1alpha1.ProviderConfig"},
	}
}

func schema_pkg_apis_garden_v1beta1_GCPCloud(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "GCPCloud contains the Shoot specification for GCP.",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"machineImage": {
						SchemaProps: spec.SchemaProps{
							Description: "ShootMachineImage holds information about the machine image to use for all workers. It will default to the latest version of the first image stated in the referenced CloudProfile if no value has been provided.",
							Ref:         ref("github.com/gardener/gardener/pkg/apis/garden/v1beta1.ShootMachineImage"),
						},
					},
					"networks": {
						SchemaProps: spec.SchemaProps{
							Description: "Networks holds information about the Kubernetes and infrastructure networks.",
							Ref:         ref("github.com/gardener/gardener/pkg/apis/garden/v1beta1.GCPNetworks"),
						},
					},
					"workers": {
						VendorExtensible: spec.VendorExtensible{
							Extensions: spec.Extensions{
								"x-kubernetes-patch-merge-key": "name",
								"x-kubernetes-patch-strategy":  "merge",
							},
						},
						SchemaProps: spec.SchemaProps{
							Description: "Workers is a list of worker groups.",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Ref: ref("github.com/gardener/gardener/pkg/apis/garden/v1beta1.GCPWorker"),
									},
								},
							},
						},
					},
					"zones": {
						SchemaProps: spec.SchemaProps{
							Description: "Zones is a list of availability zones to deploy the Shoot cluster to.",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Type:   []string{"string"},
										Format: "",
									},
								},
							},
						},
					},
				},
				Required: []string{"networks", "workers", "zones"},
			},
		},
		Dependencies: []string{
			"github.com/gardener/gardener/pkg/apis/garden/v1beta1.GCPNetworks", "github.com/gardener/gardener/pkg/apis/garden/v1beta1.GCPWorker", "github.com/gardener/gardener/pkg/apis/garden/v1beta1.ShootMachineImage"},
	}
}

func schema_pkg_apis_garden_v1beta1_GCPConstraints(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "GCPConstraints is an object containing constraints for certain values in the Shoot specification.",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"dnsProviders": {
						VendorExtensible: spec.VendorExtensible{
							Extensions: spec.Extensions{
								"x-kubernetes-patch-merge-key": "name",
								"x-kubernetes-patch-strategy":  "merge",
							},
						},
						SchemaProps: spec.SchemaProps{
							Description: "DNSProviders contains constraints regarding allowed values of the 'dns.provider' block in the Shoot specification.",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Ref: ref("github.com/gardener/gardener/pkg/apis/garden/v1beta1.DNSProviderConstraint"),
									},
								},
							},
						},
					},
					"kubernetes": {
						SchemaProps: spec.SchemaProps{
							Description: "Kubernetes contains constraints regarding allowed values of the 'kubernetes' block in the Shoot specification.",
							Ref:         ref("github.com/gardener/gardener/pkg/apis/garden/v1beta1.KubernetesConstraints"),
						},
					},
					"machineImages": {
						VendorExtensible: spec.VendorExtensible{
							Extensions: spec.Extensions{
								"x-kubernetes-patch-merge-key": "name",
								"x-kubernetes-patch-strategy":  "merge",
							},
						},
						SchemaProps: spec.SchemaProps{
							Description: "MachineImages contains constraints regarding allowed values for machine images in the Shoot specification.",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Ref: ref("github.com/gardener/gardener/pkg/apis/garden/v1beta1.MachineImage"),
									},
								},
							},
						},
					},
					"machineTypes": {
						VendorExtensible: spec.VendorExtensible{
							Extensions: spec.Extensions{
								"x-kubernetes-patch-merge-key": "name",
								"x-kubernetes-patch-strategy":  "merge",
							},
						},
						SchemaProps: spec.SchemaProps{
							Description: "MachineTypes contains constraints regarding allowed values for machine types in the 'workers' block in the Shoot specification.",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Ref: ref("github.com/gardener/gardener/pkg/apis/garden/v1beta1.MachineType"),
									},
								},
							},
						},
					},
					"volumeTypes": {
						VendorExtensible: spec.VendorExtensible{
							Extensions: spec.Extensions{
								"x-kubernetes-patch-merge-key": "name",
								"x-kubernetes-patch-strategy":  "merge",
							},
						},
						SchemaProps: spec.SchemaProps{
							Description: "VolumeTypes contains constraints regarding allowed values for volume types in the 'workers' block in the Shoot specification.",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Ref: ref("github.com/gardener/gardener/pkg/apis/garden/v1beta1.VolumeType"),
									},
								},
							},
						},
					},
					"zones": {
						VendorExtensible: spec.VendorExtensible{
							Extensions: spec.Extensions{
								"x-kubernetes-patch-merge-key": "region",
								"x-kubernetes-patch-strategy":  "merge",
							},
						},
						SchemaProps: spec.SchemaProps{
							Description: "Zones contains constraints regarding allowed values for 'zones' block in the Shoot specification.",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Ref: ref("github.com/gardener/gardener/pkg/apis/garden/v1beta1.Zone"),
									},
								},
							},
						},
					},
				},
				Required: []string{"kubernetes", "machineImages", "machineTypes", "volumeTypes", "zones"},
			},
		},
		Dependencies: []string{
			"github.com/gardener/gardener/pkg/apis/garden/v1beta1.DNSProviderConstraint", "github.com/gardener/gardener/pkg/apis/garden/v1beta1.KubernetesConstraints", "github.com/gardener/gardener/pkg/apis/garden/v1beta1.MachineImage", "github.com/gardener/gardener/pkg/apis/garden/v1beta1.MachineType", "github.com/gardener/gardener/pkg/apis/garden/v1beta1.VolumeType", "github.com/gardener/gardener/pkg/apis/garden/v1beta1.Zone"},
	}
}

func schema_pkg_apis_garden_v1beta1_GCPNetworks(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "GCPNetworks holds information about the Kubernetes and infrastructure networks.",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"nodes": {
						SchemaProps: spec.SchemaProps{
							Description: "Nodes is the CIDR of the node network.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"pods": {
						SchemaProps: spec.SchemaProps{
							Description: "Pods is the CIDR of the pod network.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"services": {
						SchemaProps: spec.SchemaProps{
							Description: "Services is the CIDR of the service network.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"vpc": {
						SchemaProps: spec.SchemaProps{
							Description: "VPC indicates whether to use an existing VPC or create a new one.",
							Ref:         ref("github.com/gardener/gardener/pkg/apis/garden/v1beta1.GCPVPC"),
						},
					},
					"workers": {
						SchemaProps: spec.SchemaProps{
							Description: "Workers is a list of CIDRs of worker subnets (private) to create (used for the VMs).",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Type:   []string{"string"},
										Format: "",
									},
								},
							},
						},
					},
					"internal": {
						SchemaProps: spec.SchemaProps{
							Description: "Internal is a private subnet (used for internal load balancers).",
							Type:        []string{"string"},
							Format:      "",
						},
					},
				},
				Required: []string{"workers"},
			},
		},
		Dependencies: []string{
			"github.com/gardener/gardener/pkg/apis/garden/v1beta1.GCPVPC"},
	}
}

func schema_pkg_apis_garden_v1beta1_GCPProfile(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "GCPProfile defines certain constraints and definitions for the GCP cloud.",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"constraints": {
						SchemaProps: spec.SchemaProps{
							Description: "Constraints is an object containing constraints for certain values in the Shoot specification.",
							Ref:         ref("github.com/gardener/gardener/pkg/apis/garden/v1beta1.GCPConstraints"),
						},
					},
				},
				Required: []string{"constraints"},
			},
		},
		Dependencies: []string{
			"github.com/gardener/gardener/pkg/apis/garden/v1beta1.GCPConstraints"},
	}
}

func schema_pkg_apis_garden_v1beta1_GCPVPC(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "GCPVPC indicates whether to use an existing VPC or create a new one.",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"name": {
						SchemaProps: spec.SchemaProps{
							Description: "Name is the name of an existing GCP VPC.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
				},
				Required: []string{"name"},
			},
		},
	}
}

func schema_pkg_apis_garden_v1beta1_GCPWorker(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "GCPWorker is the definition of a worker group.",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"name": {
						SchemaProps: spec.SchemaProps{
							Description: "Name is the name of the worker group.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"machineType": {
						SchemaProps: spec.SchemaProps{
							Description: "MachineType is the machine type of the worker group.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"machineImage": {
						SchemaProps: spec.SchemaProps{
							Description: "ShootMachineImage holds information about the machine image to use for all workers. It will default to the latest version of the first image stated in the referenced CloudProfile if no value has been provided.",
							Ref:         ref("github.com/gardener/gardener/pkg/apis/garden/v1beta1.ShootMachineImage"),
						},
					},
					"autoScalerMin": {
						SchemaProps: spec.SchemaProps{
							Description: "AutoScalerMin is the minimum number of VMs to create.",
							Type:        []string{"integer"},
							Format:      "int32",
						},
					},
					"autoScalerMax": {
						SchemaProps: spec.SchemaProps{
							Description: "AutoScalerMin is the maximum number of VMs to create.",
							Type:        []string{"integer"},
							Format:      "int32",
						},
					},
					"maxSurge": {
						SchemaProps: spec.SchemaProps{
							Description: "MaxSurge is maximum number of VMs that are created during an update.",
							Ref:         ref("k8s.io/apimachinery/pkg/util/intstr.IntOrString"),
						},
					},
					"maxUnavailable": {
						SchemaProps: spec.SchemaProps{
							Description: "MaxUnavailable is the maximum number of VMs that can be unavailable during an update.",
							Ref:         ref("k8s.io/apimachinery/pkg/util/intstr.IntOrString"),
						},
					},
					"annotations": {
						SchemaProps: spec.SchemaProps{
							Description: "Annotations is a map of key/value pairs for annotations for all the `Node` objects in this worker pool.",
							Type:        []string{"object"},
							AdditionalProperties: &spec.SchemaOrBool{
								Allows: true,
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Type:   []string{"string"},
										Format: "",
									},
								},
							},
						},
					},
					"labels": {
						SchemaProps: spec.SchemaProps{
							Description: "Labels is a map of key/value pairs for labels for all the `Node` objects in this worker pool.",
							Type:        []string{"object"},
							AdditionalProperties: &spec.SchemaOrBool{
								Allows: true,
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Type:   []string{"string"},
										Format: "",
									},
								},
							},
						},
					},
					"taints": {
						SchemaProps: spec.SchemaProps{
							Description: "Taints is a list of taints for all the `Node` objects in this worker pool.",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Ref: ref("k8s.io/api/core/v1.Taint"),
									},
								},
							},
						},
					},
					"kubelet": {
						SchemaProps: spec.SchemaProps{
							Description: "Kubelet contains configuration settings for the kubelet.",
							Ref:         ref("github.com/gardener/gardener/pkg/apis/garden/v1beta1.KubeletConfig"),
						},
					},
					"caBundle": {
						SchemaProps: spec.SchemaProps{
							Description: "CABundle is a certificate bundle which will be installed onto every machine of this worker pool.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"volumeType": {
						SchemaProps: spec.SchemaProps{
							Description: "VolumeType is the type of the root volumes.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"volumeSize": {
						SchemaProps: spec.SchemaProps{
							Description: "VolumeSize is the size of the root volume.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
				},
				Required: []string{"name", "machineType", "autoScalerMin", "autoScalerMax", "volumeType", "volumeSize"},
			},
		},
		Dependencies: []string{
			"github.com/gardener/gardener/pkg/apis/garden/v1beta1.KubeletConfig", "github.com/gardener/gardener/pkg/apis/garden/v1beta1.ShootMachineImage", "k8s.io/api/core/v1.Taint", "k8s.io/apimachinery/pkg/util/intstr.IntOrString"},
	}
}

func schema_pkg_apis_garden_v1beta1_Gardener(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "Gardener holds the information about the Gardener",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"id": {
						SchemaProps: spec.SchemaProps{
							Description: "ID is the Docker container id of the Gardener which last acted on a Shoot cluster.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"name": {
						SchemaProps: spec.SchemaProps{
							Description: "Name is the hostname (pod name) of the Gardener which last acted on a Shoot cluster.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"version": {
						SchemaProps: spec.SchemaProps{
							Description: "Version is the version of the Gardener which last acted on a Shoot cluster.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
				},
				Required: []string{"id", "name", "version"},
			},
		},
	}
}

func schema_pkg_apis_garden_v1beta1_GardenerDuration(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "GardenerDuration is a workaround for missing OpenAPI functions on metav1.Duration struct.",
				Type:        v1beta1.GardenerDuration{}.OpenAPISchemaType(),
				Format:      v1beta1.GardenerDuration{}.OpenAPISchemaFormat(),
			},
		},
	}
}

func schema_pkg_apis_garden_v1beta1_Heapster(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "Heapster describes configuration values for the heapster addon.",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"enabled": {
						SchemaProps: spec.SchemaProps{
							Description: "Enabled indicates whether the addon is enabled or not.",
							Type:        []string{"boolean"},
							Format:      "",
						},
					},
				},
				Required: []string{"enabled"},
			},
		},
	}
}

func schema_pkg_apis_garden_v1beta1_HelmTiller(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "HelmTiller describes configuration values for the helm-tiller addon.",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"enabled": {
						SchemaProps: spec.SchemaProps{
							Description: "Enabled indicates whether the addon is enabled or not.",
							Type:        []string{"boolean"},
							Format:      "",
						},
					},
				},
				Required: []string{"enabled"},
			},
		},
	}
}

func schema_pkg_apis_garden_v1beta1_Hibernation(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "Hibernation contains information whether the Shoot is suspended or not.",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"enabled": {
						SchemaProps: spec.SchemaProps{
							Description: "Enabled specifies whether the Shoot needs to be hibernated or not. If it is true, the Shoot's desired state is to be hibernated. If it is false or nil, the Shoot's desired state is to be awaken.",
							Type:        []string{"boolean"},
							Format:      "",
						},
					},
					"schedules": {
						SchemaProps: spec.SchemaProps{
							Description: "Schedules determine the hibernation schedules.",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Ref: ref("github.com/gardener/gardener/pkg/apis/garden/v1beta1.HibernationSchedule"),
									},
								},
							},
						},
					},
				},
			},
		},
		Dependencies: []string{
			"github.com/gardener/gardener/pkg/apis/garden/v1beta1.HibernationSchedule"},
	}
}

func schema_pkg_apis_garden_v1beta1_HibernationSchedule(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "HibernationSchedule determines the hibernation schedule of a Shoot. A Shoot will be regularly hibernated at each start time and will be woken up at each end time. Start or End can be omitted, though at least one of each has to be specified.",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"start": {
						SchemaProps: spec.SchemaProps{
							Description: "Start is a Cron spec at which time a Shoot will be hibernated.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"end": {
						SchemaProps: spec.SchemaProps{
							Description: "End is a Cron spec at which time a Shoot will be woken up.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"location": {
						SchemaProps: spec.SchemaProps{
							Description: "Location is the time location in which both start and and shall be evaluated.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
				},
			},
		},
	}
}

func schema_pkg_apis_garden_v1beta1_HorizontalPodAutoscalerConfig(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "HorizontalPodAutoscalerConfig contains horizontal pod autoscaler configuration settings for the kube-controller-manager. Note: Descriptions were taken from the Kubernetes documentation.",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"downscaleDelay": {
						SchemaProps: spec.SchemaProps{
							Description: "The period since last downscale, before another downscale can be performed in horizontal pod autoscaler.",
							Ref:         ref("github.com/gardener/gardener/pkg/apis/garden/v1beta1.GardenerDuration"),
						},
					},
					"syncPeriod": {
						SchemaProps: spec.SchemaProps{
							Description: "The period for syncing the number of pods in horizontal pod autoscaler.",
							Ref:         ref("github.com/gardener/gardener/pkg/apis/garden/v1beta1.GardenerDuration"),
						},
					},
					"tolerance": {
						SchemaProps: spec.SchemaProps{
							Description: "The minimum change (from 1.0) in the desired-to-actual metrics ratio for the horizontal pod autoscaler to consider scaling.",
							Type:        []string{"number"},
							Format:      "double",
						},
					},
					"upscaleDelay": {
						SchemaProps: spec.SchemaProps{
							Description: "The period since last upscale, before another upscale can be performed in horizontal pod autoscaler.",
							Ref:         ref("github.com/gardener/gardener/pkg/apis/garden/v1beta1.GardenerDuration"),
						},
					},
					"downscaleStabilization": {
						SchemaProps: spec.SchemaProps{
							Description: "The configurable window at which the controller will choose the highest recommendation for autoscaling.",
							Ref:         ref("github.com/gardener/gardener/pkg/apis/garden/v1beta1.GardenerDuration"),
						},
					},
					"initialReadinessDelay": {
						SchemaProps: spec.SchemaProps{
							Description: "The configurable period at which the horizontal pod autoscaler considers a Pod “not yet ready” given that it’s unready and it has  transitioned to unready during that time.",
							Ref:         ref("github.com/gardener/gardener/pkg/apis/garden/v1beta1.GardenerDuration"),
						},
					},
					"cpuInitializationPeriod": {
						SchemaProps: spec.SchemaProps{
							Description: "The period after which a ready pod transition is considered to be the first.",
							Ref:         ref("github.com/gardener/gardener/pkg/apis/garden/v1beta1.GardenerDuration"),
						},
					},
				},
			},
		},
		Dependencies: []string{
			"github.com/gardener/gardener/pkg/apis/garden/v1beta1.GardenerDuration"},
	}
}

func schema_pkg_apis_garden_v1beta1_K8SNetworks(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "K8SNetworks contains CIDRs for the pod, service and node networks of a Kubernetes cluster.",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"nodes": {
						SchemaProps: spec.SchemaProps{
							Description: "Nodes is the CIDR of the node network.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"pods": {
						SchemaProps: spec.SchemaProps{
							Description: "Pods is the CIDR of the pod network.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"services": {
						SchemaProps: spec.SchemaProps{
							Description: "Services is the CIDR of the service network.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
				},
			},
		},
	}
}

func schema_pkg_apis_garden_v1beta1_Kube2IAM(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "Kube2IAM describes configuration values for the kube2iam addon.",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"enabled": {
						SchemaProps: spec.SchemaProps{
							Description: "Enabled indicates whether the addon is enabled or not.",
							Type:        []string{"boolean"},
							Format:      "",
						},
					},
					"roles": {
						VendorExtensible: spec.VendorExtensible{
							Extensions: spec.Extensions{
								"x-kubernetes-patch-merge-key": "name",
								"x-kubernetes-patch-strategy":  "merge",
							},
						},
						SchemaProps: spec.SchemaProps{
							Description: "Roles is list of AWS IAM roles which should be created by the Gardener.",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Ref: ref("github.com/gardener/gardener/pkg/apis/garden/v1beta1.Kube2IAMRole"),
									},
								},
							},
						},
					},
				},
				Required: []string{"enabled"},
			},
		},
		Dependencies: []string{
			"github.com/gardener/gardener/pkg/apis/garden/v1beta1.Kube2IAMRole"},
	}
}

func schema_pkg_apis_garden_v1beta1_Kube2IAMRole(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "Kube2IAMRole allows passing AWS IAM policies which will result in IAM roles.",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"name": {
						SchemaProps: spec.SchemaProps{
							Description: "Name is the name of the IAM role. Will be extended by the Shoot name.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"description": {
						SchemaProps: spec.SchemaProps{
							Description: "Description is a human readable message indiciating what this IAM role can be used for.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"policy": {
						SchemaProps: spec.SchemaProps{
							Description: "Policy is an AWS IAM policy document.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
				},
				Required: []string{"name", "description", "policy"},
			},
		},
	}
}

func schema_pkg_apis_garden_v1beta1_KubeAPIServerConfig(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "KubeAPIServerConfig contains configuration settings for the kube-apiserver.",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"featureGates": {
						SchemaProps: spec.SchemaProps{
							Description: "FeatureGates contains information about enabled feature gates.",
							Type:        []string{"object"},
							AdditionalProperties: &spec.SchemaOrBool{
								Allows: true,
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Type:   []string{"boolean"},
										Format: "",
									},
								},
							},
						},
					},
					"admissionPlugins": {
						VendorExtensible: spec.VendorExtensible{
							Extensions: spec.Extensions{
								"x-kubernetes-patch-merge-key": "name",
								"x-kubernetes-patch-strategy":  "merge",
							},
						},
						SchemaProps: spec.SchemaProps{
							Description: "AdmissionPlugins contains the list of user-defined admission plugins (additional to those managed by Gardener), and, if desired, the corresponding configuration.",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Ref: ref("github.com/gardener/gardener/pkg/apis/garden/v1beta1.AdmissionPlugin"),
									},
								},
							},
						},
					},
					"apiAudiences": {
						SchemaProps: spec.SchemaProps{
							Description: "APIAudiences are the identifiers of the API. The service account token authenticator will validate that tokens used against the API are bound to at least one of these audiences. If `serviceAccountConfig.issuer` is configured and this is not, this defaults to a single element list containing the issuer URL.",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Type:   []string{"string"},
										Format: "",
									},
								},
							},
						},
					},
					"auditConfig": {
						SchemaProps: spec.SchemaProps{
							Description: "AuditConfig contains configuration settings for the audit of the kube-apiserver.",
							Ref:         ref("github.com/gardener/gardener/pkg/apis/garden/v1beta1.AuditConfig"),
						},
					},
					"enableBasicAuthentication": {
						SchemaProps: spec.SchemaProps{
							Description: "EnableBasicAuthentication defines whether basic authentication should be enabled for this cluster or not.",
							Type:        []string{"boolean"},
							Format:      "",
						},
					},
					"oidcConfig": {
						SchemaProps: spec.SchemaProps{
							Description: "OIDCConfig contains configuration settings for the OIDC provider.",
							Ref:         ref("github.com/gardener/gardener/pkg/apis/garden/v1beta1.OIDCConfig"),
						},
					},
					"runtimeConfig": {
						SchemaProps: spec.SchemaProps{
							Description: "RuntimeConfig contains information about enabled or disabled APIs.",
							Type:        []string{"object"},
							AdditionalProperties: &spec.SchemaOrBool{
								Allows: true,
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Type:   []string{"boolean"},
										Format: "",
									},
								},
							},
						},
					},
					"serviceAccountConfig": {
						SchemaProps: spec.SchemaProps{
							Description: "ServiceAccountConfig contains configuration settings for the service account handling of the kube-apiserver.",
							Ref:         ref("github.com/gardener/gardener/pkg/apis/garden/v1beta1.ServiceAccountConfig"),
						},
					},
				},
			},
		},
		Dependencies: []string{
			"github.com/gardener/gardener/pkg/apis/garden/v1beta1.AdmissionPlugin", "github.com/gardener/gardener/pkg/apis/garden/v1beta1.AuditConfig", "github.com/gardener/gardener/pkg/apis/garden/v1beta1.OIDCConfig", "github.com/gardener/gardener/pkg/apis/garden/v1beta1.ServiceAccountConfig"},
	}
}

func schema_pkg_apis_garden_v1beta1_KubeControllerManagerConfig(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "KubeControllerManagerConfig contains configuration settings for the kube-controller-manager.",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"featureGates": {
						SchemaProps: spec.SchemaProps{
							Description: "FeatureGates contains information about enabled feature gates.",
							Type:        []string{"object"},
							AdditionalProperties: &spec.SchemaOrBool{
								Allows: true,
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Type:   []string{"boolean"},
										Format: "",
									},
								},
							},
						},
					},
					"horizontalPodAutoscaler": {
						SchemaProps: spec.SchemaProps{
							Description: "HorizontalPodAutoscalerConfig contains horizontal pod autoscaler configuration settings for the kube-controller-manager.",
							Ref:         ref("github.com/gardener/gardener/pkg/apis/garden/v1beta1.HorizontalPodAutoscalerConfig"),
						},
					},
					"nodeCIDRMaskSize": {
						SchemaProps: spec.SchemaProps{
							Description: "NodeCIDRMaskSize defines the mask size for node cidr in cluster (default is 24)",
							Type:        []string{"integer"},
							Format:      "int32",
						},
					},
				},
			},
		},
		Dependencies: []string{
			"github.com/gardener/gardener/pkg/apis/garden/v1beta1.HorizontalPodAutoscalerConfig"},
	}
}

func schema_pkg_apis_garden_v1beta1_KubeLego(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "KubeLego describes configuration values for the kube-lego addon.",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"enabled": {
						SchemaProps: spec.SchemaProps{
							Description: "Enabled indicates whether the addon is enabled or not.",
							Type:        []string{"boolean"},
							Format:      "",
						},
					},
					"email": {
						SchemaProps: spec.SchemaProps{
							Description: "Mail is the email address to register at Let's Encrypt.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
				},
				Required: []string{"enabled"},
			},
		},
	}
}

func schema_pkg_apis_garden_v1beta1_KubeProxyConfig(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "KubeProxyConfig contains configuration settings for the kube-proxy.",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"featureGates": {
						SchemaProps: spec.SchemaProps{
							Description: "FeatureGates contains information about enabled feature gates.",
							Type:        []string{"object"},
							AdditionalProperties: &spec.SchemaOrBool{
								Allows: true,
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Type:   []string{"boolean"},
										Format: "",
									},
								},
							},
						},
					},
					"mode": {
						SchemaProps: spec.SchemaProps{
							Description: "Mode specifies which proxy mode to use. defaults to IPTables.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
				},
			},
		},
	}
}

func schema_pkg_apis_garden_v1beta1_KubeSchedulerConfig(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "KubeSchedulerConfig contains configuration settings for the kube-scheduler.",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"featureGates": {
						SchemaProps: spec.SchemaProps{
							Description: "FeatureGates contains information about enabled feature gates.",
							Type:        []string{"object"},
							AdditionalProperties: &spec.SchemaOrBool{
								Allows: true,
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Type:   []string{"boolean"},
										Format: "",
									},
								},
							},
						},
					},
				},
			},
		},
	}
}

func schema_pkg_apis_garden_v1beta1_KubeletConfig(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "KubeletConfig contains configuration settings for the kubelet.",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"featureGates": {
						SchemaProps: spec.SchemaProps{
							Description: "FeatureGates contains information about enabled feature gates.",
							Type:        []string{"object"},
							AdditionalProperties: &spec.SchemaOrBool{
								Allows: true,
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Type:   []string{"boolean"},
										Format: "",
									},
								},
							},
						},
					},
					"podPidsLimit": {
						SchemaProps: spec.SchemaProps{
							Description: "PodPIDsLimit is the maximum number of process IDs per pod allowed by the kubelet.",
							Type:        []string{"integer"},
							Format:      "int64",
						},
					},
					"cpuCFSQuota": {
						SchemaProps: spec.SchemaProps{
							Description: "CPUCFSQuota allows you to disable/enable CPU throttling for Pods.",
							Type:        []string{"boolean"},
							Format:      "",
						},
					},
					"cpuManagerPolicy": {
						SchemaProps: spec.SchemaProps{
							Description: "CPUManagerPolicy allows to set alternative CPU management policies (default: none).",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"maxPods": {
						SchemaProps: spec.SchemaProps{
							Description: "MaxPods is the maximum number of Pods that are allowed by the Kubelet. Default: 110",
							Type:        []string{"integer"},
							Format:      "int32",
						},
					},
					"evictionHard": {
						SchemaProps: spec.SchemaProps{
							Description: "EvictionHard describes a set of eviction thresholds (e.g. memory.available<1Gi) that if met would trigger a Pod eviction. Default:\n  memory.available:   \"100Mi/1Gi/5%\"\n  nodefs.available:   \"5%\"\n  nodefs.inodesFree:  \"5%\"\n  imagefs.available:  \"5%\"\n  imagefs.inodesFree: \"5%\"",
							Ref:         ref("github.com/gardener/gardener/pkg/apis/garden/v1beta1.KubeletConfigEviction"),
						},
					},
					"evictionSoft": {
						SchemaProps: spec.SchemaProps{
							Description: "EvictionSoft describes a set of eviction thresholds (e.g. memory.available<1.5Gi) that if met over a corresponding grace period would trigger a Pod eviction. Default:\n  memory.available:   \"200Mi/1.5Gi/10%\"\n  nodefs.available:   \"10%\"\n  nodefs.inodesFree:  \"10%\"\n  imagefs.available:  \"10%\"\n  imagefs.inodesFree: \"10%\"",
							Ref:         ref("github.com/gardener/gardener/pkg/apis/garden/v1beta1.KubeletConfigEviction"),
						},
					},
					"evictionSoftGracePeriod": {
						SchemaProps: spec.SchemaProps{
							Description: "EvictionSoftGracePeriod describes a set of eviction grace periods (e.g. memory.available=1m30s) that correspond to how long a soft eviction threshold must hold before triggering a Pod eviction. Default:\n  memory.available:   1m30s\n  nodefs.available:   1m30s\n  nodefs.inodesFree:  1m30s\n  imagefs.available:  1m30s\n  imagefs.inodesFree: 1m30s",
							Ref:         ref("github.com/gardener/gardener/pkg/apis/garden/v1beta1.KubeletConfigEvictionSoftGracePeriod"),
						},
					},
					"evictionMinimumReclaim": {
						SchemaProps: spec.SchemaProps{
							Description: "EvictionMinimumReclaim configures the amount of resources below the configured eviction threshold that the kubelet attempts to reclaim whenever the kubelet observes resource pressure. Default: 0 for each resource",
							Ref:         ref("github.com/gardener/gardener/pkg/apis/garden/v1beta1.KubeletConfigEvictionMinimumReclaim"),
						},
					},
					"evictionPressureTransitionPeriod": {
						SchemaProps: spec.SchemaProps{
							Description: "EvictionPressureTransitionPeriod is the duration for which the kubelet has to wait before transitioning out of an eviction pressure condition. Default: 4m0s",
							Ref:         ref("k8s.io/apimachinery/pkg/apis/meta/v1.Duration"),
						},
					},
					"evictionMaxPodGracePeriod": {
						SchemaProps: spec.SchemaProps{
							Description: "EvictionMaxPodGracePeriod describes the maximum allowed grace period (in seconds) to use when terminating pods in response to a soft eviction threshold being met. Default: 90",
							Type:        []string{"integer"},
							Format:      "int32",
						},
					},
				},
			},
		},
		Dependencies: []string{
			"github.com/gardener/gardener/pkg/apis/garden/v1beta1.KubeletConfigEviction", "github.com/gardener/gardener/pkg/apis/garden/v1beta1.KubeletConfigEvictionMinimumReclaim", "github.com/gardener/gardener/pkg/apis/garden/v1beta1.KubeletConfigEvictionSoftGracePeriod", "k8s.io/apimachinery/pkg/apis/meta/v1.Duration"},
	}
}

func schema_pkg_apis_garden_v1beta1_KubeletConfigEviction(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "KubeletConfigEviction contains kubelet eviction thresholds supporting either a resource.Quantity or a percentage based value.",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"memoryAvailable": {
						SchemaProps: spec.SchemaProps{
							Description: "MemoryAvailable is the threshold for the free memory on the host server.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"imageFSAvailable": {
						SchemaProps: spec.SchemaProps{
							Description: "ImageFSAvailable is the threshold for the free disk space in the imagefs filesystem (docker images and container writable layers).",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"imageFSInodesFree": {
						SchemaProps: spec.SchemaProps{
							Description: "ImageFSInodesFree is the threshold for the available inodes in the imagefs filesystem.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"nodeFSAvailable": {
						SchemaProps: spec.SchemaProps{
							Description: "NodeFSAvailable is the threshold for the free disk space in the nodefs filesystem (docker volumes, logs, etc).",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"nodeFSInodesFree": {
						SchemaProps: spec.SchemaProps{
							Description: "NodeFSInodesFree is the threshold for the available inodes in the nodefs filesystem.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
				},
			},
		},
	}
}

func schema_pkg_apis_garden_v1beta1_KubeletConfigEvictionMinimumReclaim(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "KubeletConfigEviction contains configuration for the kubelet eviction minimum reclaim.",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"memoryAvailable": {
						SchemaProps: spec.SchemaProps{
							Description: "MemoryAvailable is the threshold for the memory reclaim on the host server.",
							Ref:         ref("k8s.io/apimachinery/pkg/api/resource.Quantity"),
						},
					},
					"imageFSAvailable": {
						SchemaProps: spec.SchemaProps{
							Description: "ImageFSAvailable is the threshold for the disk space reclaim in the imagefs filesystem (docker images and container writable layers).",
							Ref:         ref("k8s.io/apimachinery/pkg/api/resource.Quantity"),
						},
					},
					"imageFSInodesFree": {
						SchemaProps: spec.SchemaProps{
							Description: "ImageFSInodesFree is the threshold for the inodes reclaim in the imagefs filesystem.",
							Ref:         ref("k8s.io/apimachinery/pkg/api/resource.Quantity"),
						},
					},
					"nodeFSAvailable": {
						SchemaProps: spec.SchemaProps{
							Description: "NodeFSAvailable is the threshold for the disk space reclaim in the nodefs filesystem (docker volumes, logs, etc).",
							Ref:         ref("k8s.io/apimachinery/pkg/api/resource.Quantity"),
						},
					},
					"nodeFSInodesFree": {
						SchemaProps: spec.SchemaProps{
							Description: "NodeFSInodesFree is the threshold for the inodes reclaim in the nodefs filesystem.",
							Ref:         ref("k8s.io/apimachinery/pkg/api/resource.Quantity"),
						},
					},
				},
			},
		},
		Dependencies: []string{
			"k8s.io/apimachinery/pkg/api/resource.Quantity"},
	}
}

func schema_pkg_apis_garden_v1beta1_KubeletConfigEvictionSoftGracePeriod(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "KubeletConfigEvictionSoftGracePeriod contains grace periods for kubelet eviction thresholds.",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"memoryAvailable": {
						SchemaProps: spec.SchemaProps{
							Description: "MemoryAvailable is the grace period for the MemoryAvailable eviction threshold.",
							Ref:         ref("k8s.io/apimachinery/pkg/apis/meta/v1.Duration"),
						},
					},
					"imageFSAvailable": {
						SchemaProps: spec.SchemaProps{
							Description: "ImageFSAvailable is the grace period for the ImageFSAvailable eviction threshold.",
							Ref:         ref("k8s.io/apimachinery/pkg/apis/meta/v1.Duration"),
						},
					},
					"imageFSInodesFree": {
						SchemaProps: spec.SchemaProps{
							Description: "ImageFSInodesFree is the grace period for the ImageFSInodesFree eviction threshold.",
							Ref:         ref("k8s.io/apimachinery/pkg/apis/meta/v1.Duration"),
						},
					},
					"nodeFSAvailable": {
						SchemaProps: spec.SchemaProps{
							Description: "NodeFSAvailable is the grace period for the NodeFSAvailable eviction threshold.",
							Ref:         ref("k8s.io/apimachinery/pkg/apis/meta/v1.Duration"),
						},
					},
					"nodeFSInodesFree": {
						SchemaProps: spec.SchemaProps{
							Description: "NodeFSInodesFree is the grace period for the NodeFSInodesFree eviction threshold.",
							Ref:         ref("k8s.io/apimachinery/pkg/apis/meta/v1.Duration"),
						},
					},
				},
			},
		},
		Dependencies: []string{
			"k8s.io/apimachinery/pkg/apis/meta/v1.Duration"},
	}
}

func schema_pkg_apis_garden_v1beta1_Kubernetes(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "Kubernetes contains the version and configuration variables for the Shoot control plane.",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"allowPrivilegedContainers": {
						SchemaProps: spec.SchemaProps{
							Description: "AllowPrivilegedContainers indicates whether privileged containers are allowed in the Shoot (default: true).",
							Type:        []string{"boolean"},
							Format:      "",
						},
					},
					"kubeAPIServer": {
						SchemaProps: spec.SchemaProps{
							Description: "KubeAPIServer contains configuration settings for the kube-apiserver.",
							Ref:         ref("github.com/gardener/gardener/pkg/apis/garden/v1beta1.KubeAPIServerConfig"),
						},
					},
					"cloudControllerManager": {
						SchemaProps: spec.SchemaProps{
							Description: "CloudControllerManager contains configuration settings for the cloud-controller-manager.",
							Ref:         ref("github.com/gardener/gardener/pkg/apis/garden/v1beta1.CloudControllerManagerConfig"),
						},
					},
					"kubeControllerManager": {
						SchemaProps: spec.SchemaProps{
							Description: "KubeControllerManager contains configuration settings for the kube-controller-manager.",
							Ref:         ref("github.com/gardener/gardener/pkg/apis/garden/v1beta1.KubeControllerManagerConfig"),
						},
					},
					"kubeScheduler": {
						SchemaProps: spec.SchemaProps{
							Description: "KubeScheduler contains configuration settings for the kube-scheduler.",
							Ref:         ref("github.com/gardener/gardener/pkg/apis/garden/v1beta1.KubeSchedulerConfig"),
						},
					},
					"kubeProxy": {
						SchemaProps: spec.SchemaProps{
							Description: "KubeProxy contains configuration settings for the kube-proxy.",
							Ref:         ref("github.com/gardener/gardener/pkg/apis/garden/v1beta1.KubeProxyConfig"),
						},
					},
					"kubelet": {
						SchemaProps: spec.SchemaProps{
							Description: "Kubelet contains configuration settings for the kubelet.",
							Ref:         ref("github.com/gardener/gardener/pkg/apis/garden/v1beta1.KubeletConfig"),
						},
					},
					"version": {
						SchemaProps: spec.SchemaProps{
							Description: "Version is the semantic Kubernetes version to use for the Shoot cluster.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"clusterAutoscaler": {
						SchemaProps: spec.SchemaProps{
							Description: "ClusterAutoscaler contains the configration flags for the Kubernetes cluster autoscaler.",
							Ref:         ref("github.com/gardener/gardener/pkg/apis/garden/v1beta1.ClusterAutoscaler"),
						},
					},
				},
				Required: []string{"version"},
			},
		},
		Dependencies: []string{
			"github.com/gardener/gardener/pkg/apis/garden/v1beta1.CloudControllerManagerConfig", "github.com/gardener/gardener/pkg/apis/garden/v1beta1.ClusterAutoscaler", "github.com/gardener/gardener/pkg/apis/garden/v1beta1.KubeAPIServerConfig", "github.com/gardener/gardener/pkg/apis/garden/v1beta1.KubeControllerManagerConfig", "github.com/gardener/gardener/pkg/apis/garden/v1beta1.KubeProxyConfig", "github.com/gardener/gardener/pkg/apis/garden/v1beta1.KubeSchedulerConfig", "github.com/gardener/gardener/pkg/apis/garden/v1beta1.KubeletConfig"},
	}
}

func schema_pkg_apis_garden_v1beta1_KubernetesConfig(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "KubernetesConfig contains common configuration fields for the control plane components.",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"featureGates": {
						SchemaProps: spec.SchemaProps{
							Description: "FeatureGates contains information about enabled feature gates.",
							Type:        []string{"object"},
							AdditionalProperties: &spec.SchemaOrBool{
								Allows: true,
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Type:   []string{"boolean"},
										Format: "",
									},
								},
							},
						},
					},
				},
			},
		},
	}
}

func schema_pkg_apis_garden_v1beta1_KubernetesConstraints(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "KubernetesConstraints contains constraints regarding allowed values of the 'kubernetes' block in the Shoot specification.",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"versions": {
						SchemaProps: spec.SchemaProps{
							Description: "Versions is the list of allowed Kubernetes versions for Shoot clusters (e.g., 1.13.1).",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Type:   []string{"string"},
										Format: "",
									},
								},
							},
						},
					},
					"offeredVersions": {
						VendorExtensible: spec.VendorExtensible{
							Extensions: spec.Extensions{
								"x-kubernetes-patch-merge-key": "version",
								"x-kubernetes-patch-strategy":  "merge",
							},
						},
						SchemaProps: spec.SchemaProps{
							Description: "OfferedVersions is the list of allowed Kubernetes versions with optional expiration dates for Shoot clusters.",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Ref: ref("github.com/gardener/gardener/pkg/apis/garden/v1beta1.KubernetesVersion"),
									},
								},
							},
						},
					},
				},
			},
		},
		Dependencies: []string{
			"github.com/gardener/gardener/pkg/apis/garden/v1beta1.KubernetesVersion"},
	}
}

func schema_pkg_apis_garden_v1beta1_KubernetesDashboard(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "KubernetesDashboard describes configuration values for the kubernetes-dashboard addon.",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"enabled": {
						SchemaProps: spec.SchemaProps{
							Description: "Enabled indicates whether the addon is enabled or not.",
							Type:        []string{"boolean"},
							Format:      "",
						},
					},
					"authenticationMode": {
						SchemaProps: spec.SchemaProps{
							Description: "AuthenticationMode defines the authentication mode for the kubernetes-dashboard.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
				},
				Required: []string{"enabled"},
			},
		},
	}
}

func schema_pkg_apis_garden_v1beta1_KubernetesVersion(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "KubernetesVersion contains the version code and optional expiration date for a kubernetes version",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"version": {
						SchemaProps: spec.SchemaProps{
							Description: "Version is the kubernetes version",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"expirationDate": {
						SchemaProps: spec.SchemaProps{
							Description: "ExpirationDate defines the time at which this kubernetes version is not supported any more. This has the following implications: 1) A shoot that opted out of automatic kubernetes system updates and that is running this kubernetes version will be forcefully updated to the latest kubernetes patch version for the current minor version 2) Shoot's with this kubernetes version cannot be created",
							Ref:         ref("k8s.io/apimachinery/pkg/apis/meta/v1.Time"),
						},
					},
				},
				Required: []string{"version"},
			},
		},
		Dependencies: []string{
			"k8s.io/apimachinery/pkg/apis/meta/v1.Time"},
	}
}

func schema_pkg_apis_garden_v1beta1_MachineImage(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "MachineImage defines the name and multiple versions of the machine image in any environment.",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"name": {
						SchemaProps: spec.SchemaProps{
							Description: "Name is the name of the image.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"version": {
						SchemaProps: spec.SchemaProps{
							Description: "DEPRECATED: This field will be removed in a future version.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"versions": {
						VendorExtensible: spec.VendorExtensible{
							Extensions: spec.Extensions{
								"x-kubernetes-patch-merge-key": "version",
								"x-kubernetes-patch-strategy":  "merge",
							},
						},
						SchemaProps: spec.SchemaProps{
							Description: "Versions contains versions and expiration dates of the machine image",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Ref: ref("github.com/gardener/gardener/pkg/apis/garden/v1beta1.MachineImageVersion"),
									},
								},
							},
						},
					},
				},
				Required: []string{"name"},
			},
		},
		Dependencies: []string{
			"github.com/gardener/gardener/pkg/apis/garden/v1beta1.MachineImageVersion"},
	}
}

func schema_pkg_apis_garden_v1beta1_MachineImageVersion(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "MachineImageVersion contains a version and an expiration date of a machine image",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"version": {
						SchemaProps: spec.SchemaProps{
							Description: "Version is the version of the image.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"expirationDate": {
						SchemaProps: spec.SchemaProps{
							Description: "ExpirationDate defines the time at which a shoot that opted out of automatic operating system updates and that is running this image version will be forcefully updated to the latest version specified in the referenced cloud profile.",
							Ref:         ref("k8s.io/apimachinery/pkg/apis/meta/v1.Time"),
						},
					},
				},
				Required: []string{"version"},
			},
		},
		Dependencies: []string{
			"k8s.io/apimachinery/pkg/apis/meta/v1.Time"},
	}
}

func schema_pkg_apis_garden_v1beta1_MachineType(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "MachineType contains certain properties of a machine type.",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"name": {
						SchemaProps: spec.SchemaProps{
							Description: "Name is the name of the machine type.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"usable": {
						SchemaProps: spec.SchemaProps{
							Description: "Usable defines if the machine type can be used for shoot clusters.",
							Type:        []string{"boolean"},
							Format:      "",
						},
					},
					"cpu": {
						SchemaProps: spec.SchemaProps{
							Description: "CPU is the number of CPUs for this machine type.",
							Ref:         ref("k8s.io/apimachinery/pkg/api/resource.Quantity"),
						},
					},
					"gpu": {
						SchemaProps: spec.SchemaProps{
							Description: "GPU is the number of GPUs for this machine type.",
							Ref:         ref("k8s.io/apimachinery/pkg/api/resource.Quantity"),
						},
					},
					"storage": {
						SchemaProps: spec.SchemaProps{
							Description: "Storage is the amount of storage associated with the root volume of this machine type.",
							Ref:         ref("github.com/gardener/gardener/pkg/apis/garden/v1beta1.MachineTypeStorage"),
						},
					},
					"memory": {
						SchemaProps: spec.SchemaProps{
							Description: "Memory is the amount of memory for this machine type.",
							Ref:         ref("k8s.io/apimachinery/pkg/api/resource.Quantity"),
						},
					},
				},
				Required: []string{"name", "cpu", "gpu", "memory"},
			},
		},
		Dependencies: []string{
			"github.com/gardener/gardener/pkg/apis/garden/v1beta1.MachineTypeStorage", "k8s.io/apimachinery/pkg/api/resource.Quantity"},
	}
}

func schema_pkg_apis_garden_v1beta1_MachineTypeStorage(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "MachineTypeStorage is the amount of storage associated with the root volume of this machine type.",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"class": {
						SchemaProps: spec.SchemaProps{
							Description: "Class is the class of the storage type.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"size": {
						SchemaProps: spec.SchemaProps{
							Description: "Size is the storage size.",
							Ref:         ref("k8s.io/apimachinery/pkg/api/resource.Quantity"),
						},
					},
					"type": {
						SchemaProps: spec.SchemaProps{
							Description: "Type is the type of the storage.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
				},
				Required: []string{"class", "size", "type"},
			},
		},
		Dependencies: []string{
			"k8s.io/apimachinery/pkg/api/resource.Quantity"},
	}
}

func schema_pkg_apis_garden_v1beta1_Maintenance(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "Maintenance contains information about the time window for maintenance operations and which operations should be performed.",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"autoUpdate": {
						SchemaProps: spec.SchemaProps{
							Description: "AutoUpdate contains information about which constraints should be automatically updated.",
							Ref:         ref("github.com/gardener/gardener/pkg/apis/garden/v1beta1.MaintenanceAutoUpdate"),
						},
					},
					"timeWindow": {
						SchemaProps: spec.SchemaProps{
							Description: "TimeWindow contains information about the time window for maintenance operations.",
							Ref:         ref("github.com/gardener/gardener/pkg/apis/garden/v1beta1.MaintenanceTimeWindow"),
						},
					},
				},
			},
		},
		Dependencies: []string{
			"github.com/gardener/gardener/pkg/apis/garden/v1beta1.MaintenanceAutoUpdate", "github.com/gardener/gardener/pkg/apis/garden/v1beta1.MaintenanceTimeWindow"},
	}
}

func schema_pkg_apis_garden_v1beta1_MaintenanceAutoUpdate(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "MaintenanceAutoUpdate contains information about which constraints should be automatically updated.",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"kubernetesVersion": {
						SchemaProps: spec.SchemaProps{
							Description: "KubernetesVersion indicates whether the patch Kubernetes version may be automatically updated.",
							Type:        []string{"boolean"},
							Format:      "",
						},
					},
					"machineImageVersion": {
						SchemaProps: spec.SchemaProps{
							Description: "MachineImageVersion indicates whether the machine image version may be automatically updated (default: true).",
							Type:        []string{"boolean"},
							Format:      "",
						},
					},
				},
				Required: []string{"kubernetesVersion"},
			},
		},
	}
}

func schema_pkg_apis_garden_v1beta1_MaintenanceTimeWindow(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "MaintenanceTimeWindow contains information about the time window for maintenance operations.",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"begin": {
						SchemaProps: spec.SchemaProps{
							Description: "Begin is the beginning of the time window in the format HHMMSS+ZONE, e.g. \"220000+0100\". If not present, a random value will be computed.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"end": {
						SchemaProps: spec.SchemaProps{
							Description: "End is the end of the time window in the format HHMMSS+ZONE, e.g. \"220000+0100\". If not present, the value will be computed based on the \"Begin\" value.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
				},
				Required: []string{"begin", "end"},
			},
		},
	}
}

func schema_pkg_apis_garden_v1beta1_Monitoring(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "Monitoring contains information about the monitoring configuration for the shoot.",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"alerting": {
						SchemaProps: spec.SchemaProps{
							Description: "Alerting contains information about the alerting configuration for the shoot cluster.",
							Ref:         ref("github.com/gardener/gardener/pkg/apis/garden/v1beta1.Alerting"),
						},
					},
				},
			},
		},
		Dependencies: []string{
			"github.com/gardener/gardener/pkg/apis/garden/v1beta1.Alerting"},
	}
}

func schema_pkg_apis_garden_v1beta1_Monocular(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "Monocular describes configuration values for the monocular addon.",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"enabled": {
						SchemaProps: spec.SchemaProps{
							Description: "Enabled indicates whether the addon is enabled or not.",
							Type:        []string{"boolean"},
							Format:      "",
						},
					},
				},
				Required: []string{"enabled"},
			},
		},
	}
}

func schema_pkg_apis_garden_v1beta1_Networking(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "Networking defines networking parameters for the shoot cluster.",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"nodes": {
						SchemaProps: spec.SchemaProps{
							Description: "Nodes is the CIDR of the node network.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"pods": {
						SchemaProps: spec.SchemaProps{
							Description: "Pods is the CIDR of the pod network.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"services": {
						SchemaProps: spec.SchemaProps{
							Description: "Services is the CIDR of the service network.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"type": {
						SchemaProps: spec.SchemaProps{
							Description: "Type identifies the type of the networking plugin",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"providerConfig": {
						SchemaProps: spec.SchemaProps{
							Description: "ProviderConfig is the configuration passed to network resource.",
							Ref:         ref("github.com/gardener/gardener/pkg/apis/core/v1alpha1.ProviderConfig"),
						},
					},
				},
				Required: []string{"type"},
			},
		},
		Dependencies: []string{
			"github.com/gardener/gardener/pkg/apis/core/v1alpha1.ProviderConfig"},
	}
}

func schema_pkg_apis_garden_v1beta1_NginxIngress(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "NginxIngress describes configuration values for the nginx-ingress addon.",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"enabled": {
						SchemaProps: spec.SchemaProps{
							Description: "Enabled indicates whether the addon is enabled or not.",
							Type:        []string{"boolean"},
							Format:      "",
						},
					},
					"loadBalancerSourceRanges": {
						SchemaProps: spec.SchemaProps{
							Description: "LoadBalancerSourceRanges is list of whitelist IP sources for NginxIngress",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Type:   []string{"string"},
										Format: "",
									},
								},
							},
						},
					},
					"config": {
						SchemaProps: spec.SchemaProps{
							Description: "Config contains custom configuration for the nginx-ingress-controller configuration. See https://github.com/kubernetes/ingress-nginx/blob/master/docs/user-guide/nginx-configuration/configmap.md#configuration-options",
							Type:        []string{"object"},
							AdditionalProperties: &spec.SchemaOrBool{
								Allows: true,
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Type:   []string{"string"},
										Format: "",
									},
								},
							},
						},
					},
					"externalTrafficPolicy": {
						SchemaProps: spec.SchemaProps{
							Description: "ExternalTrafficPolicy controls the `.spec.externalTrafficPolicy` value of the load balancer `Service` exposing the nginx-ingress. Defaults to `Cluster`.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
				},
				Required: []string{"enabled"},
			},
		},
	}
}

func schema_pkg_apis_garden_v1beta1_OIDCConfig(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "OIDCConfig contains configuration settings for the OIDC provider. Note: Descriptions were taken from the Kubernetes documentation.",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"caBundle": {
						SchemaProps: spec.SchemaProps{
							Description: "If set, the OpenID server's certificate will be verified by one of the authorities in the oidc-ca-file, otherwise the host's root CA set will be used.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"clientID": {
						SchemaProps: spec.SchemaProps{
							Description: "The client ID for the OpenID Connect client, must be set if oidc-issuer-url is set.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"groupsClaim": {
						SchemaProps: spec.SchemaProps{
							Description: "If provided, the name of a custom OpenID Connect claim for specifying user groups. The claim value is expected to be a string or array of strings. This flag is experimental, please see the authentication documentation for further details.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"groupsPrefix": {
						SchemaProps: spec.SchemaProps{
							Description: "If provided, all groups will be prefixed with this value to prevent conflicts with other authentication strategies.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"issuerURL": {
						SchemaProps: spec.SchemaProps{
							Description: "The URL of the OpenID issuer, only HTTPS scheme will be accepted. If set, it will be used to verify the OIDC JSON Web Token (JWT).",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"requiredClaims": {
						SchemaProps: spec.SchemaProps{
							Description: "ATTENTION: Only meaningful for Kubernetes >= 1.11 key=value pairs that describes a required claim in the ID Token. If set, the claim is verified to be present in the ID Token with a matching value.",
							Type:        []string{"object"},
							AdditionalProperties: &spec.SchemaOrBool{
								Allows: true,
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Type:   []string{"string"},
										Format: "",
									},
								},
							},
						},
					},
					"signingAlgs": {
						SchemaProps: spec.SchemaProps{
							Description: "List of allowed JOSE asymmetric signing algorithms. JWTs with a 'alg' header value not in this list will be rejected. Values are defined by RFC 7518 https://tools.ietf.org/html/rfc7518#section-3.1",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Type:   []string{"string"},
										Format: "",
									},
								},
							},
						},
					},
					"usernameClaim": {
						SchemaProps: spec.SchemaProps{
							Description: "The OpenID claim to use as the user name. Note that claims other than the default ('sub') is not guaranteed to be unique and immutable. This flag is experimental, please see the authentication documentation for further details. (default \"sub\")",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"usernamePrefix": {
						SchemaProps: spec.SchemaProps{
							Description: "If provided, all usernames will be prefixed with this value. If not provided, username claims other than 'email' are prefixed by the issuer URL to avoid clashes. To skip any prefixing, provide the value '-'.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"clientAuthentication": {
						SchemaProps: spec.SchemaProps{
							Description: "ClientAuthentication can optionally contain client configuration used for kubeconfig generation.",
							Ref:         ref("github.com/gardener/gardener/pkg/apis/garden/v1beta1.OpenIDConnectClientAuthentication"),
						},
					},
				},
			},
		},
		Dependencies: []string{
			"github.com/gardener/gardener/pkg/apis/garden/v1beta1.OpenIDConnectClientAuthentication"},
	}
}

func schema_pkg_apis_garden_v1beta1_OpenIDConnectClientAuthentication(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "OpenIDConnectClientAuthentication contains configuration for OIDC clients.",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"secret": {
						SchemaProps: spec.SchemaProps{
							Description: "The client Secret for the OpenID Connect client.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"extraConfig": {
						SchemaProps: spec.SchemaProps{
							Description: "Extra configuration added to kubeconfig's auth-provider. Must not be any of idp-issuer-url, client-id, client-secret, idp-certificate-authority, idp-certificate-authority-data, id-token or refresh-token",
							Type:        []string{"object"},
							AdditionalProperties: &spec.SchemaOrBool{
								Allows: true,
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Type:   []string{"string"},
										Format: "",
									},
								},
							},
						},
					},
				},
			},
		},
	}
}

func schema_pkg_apis_garden_v1beta1_OpenStackCloud(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "OpenStackCloud contains the Shoot specification for OpenStack.",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"floatingPoolName": {
						SchemaProps: spec.SchemaProps{
							Description: "FloatingPoolName is the name of the floating pool to get FIPs from.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"loadBalancerProvider": {
						SchemaProps: spec.SchemaProps{
							Description: "LoadBalancerProvider is the name of the load balancer provider in the OpenStack environment.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"loadBalancerClasses": {
						VendorExtensible: spec.VendorExtensible{
							Extensions: spec.Extensions{
								"x-kubernetes-patch-merge-key": "name",
								"x-kubernetes-patch-strategy":  "merge",
							},
						},
						SchemaProps: spec.SchemaProps{
							Description: "LoadBalancerClasses available for a dedicated Shoot.",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Ref: ref("github.com/gardener/gardener/pkg/apis/garden/v1beta1.OpenStackLoadBalancerClass"),
									},
								},
							},
						},
					},
					"machineImage": {
						SchemaProps: spec.SchemaProps{
							Description: "ShootMachineImage holds information about the machine image to use for all workers. It will default to the latest version of the first image stated in the referenced CloudProfile if no value has been provided.",
							Ref:         ref("github.com/gardener/gardener/pkg/apis/garden/v1beta1.ShootMachineImage"),
						},
					},
					"networks": {
						SchemaProps: spec.SchemaProps{
							Description: "Networks holds information about the Kubernetes and infrastructure networks.",
							Ref:         ref("github.com/gardener/gardener/pkg/apis/garden/v1beta1.OpenStackNetworks"),
						},
					},
					"workers": {
						VendorExtensible: spec.VendorExtensible{
							Extensions: spec.Extensions{
								"x-kubernetes-patch-merge-key": "name",
								"x-kubernetes-patch-strategy":  "merge",
							},
						},
						SchemaProps: spec.SchemaProps{
							Description: "Workers is a list of worker groups.",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Ref: ref("github.com/gardener/gardener/pkg/apis/garden/v1beta1.OpenStackWorker"),
									},
								},
							},
						},
					},
					"zones": {
						SchemaProps: spec.SchemaProps{
							Description: "Zones is a list of availability zones to deploy the Shoot cluster to.",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Type:   []string{"string"},
										Format: "",
									},
								},
							},
						},
					},
				},
				Required: []string{"floatingPoolName", "loadBalancerProvider", "networks", "workers", "zones"},
			},
		},
		Dependencies: []string{
			"github.com/gardener/gardener/pkg/apis/garden/v1beta1.OpenStackLoadBalancerClass", "github.com/gardener/gardener/pkg/apis/garden/v1beta1.OpenStackNetworks", "github.com/gardener/gardener/pkg/apis/garden/v1beta1.OpenStackWorker", "github.com/gardener/gardener/pkg/apis/garden/v1beta1.ShootMachineImage"},
	}
}

func schema_pkg_apis_garden_v1beta1_OpenStackConstraints(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "OpenStackConstraints is an object containing constraints for certain values in the Shoot specification.",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"dnsProviders": {
						VendorExtensible: spec.VendorExtensible{
							Extensions: spec.Extensions{
								"x-kubernetes-patch-merge-key": "name",
								"x-kubernetes-patch-strategy":  "merge",
							},
						},
						SchemaProps: spec.SchemaProps{
							Description: "DNSProviders contains constraints regarding allowed values of the 'dns.provider' block in the Shoot specification.",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Ref: ref("github.com/gardener/gardener/pkg/apis/garden/v1beta1.DNSProviderConstraint"),
									},
								},
							},
						},
					},
					"floatingPools": {
						VendorExtensible: spec.VendorExtensible{
							Extensions: spec.Extensions{
								"x-kubernetes-patch-merge-key": "name",
								"x-kubernetes-patch-strategy":  "merge",
							},
						},
						SchemaProps: spec.SchemaProps{
							Description: "FloatingPools contains constraints regarding allowed values of the 'floatingPoolName' block in the Shoot specification.",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Ref: ref("github.com/gardener/gardener/pkg/apis/garden/v1beta1.OpenStackFloatingPool"),
									},
								},
							},
						},
					},
					"kubernetes": {
						SchemaProps: spec.SchemaProps{
							Description: "Kubernetes contains constraints regarding allowed values of the 'kubernetes' block in the Shoot specification.",
							Ref:         ref("github.com/gardener/gardener/pkg/apis/garden/v1beta1.KubernetesConstraints"),
						},
					},
					"loadBalancerProviders": {
						VendorExtensible: spec.VendorExtensible{
							Extensions: spec.Extensions{
								"x-kubernetes-patch-merge-key": "name",
								"x-kubernetes-patch-strategy":  "merge",
							},
						},
						SchemaProps: spec.SchemaProps{
							Description: "LoadBalancerProviders contains constraints regarding allowed values of the 'loadBalancerProvider' block in the Shoot specification.",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Ref: ref("github.com/gardener/gardener/pkg/apis/garden/v1beta1.OpenStackLoadBalancerProvider"),
									},
								},
							},
						},
					},
					"machineImages": {
						VendorExtensible: spec.VendorExtensible{
							Extensions: spec.Extensions{
								"x-kubernetes-patch-merge-key": "name",
								"x-kubernetes-patch-strategy":  "merge",
							},
						},
						SchemaProps: spec.SchemaProps{
							Description: "MachineImages contains constraints regarding allowed values for machine images in the Shoot specification.",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Ref: ref("github.com/gardener/gardener/pkg/apis/garden/v1beta1.MachineImage"),
									},
								},
							},
						},
					},
					"machineTypes": {
						VendorExtensible: spec.VendorExtensible{
							Extensions: spec.Extensions{
								"x-kubernetes-patch-merge-key": "name",
								"x-kubernetes-patch-strategy":  "merge",
							},
						},
						SchemaProps: spec.SchemaProps{
							Description: "MachineTypes contains constraints regarding allowed values for machine types in the 'workers' block in the Shoot specification.",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Ref: ref("github.com/gardener/gardener/pkg/apis/garden/v1beta1.OpenStackMachineType"),
									},
								},
							},
						},
					},
					"zones": {
						VendorExtensible: spec.VendorExtensible{
							Extensions: spec.Extensions{
								"x-kubernetes-patch-merge-key": "region",
								"x-kubernetes-patch-strategy":  "merge",
							},
						},
						SchemaProps: spec.SchemaProps{
							Description: "Zones contains constraints regarding allowed values for 'zones' block in the Shoot specification.",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Ref: ref("github.com/gardener/gardener/pkg/apis/garden/v1beta1.Zone"),
									},
								},
							},
						},
					},
				},
				Required: []string{"floatingPools", "kubernetes", "loadBalancerProviders", "machineImages", "machineTypes", "zones"},
			},
		},
		Dependencies: []string{
			"github.com/gardener/gardener/pkg/apis/garden/v1beta1.DNSProviderConstraint", "github.com/gardener/gardener/pkg/apis/garden/v1beta1.KubernetesConstraints", "github.com/gardener/gardener/pkg/apis/garden/v1beta1.MachineImage", "github.com/gardener/gardener/pkg/apis/garden/v1beta1.OpenStackFloatingPool", "github.com/gardener/gardener/pkg/apis/garden/v1beta1.OpenStackLoadBalancerProvider", "github.com/gardener/gardener/pkg/apis/garden/v1beta1.OpenStackMachineType", "github.com/gardener/gardener/pkg/apis/garden/v1beta1.Zone"},
	}
}

func schema_pkg_apis_garden_v1beta1_OpenStackFloatingPool(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "OpenStackFloatingPool contains constraints regarding allowed values of the 'floatingPoolName' block in the Shoot specification.",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"name": {
						SchemaProps: spec.SchemaProps{
							Description: "Name is the name of the floating pool.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"loadBalancerClasses": {
						VendorExtensible: spec.VendorExtensible{
							Extensions: spec.Extensions{
								"x-kubernetes-patch-merge-key": "name",
								"x-kubernetes-patch-strategy":  "merge",
							},
						},
						SchemaProps: spec.SchemaProps{
							Description: "LoadBalancerClasses contains a list of supported labeled load balancer network settings.",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Ref: ref("github.com/gardener/gardener/pkg/apis/garden/v1beta1.OpenStackLoadBalancerClass"),
									},
								},
							},
						},
					},
				},
				Required: []string{"name"},
			},
		},
		Dependencies: []string{
			"github.com/gardener/gardener/pkg/apis/garden/v1beta1.OpenStackLoadBalancerClass"},
	}
}

func schema_pkg_apis_garden_v1beta1_OpenStackLoadBalancerClass(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "OpenStackLoadBalancerClass defines a restricted network setting for generic LoadBalancer classes usable in CloudProfiles.",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"name": {
						SchemaProps: spec.SchemaProps{
							Description: "Name is the name of the LB class",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"floatingSubnetID": {
						SchemaProps: spec.SchemaProps{
							Description: "FloatingSubnetID is the subnetwork ID of a dedicated subnet in floating network pool.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"floatingNetworkID": {
						SchemaProps: spec.SchemaProps{
							Description: "FloatingNetworkID is the network ID of the floating network pool.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"subnetID": {
						SchemaProps: spec.SchemaProps{
							Description: "SubnetID is the ID of a local subnet used for LoadBalancer provisioning. Only usable if no FloatingPool configuration is done.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
				},
				Required: []string{"name"},
			},
		},
	}
}

func schema_pkg_apis_garden_v1beta1_OpenStackLoadBalancerProvider(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "OpenStackLoadBalancerProvider contains constraints regarding allowed values of the 'loadBalancerProvider' block in the Shoot specification.",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"name": {
						SchemaProps: spec.SchemaProps{
							Description: "Name is the name of the load balancer provider.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
				},
				Required: []string{"name"},
			},
		},
	}
}

func schema_pkg_apis_garden_v1beta1_OpenStackMachineType(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "OpenStackMachineType contains certain properties of a machine type in OpenStack",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"name": {
						SchemaProps: spec.SchemaProps{
							Description: "Name is the name of the machine type.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"usable": {
						SchemaProps: spec.SchemaProps{
							Description: "Usable defines if the machine type can be used for shoot clusters.",
							Type:        []string{"boolean"},
							Format:      "",
						},
					},
					"cpu": {
						SchemaProps: spec.SchemaProps{
							Description: "CPU is the number of CPUs for this machine type.",
							Ref:         ref("k8s.io/apimachinery/pkg/api/resource.Quantity"),
						},
					},
					"gpu": {
						SchemaProps: spec.SchemaProps{
							Description: "GPU is the number of GPUs for this machine type.",
							Ref:         ref("k8s.io/apimachinery/pkg/api/resource.Quantity"),
						},
					},
					"storage": {
						SchemaProps: spec.SchemaProps{
							Description: "Storage is the amount of storage associated with the root volume of this machine type.",
							Ref:         ref("github.com/gardener/gardener/pkg/apis/garden/v1beta1.MachineTypeStorage"),
						},
					},
					"memory": {
						SchemaProps: spec.SchemaProps{
							Description: "Memory is the amount of memory for this machine type.",
							Ref:         ref("k8s.io/apimachinery/pkg/api/resource.Quantity"),
						},
					},
					"volumeType": {
						SchemaProps: spec.SchemaProps{
							Description: "VolumeType is the type of that volume.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"volumeSize": {
						SchemaProps: spec.SchemaProps{
							Description: "VolumeSize is the amount of disk storage for this machine type.",
							Ref:         ref("k8s.io/apimachinery/pkg/api/resource.Quantity"),
						},
					},
				},
				Required: []string{"name", "cpu", "gpu", "memory", "volumeType", "volumeSize"},
			},
		},
		Dependencies: []string{
			"github.com/gardener/gardener/pkg/apis/garden/v1beta1.MachineTypeStorage", "k8s.io/apimachinery/pkg/api/resource.Quantity"},
	}
}

func schema_pkg_apis_garden_v1beta1_OpenStackNetworks(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "OpenStackNetworks holds information about the Kubernetes and infrastructure networks.",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"nodes": {
						SchemaProps: spec.SchemaProps{
							Description: "Nodes is the CIDR of the node network.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"pods": {
						SchemaProps: spec.SchemaProps{
							Description: "Pods is the CIDR of the pod network.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"services": {
						SchemaProps: spec.SchemaProps{
							Description: "Services is the CIDR of the service network.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"router": {
						SchemaProps: spec.SchemaProps{
							Description: "Router indicates whether to use an existing router or create a new one.",
							Ref:         ref("github.com/gardener/gardener/pkg/apis/garden/v1beta1.OpenStackRouter"),
						},
					},
					"workers": {
						SchemaProps: spec.SchemaProps{
							Description: "Workers is a list of CIDRs of worker subnets (private) to create (used for the VMs).",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Type:   []string{"string"},
										Format: "",
									},
								},
							},
						},
					},
				},
				Required: []string{"workers"},
			},
		},
		Dependencies: []string{
			"github.com/gardener/gardener/pkg/apis/garden/v1beta1.OpenStackRouter"},
	}
}

func schema_pkg_apis_garden_v1beta1_OpenStackProfile(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "OpenStackProfile defines certain constraints and definitions for the OpenStack cloud.",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"constraints": {
						SchemaProps: spec.SchemaProps{
							Description: "Constraints is an object containing constraints for certain values in the Shoot specification.",
							Ref:         ref("github.com/gardener/gardener/pkg/apis/garden/v1beta1.OpenStackConstraints"),
						},
					},
					"keystoneURL": {
						SchemaProps: spec.SchemaProps{
							Description: "KeyStoneURL is the URL for auth{n,z} in OpenStack (pointing to KeyStone).",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"dnsServers": {
						SchemaProps: spec.SchemaProps{
							Description: "DNSServers is a list of IPs of DNS servers used while creating subnets.",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Type:   []string{"string"},
										Format: "",
									},
								},
							},
						},
					},
					"dhcpDomain": {
						SchemaProps: spec.SchemaProps{
							Description: "DHCPDomain is the dhcp domain of the OpenStack system configured in nova.conf. Only meaningful for Kubernetes 1.10.1+. See https://github.com/kubernetes/kubernetes/pull/61890 for details.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"requestTimeout": {
						SchemaProps: spec.SchemaProps{
							Description: "RequestTimeout specifies the HTTP timeout against the OpenStack API.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
				},
				Required: []string{"constraints", "keystoneURL"},
			},
		},
		Dependencies: []string{
			"github.com/gardener/gardener/pkg/apis/garden/v1beta1.OpenStackConstraints"},
	}
}

func schema_pkg_apis_garden_v1beta1_OpenStackRouter(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "OpenStackRouter indicates whether to use an existing router or create a new one.",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"id": {
						SchemaProps: spec.SchemaProps{
							Description: "ID is the router id of an existing OpenStack router.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
				},
				Required: []string{"id"},
			},
		},
	}
}

func schema_pkg_apis_garden_v1beta1_OpenStackWorker(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "OpenStackWorker is the definition of a worker group.",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"name": {
						SchemaProps: spec.SchemaProps{
							Description: "Name is the name of the worker group.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"machineType": {
						SchemaProps: spec.SchemaProps{
							Description: "MachineType is the machine type of the worker group.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"machineImage": {
						SchemaProps: spec.SchemaProps{
							Description: "ShootMachineImage holds information about the machine image to use for all workers. It will default to the latest version of the first image stated in the referenced CloudProfile if no value has been provided.",
							Ref:         ref("github.com/gardener/gardener/pkg/apis/garden/v1beta1.ShootMachineImage"),
						},
					},
					"autoScalerMin": {
						SchemaProps: spec.SchemaProps{
							Description: "AutoScalerMin is the minimum number of VMs to create.",
							Type:        []string{"integer"},
							Format:      "int32",
						},
					},
					"autoScalerMax": {
						SchemaProps: spec.SchemaProps{
							Description: "AutoScalerMin is the maximum number of VMs to create.",
							Type:        []string{"integer"},
							Format:      "int32",
						},
					},
					"maxSurge": {
						SchemaProps: spec.SchemaProps{
							Description: "MaxSurge is maximum number of VMs that are created during an update.",
							Ref:         ref("k8s.io/apimachinery/pkg/util/intstr.IntOrString"),
						},
					},
					"maxUnavailable": {
						SchemaProps: spec.SchemaProps{
							Description: "MaxUnavailable is the maximum number of VMs that can be unavailable during an update.",
							Ref:         ref("k8s.io/apimachinery/pkg/util/intstr.IntOrString"),
						},
					},
					"annotations": {
						SchemaProps: spec.SchemaProps{
							Description: "Annotations is a map of key/value pairs for annotations for all the `Node` objects in this worker pool.",
							Type:        []string{"object"},
							AdditionalProperties: &spec.SchemaOrBool{
								Allows: true,
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Type:   []string{"string"},
										Format: "",
									},
								},
							},
						},
					},
					"labels": {
						SchemaProps: spec.SchemaProps{
							Description: "Labels is a map of key/value pairs for labels for all the `Node` objects in this worker pool.",
							Type:        []string{"object"},
							AdditionalProperties: &spec.SchemaOrBool{
								Allows: true,
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Type:   []string{"string"},
										Format: "",
									},
								},
							},
						},
					},
					"taints": {
						SchemaProps: spec.SchemaProps{
							Description: "Taints is a list of taints for all the `Node` objects in this worker pool.",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Ref: ref("k8s.io/api/core/v1.Taint"),
									},
								},
							},
						},
					},
					"kubelet": {
						SchemaProps: spec.SchemaProps{
							Description: "Kubelet contains configuration settings for the kubelet.",
							Ref:         ref("github.com/gardener/gardener/pkg/apis/garden/v1beta1.KubeletConfig"),
						},
					},
					"caBundle": {
						SchemaProps: spec.SchemaProps{
							Description: "CABundle is a certificate bundle which will be installed onto every machine of this worker pool.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
				},
				Required: []string{"name", "machineType", "autoScalerMin", "autoScalerMax"},
			},
		},
		Dependencies: []string{
			"github.com/gardener/gardener/pkg/apis/garden/v1beta1.KubeletConfig", "github.com/gardener/gardener/pkg/apis/garden/v1beta1.ShootMachineImage", "k8s.io/api/core/v1.Taint", "k8s.io/apimachinery/pkg/util/intstr.IntOrString"},
	}
}

func schema_pkg_apis_garden_v1beta1_PacketCloud(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "PacketCloud contains the Shoot specification for Packet cloud",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"machineImage": {
						SchemaProps: spec.SchemaProps{
							Description: "ShootMachineImage holds information about the machine image to use for all workers. It will default to the latest version of the first image stated in the referenced CloudProfile if no value has been provided.",
							Ref:         ref("github.com/gardener/gardener/pkg/apis/garden/v1beta1.ShootMachineImage"),
						},
					},
					"networks": {
						SchemaProps: spec.SchemaProps{
							Description: "Networks holds information about the Kubernetes and infrastructure networks.",
							Ref:         ref("github.com/gardener/gardener/pkg/apis/garden/v1beta1.PacketNetworks"),
						},
					},
					"workers": {
						VendorExtensible: spec.VendorExtensible{
							Extensions: spec.Extensions{
								"x-kubernetes-patch-merge-key": "name",
								"x-kubernetes-patch-strategy":  "merge",
							},
						},
						SchemaProps: spec.SchemaProps{
							Description: "Workers is a list of worker groups.",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Ref: ref("github.com/gardener/gardener/pkg/apis/garden/v1beta1.PacketWorker"),
									},
								},
							},
						},
					},
					"zones": {
						SchemaProps: spec.SchemaProps{
							Description: "Zones is a list of availability zones to deploy the Shoot cluster to, currently, only one is supported.",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Type:   []string{"string"},
										Format: "",
									},
								},
							},
						},
					},
				},
				Required: []string{"networks", "workers", "zones"},
			},
		},
		Dependencies: []string{
			"github.com/gardener/gardener/pkg/apis/garden/v1beta1.PacketNetworks", "github.com/gardener/gardener/pkg/apis/garden/v1beta1.PacketWorker", "github.com/gardener/gardener/pkg/apis/garden/v1beta1.ShootMachineImage"},
	}
}

func schema_pkg_apis_garden_v1beta1_PacketConstraints(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "PacketConstraints is an object containing constraints for certain values in the Shoot specification",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"dnsProviders": {
						SchemaProps: spec.SchemaProps{
							Description: "DNSProviders contains constraints regarding allowed values of the 'dns.provider' block in the Shoot specification.",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Ref: ref("github.com/gardener/gardener/pkg/apis/garden/v1beta1.DNSProviderConstraint"),
									},
								},
							},
						},
					},
					"kubernetes": {
						SchemaProps: spec.SchemaProps{
							Description: "Kubernetes contains constraints regarding allowed values of the 'kubernetes' block in the Shoot specification.",
							Ref:         ref("github.com/gardener/gardener/pkg/apis/garden/v1beta1.KubernetesConstraints"),
						},
					},
					"machineImages": {
						VendorExtensible: spec.VendorExtensible{
							Extensions: spec.Extensions{
								"x-kubernetes-patch-merge-key": "name",
								"x-kubernetes-patch-strategy":  "merge",
							},
						},
						SchemaProps: spec.SchemaProps{
							Description: "MachineImages contains constraints regarding allowed values for machine images in the Shoot specification.",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Ref: ref("github.com/gardener/gardener/pkg/apis/garden/v1beta1.MachineImage"),
									},
								},
							},
						},
					},
					"machineTypes": {
						VendorExtensible: spec.VendorExtensible{
							Extensions: spec.Extensions{
								"x-kubernetes-patch-merge-key": "name",
								"x-kubernetes-patch-strategy":  "merge",
							},
						},
						SchemaProps: spec.SchemaProps{
							Description: "MachineTypes contains constraints regarding allowed values for machine types in the 'workers' block in the Shoot specification.",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Ref: ref("github.com/gardener/gardener/pkg/apis/garden/v1beta1.MachineType"),
									},
								},
							},
						},
					},
					"volumeTypes": {
						VendorExtensible: spec.VendorExtensible{
							Extensions: spec.Extensions{
								"x-kubernetes-patch-merge-key": "name",
								"x-kubernetes-patch-strategy":  "merge",
							},
						},
						SchemaProps: spec.SchemaProps{
							Description: "VolumeTypes contains constraints regarding allowed values for volume types in the 'workers' block in the Shoot specification.",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Ref: ref("github.com/gardener/gardener/pkg/apis/garden/v1beta1.VolumeType"),
									},
								},
							},
						},
					},
					"zones": {
						VendorExtensible: spec.VendorExtensible{
							Extensions: spec.Extensions{
								"x-kubernetes-patch-merge-key": "region",
								"x-kubernetes-patch-strategy":  "merge",
							},
						},
						SchemaProps: spec.SchemaProps{
							Description: "Zones contains constraints regarding allowed values for 'zones' block in the Shoot specification.",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Ref: ref("github.com/gardener/gardener/pkg/apis/garden/v1beta1.Zone"),
									},
								},
							},
						},
					},
				},
				Required: []string{"kubernetes", "machineImages", "machineTypes", "volumeTypes", "zones"},
			},
		},
		Dependencies: []string{
			"github.com/gardener/gardener/pkg/apis/garden/v1beta1.DNSProviderConstraint", "github.com/gardener/gardener/pkg/apis/garden/v1beta1.KubernetesConstraints", "github.com/gardener/gardener/pkg/apis/garden/v1beta1.MachineImage", "github.com/gardener/gardener/pkg/apis/garden/v1beta1.MachineType", "github.com/gardener/gardener/pkg/apis/garden/v1beta1.VolumeType", "github.com/gardener/gardener/pkg/apis/garden/v1beta1.Zone"},
	}
}

func schema_pkg_apis_garden_v1beta1_PacketNetworks(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "PacketNetworks holds information about the Kubernetes and infrastructure networks.",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"nodes": {
						SchemaProps: spec.SchemaProps{
							Description: "Nodes is the CIDR of the node network.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"pods": {
						SchemaProps: spec.SchemaProps{
							Description: "Pods is the CIDR of the pod network.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"services": {
						SchemaProps: spec.SchemaProps{
							Description: "Services is the CIDR of the service network.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
				},
			},
		},
	}
}

func schema_pkg_apis_garden_v1beta1_PacketProfile(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "PacketProfile defines constraints and definitions in Packet Cloud environment.",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"constraints": {
						SchemaProps: spec.SchemaProps{
							Description: "Constraints is an object containing constraints for certain values in the Shoot specification.",
							Ref:         ref("github.com/gardener/gardener/pkg/apis/garden/v1beta1.PacketConstraints"),
						},
					},
				},
				Required: []string{"constraints"},
			},
		},
		Dependencies: []string{
			"github.com/gardener/gardener/pkg/apis/garden/v1beta1.PacketConstraints"},
	}
}

func schema_pkg_apis_garden_v1beta1_PacketWorker(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "PacketWorker is the definition of a worker group.",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"name": {
						SchemaProps: spec.SchemaProps{
							Description: "Name is the name of the worker group.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"machineType": {
						SchemaProps: spec.SchemaProps{
							Description: "MachineType is the machine type of the worker group.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"machineImage": {
						SchemaProps: spec.SchemaProps{
							Description: "ShootMachineImage holds information about the machine image to use for all workers. It will default to the latest version of the first image stated in the referenced CloudProfile if no value has been provided.",
							Ref:         ref("github.com/gardener/gardener/pkg/apis/garden/v1beta1.ShootMachineImage"),
						},
					},
					"autoScalerMin": {
						SchemaProps: spec.SchemaProps{
							Description: "AutoScalerMin is the minimum number of VMs to create.",
							Type:        []string{"integer"},
							Format:      "int32",
						},
					},
					"autoScalerMax": {
						SchemaProps: spec.SchemaProps{
							Description: "AutoScalerMin is the maximum number of VMs to create.",
							Type:        []string{"integer"},
							Format:      "int32",
						},
					},
					"maxSurge": {
						SchemaProps: spec.SchemaProps{
							Description: "MaxSurge is maximum number of VMs that are created during an update.",
							Ref:         ref("k8s.io/apimachinery/pkg/util/intstr.IntOrString"),
						},
					},
					"maxUnavailable": {
						SchemaProps: spec.SchemaProps{
							Description: "MaxUnavailable is the maximum number of VMs that can be unavailable during an update.",
							Ref:         ref("k8s.io/apimachinery/pkg/util/intstr.IntOrString"),
						},
					},
					"annotations": {
						SchemaProps: spec.SchemaProps{
							Description: "Annotations is a map of key/value pairs for annotations for all the `Node` objects in this worker pool.",
							Type:        []string{"object"},
							AdditionalProperties: &spec.SchemaOrBool{
								Allows: true,
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Type:   []string{"string"},
										Format: "",
									},
								},
							},
						},
					},
					"labels": {
						SchemaProps: spec.SchemaProps{
							Description: "Labels is a map of key/value pairs for labels for all the `Node` objects in this worker pool.",
							Type:        []string{"object"},
							AdditionalProperties: &spec.SchemaOrBool{
								Allows: true,
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Type:   []string{"string"},
										Format: "",
									},
								},
							},
						},
					},
					"taints": {
						SchemaProps: spec.SchemaProps{
							Description: "Taints is a list of taints for all the `Node` objects in this worker pool.",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Ref: ref("k8s.io/api/core/v1.Taint"),
									},
								},
							},
						},
					},
					"kubelet": {
						SchemaProps: spec.SchemaProps{
							Description: "Kubelet contains configuration settings for the kubelet.",
							Ref:         ref("github.com/gardener/gardener/pkg/apis/garden/v1beta1.KubeletConfig"),
						},
					},
					"caBundle": {
						SchemaProps: spec.SchemaProps{
							Description: "CABundle is a certificate bundle which will be installed onto every machine of this worker pool.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"volumeType": {
						SchemaProps: spec.SchemaProps{
							Description: "VolumeType is the type of the root volumes.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"volumeSize": {
						SchemaProps: spec.SchemaProps{
							Description: "VolumeSize is the size of the root volume.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
				},
				Required: []string{"name", "machineType", "autoScalerMin", "autoScalerMax", "volumeType", "volumeSize"},
			},
		},
		Dependencies: []string{
			"github.com/gardener/gardener/pkg/apis/garden/v1beta1.KubeletConfig", "github.com/gardener/gardener/pkg/apis/garden/v1beta1.ShootMachineImage", "k8s.io/api/core/v1.Taint", "k8s.io/apimachinery/pkg/util/intstr.IntOrString"},
	}
}

func schema_pkg_apis_garden_v1beta1_Project(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "Project holds certain properties about a Gardener project.",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"kind": {
						SchemaProps: spec.SchemaProps{
							Description: "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"apiVersion": {
						SchemaProps: spec.SchemaProps{
							Description: "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"metadata": {
						SchemaProps: spec.SchemaProps{
							Description: "Standard object metadata.",
							Ref:         ref("k8s.io/apimachinery/pkg/apis/meta/v1.ObjectMeta"),
						},
					},
					"spec": {
						SchemaProps: spec.SchemaProps{
							Description: "Spec defines the project properties.",
							Ref:         ref("github.com/gardener/gardener/pkg/apis/garden/v1beta1.ProjectSpec"),
						},
					},
					"status": {
						SchemaProps: spec.SchemaProps{
							Description: "Most recently observed status of the Project.",
							Ref:         ref("github.com/gardener/gardener/pkg/apis/garden/v1beta1.ProjectStatus"),
						},
					},
				},
			},
		},
		Dependencies: []string{
			"github.com/gardener/gardener/pkg/apis/garden/v1beta1.ProjectSpec", "github.com/gardener/gardener/pkg/apis/garden/v1beta1.ProjectStatus", "k8s.io/apimachinery/pkg/apis/meta/v1.ObjectMeta"},
	}
}

func schema_pkg_apis_garden_v1beta1_ProjectList(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "ProjectList is a collection of Projects.",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"kind": {
						SchemaProps: spec.SchemaProps{
							Description: "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"apiVersion": {
						SchemaProps: spec.SchemaProps{
							Description: "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"metadata": {
						SchemaProps: spec.SchemaProps{
							Description: "Standard list object metadata.",
							Ref:         ref("k8s.io/apimachinery/pkg/apis/meta/v1.ListMeta"),
						},
					},
					"items": {
						SchemaProps: spec.SchemaProps{
							Description: "Items is the list of Projects.",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Ref: ref("github.com/gardener/gardener/pkg/apis/garden/v1beta1.Project"),
									},
								},
							},
						},
					},
				},
				Required: []string{"items"},
			},
		},
		Dependencies: []string{
			"github.com/gardener/gardener/pkg/apis/garden/v1beta1.Project", "k8s.io/apimachinery/pkg/apis/meta/v1.ListMeta"},
	}
}

func schema_pkg_apis_garden_v1beta1_ProjectSpec(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "ProjectSpec is the specification of a Project.",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"createdBy": {
						SchemaProps: spec.SchemaProps{
							Description: "CreatedBy is a subject representing a user name, an email address, or any other identifier of a user who created the project.",
							Ref:         ref("k8s.io/api/rbac/v1.Subject"),
						},
					},
					"description": {
						SchemaProps: spec.SchemaProps{
							Description: "Description is a human-readable description of what the project is used for.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"owner": {
						SchemaProps: spec.SchemaProps{
							Description: "Owner is a subject representing a user name, an email address, or any other identifier of a user owning the project.",
							Ref:         ref("k8s.io/api/rbac/v1.Subject"),
						},
					},
					"purpose": {
						SchemaProps: spec.SchemaProps{
							Description: "Purpose is a human-readable explanation of the project's purpose.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"members": {
						SchemaProps: spec.SchemaProps{
							Description: "Members is a list of subjects representing a user name, an email address, or any other identifier of a user that should be part of this project with full permissions to manage it.",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Ref: ref("k8s.io/api/rbac/v1.Subject"),
									},
								},
							},
						},
					},
					"namespace": {
						SchemaProps: spec.SchemaProps{
							Description: "Namespace is the name of the namespace that has been created for the Project object. A nil value means that Gardener will determine the name of the namespace.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"viewers": {
						SchemaProps: spec.SchemaProps{
							Description: "Viewers is a list of subjects representing a user name, an email address, or any other identifier of a user that should be part of this project with limited permissions to only view some resources.",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Ref: ref("k8s.io/api/rbac/v1.Subject"),
									},
								},
							},
						},
					},
				},
			},
		},
		Dependencies: []string{
			"k8s.io/api/rbac/v1.Subject"},
	}
}

func schema_pkg_apis_garden_v1beta1_ProjectStatus(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "ProjectStatus holds the most recently observed status of the project.",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"observedGeneration": {
						SchemaProps: spec.SchemaProps{
							Description: "ObservedGeneration is the most recent generation observed for this project.",
							Type:        []string{"integer"},
							Format:      "int64",
						},
					},
					"phase": {
						SchemaProps: spec.SchemaProps{
							Description: "Phase is the current phase of the project.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
				},
			},
		},
	}
}

func schema_pkg_apis_garden_v1beta1_Quota(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
				Properties: map[string]spec.Schema{
					"kind": {
						SchemaProps: spec.SchemaProps{
							Description: "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"apiVersion": {
						SchemaProps: spec.SchemaProps{
							Description: "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"metadata": {
						SchemaProps: spec.SchemaProps{
							Description: "Standard object metadata.",
							Ref:         ref("k8s.io/apimachinery/pkg/apis/meta/v1.ObjectMeta"),
						},
					},
					"spec": {
						SchemaProps: spec.SchemaProps{
							Description: "Spec defines the Quota constraints.",
							Ref:         ref("github.com/gardener/gardener/pkg/apis/garden/v1beta1.QuotaSpec"),
						},
					},
				},
			},
		},
		Dependencies: []string{
			"github.com/gardener/gardener/pkg/apis/garden/v1beta1.QuotaSpec", "k8s.io/apimachinery/pkg/apis/meta/v1.ObjectMeta"},
	}
}

func schema_pkg_apis_garden_v1beta1_QuotaList(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "QuotaList is a collection of Quotas.",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"kind": {
						SchemaProps: spec.SchemaProps{
							Description: "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"apiVersion": {
						SchemaProps: spec.SchemaProps{
							Description: "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"metadata": {
						SchemaProps: spec.SchemaProps{
							Description: "Standard list object metadata.",
							Ref:         ref("k8s.io/apimachinery/pkg/apis/meta/v1.ListMeta"),
						},
					},
					"items": {
						SchemaProps: spec.SchemaProps{
							Description: "Items is the list of Quotas.",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Ref: ref("github.com/gardener/gardener/pkg/apis/garden/v1beta1.Quota"),
									},
								},
							},
						},
					},
				},
				Required: []string{"items"},
			},
		},
		Dependencies: []string{
			"github.com/gardener/gardener/pkg/apis/garden/v1beta1.Quota", "k8s.io/apimachinery/pkg/apis/meta/v1.ListMeta"},
	}
}

func schema_pkg_apis_garden_v1beta1_QuotaSpec(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "QuotaSpec is the specification of a Quota.",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"clusterLifetimeDays": {
						SchemaProps: spec.SchemaProps{
							Description: "ClusterLifetimeDays is the lifetime of a Shoot cluster in days before it will be terminated automatically.",
							Type:        []string{"integer"},
							Format:      "int32",
						},
					},
					"metrics": {
						SchemaProps: spec.SchemaProps{
							Description: "Metrics is a list of resources which will be put under constraints.",
							Type:        []string{"object"},
							AdditionalProperties: &spec.SchemaOrBool{
								Allows: true,
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Ref: ref("k8s.io/apimachinery/pkg/api/resource.Quantity"),
									},
								},
							},
						},
					},
					"scope": {
						SchemaProps: spec.SchemaProps{
							Description: "Scope is the scope of the Quota object, either 'project' or 'secret'.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
				},
				Required: []string{"metrics", "scope"},
			},
		},
		Dependencies: []string{
			"k8s.io/apimachinery/pkg/api/resource.Quantity"},
	}
}

func schema_pkg_apis_garden_v1beta1_SecretBinding(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
				Properties: map[string]spec.Schema{
					"kind": {
						SchemaProps: spec.SchemaProps{
							Description: "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"apiVersion": {
						SchemaProps: spec.SchemaProps{
							Description: "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"metadata": {
						SchemaProps: spec.SchemaProps{
							Description: "Standard object metadata.",
							Ref:         ref("k8s.io/apimachinery/pkg/apis/meta/v1.ObjectMeta"),
						},
					},
					"secretRef": {
						SchemaProps: spec.SchemaProps{
							Description: "SecretRef is a reference to a secret object in the same or another namespace.",
							Ref:         ref("k8s.io/api/core/v1.SecretReference"),
						},
					},
					"quotas": {
						SchemaProps: spec.SchemaProps{
							Description: "Quotas is a list of references to Quota objects in the same or another namespace.",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Ref: ref("k8s.io/api/core/v1.ObjectReference"),
									},
								},
							},
						},
					},
				},
				Required: []string{"secretRef"},
			},
		},
		Dependencies: []string{
			"k8s.io/api/core/v1.ObjectReference", "k8s.io/api/core/v1.SecretReference", "k8s.io/apimachinery/pkg/apis/meta/v1.ObjectMeta"},
	}
}

func schema_pkg_apis_garden_v1beta1_SecretBindingList(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "SecretBindingList is a collection of SecretBindings.",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"kind": {
						SchemaProps: spec.SchemaProps{
							Description: "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"apiVersion": {
						SchemaProps: spec.SchemaProps{
							Description: "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"metadata": {
						SchemaProps: spec.SchemaProps{
							Description: "Standard list object metadata.",
							Ref:         ref("k8s.io/apimachinery/pkg/apis/meta/v1.ListMeta"),
						},
					},
					"items": {
						SchemaProps: spec.SchemaProps{
							Description: "Items is the list of SecretBindings.",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Ref: ref("github.com/gardener/gardener/pkg/apis/garden/v1beta1.SecretBinding"),
									},
								},
							},
						},
					},
				},
				Required: []string{"items"},
			},
		},
		Dependencies: []string{
			"github.com/gardener/gardener/pkg/apis/garden/v1beta1.SecretBinding", "k8s.io/apimachinery/pkg/apis/meta/v1.ListMeta"},
	}
}

func schema_pkg_apis_garden_v1beta1_Seed(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "Seed holds certain properties about a Seed cluster.",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"kind": {
						SchemaProps: spec.SchemaProps{
							Description: "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"apiVersion": {
						SchemaProps: spec.SchemaProps{
							Description: "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"metadata": {
						SchemaProps: spec.SchemaProps{
							Description: "Standard object metadata.",
							Ref:         ref("k8s.io/apimachinery/pkg/apis/meta/v1.ObjectMeta"),
						},
					},
					"spec": {
						SchemaProps: spec.SchemaProps{
							Description: "Spec defines the Seed cluster properties.",
							Ref:         ref("github.com/gardener/gardener/pkg/apis/garden/v1beta1.SeedSpec"),
						},
					},
					"status": {
						SchemaProps: spec.SchemaProps{
							Description: "Most recently observed status of the Seed cluster.",
							Ref:         ref("github.com/gardener/gardener/pkg/apis/garden/v1beta1.SeedStatus"),
						},
					},
				},
			},
		},
		Dependencies: []string{
			"github.com/gardener/gardener/pkg/apis/garden/v1beta1.SeedSpec", "github.com/gardener/gardener/pkg/apis/garden/v1beta1.SeedStatus", "k8s.io/apimachinery/pkg/apis/meta/v1.ObjectMeta"},
	}
}

func schema_pkg_apis_garden_v1beta1_SeedCloud(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "SeedCloud defines the cloud profile and the region this Seed cluster belongs to.",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"profile": {
						SchemaProps: spec.SchemaProps{
							Description: "Profile is the name of a cloud profile.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"region": {
						SchemaProps: spec.SchemaProps{
							Description: "Region is a name of a region.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
				},
				Required: []string{"profile", "region"},
			},
		},
	}
}

func schema_pkg_apis_garden_v1beta1_SeedList(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "SeedList is a collection of Seeds.",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"kind": {
						SchemaProps: spec.SchemaProps{
							Description: "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"apiVersion": {
						SchemaProps: spec.SchemaProps{
							Description: "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"metadata": {
						SchemaProps: spec.SchemaProps{
							Description: "Standard list object metadata.",
							Ref:         ref("k8s.io/apimachinery/pkg/apis/meta/v1.ListMeta"),
						},
					},
					"items": {
						SchemaProps: spec.SchemaProps{
							Description: "Items is the list of Seeds.",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Ref: ref("github.com/gardener/gardener/pkg/apis/garden/v1beta1.Seed"),
									},
								},
							},
						},
					},
				},
				Required: []string{"items"},
			},
		},
		Dependencies: []string{
			"github.com/gardener/gardener/pkg/apis/garden/v1beta1.Seed", "k8s.io/apimachinery/pkg/apis/meta/v1.ListMeta"},
	}
}

func schema_pkg_apis_garden_v1beta1_SeedNetworks(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "SeedNetworks contains CIDRs for the pod, service and node networks of a Kubernetes cluster.",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"nodes": {
						SchemaProps: spec.SchemaProps{
							Description: "Nodes is the CIDR of the node network.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"pods": {
						SchemaProps: spec.SchemaProps{
							Description: "Pods is the CIDR of the pod network.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"services": {
						SchemaProps: spec.SchemaProps{
							Description: "Services is the CIDR of the service network.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"shootDefaults": {
						SchemaProps: spec.SchemaProps{
							Description: "ShootDefaults contains the default networks CIDRs for shoots.",
							Ref:         ref("github.com/gardener/gardener/pkg/apis/garden/v1beta1.ShootNetworks"),
						},
					},
				},
				Required: []string{"pods", "services"},
			},
		},
		Dependencies: []string{
			"github.com/gardener/gardener/pkg/apis/garden/v1beta1.ShootNetworks"},
	}
}

func schema_pkg_apis_garden_v1beta1_SeedSpec(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "SeedSpec is the specification of a Seed.",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"cloud": {
						SchemaProps: spec.SchemaProps{
							Description: "Cloud defines the cloud profile and the region this Seed cluster belongs to.",
							Ref:         ref("github.com/gardener/gardener/pkg/apis/garden/v1beta1.SeedCloud"),
						},
					},
					"ingressDomain": {
						SchemaProps: spec.SchemaProps{
							Description: "IngressDomain is the domain of the Seed cluster pointing to the ingress controller endpoint. It will be used to construct ingress URLs for system applications running in Shoot clusters.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"secretRef": {
						SchemaProps: spec.SchemaProps{
							Description: "SecretRef is a reference to a Secret object containing the Kubeconfig and the cloud provider credentials for the account the Seed cluster has been deployed to.",
							Ref:         ref("k8s.io/api/core/v1.SecretReference"),
						},
					},
					"networks": {
						SchemaProps: spec.SchemaProps{
							Description: "Networks defines the pod, service and worker network of the Seed cluster.",
							Ref:         ref("github.com/gardener/gardener/pkg/apis/garden/v1beta1.SeedNetworks"),
						},
					},
					"blockCIDRs": {
						SchemaProps: spec.SchemaProps{
							Description: "BlockCIDRs is a list of network addresses that should be blocked for shoot control plane components running in the seed cluster.",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Type:   []string{"string"},
										Format: "",
									},
								},
							},
						},
					},
					"visible": {
						SchemaProps: spec.SchemaProps{
							Description: "Visible labels the Seed cluster as selectable for the seedfinder admission controller.",
							Type:        []string{"boolean"},
							Format:      "",
						},
					},
					"protected": {
						SchemaProps: spec.SchemaProps{
							Description: "Protected prevent that the Seed Cluster can be used for regular Shoot cluster control planes.",
							Type:        []string{"boolean"},
							Format:      "",
						},
					},
					"backup": {
						SchemaProps: spec.SchemaProps{
							Description: "Backup holds the object store configuration for the backups of shoot(currently only etcd). If it is not specified, then there won't be any backups taken for Shoots associated with this Seed. If backup field is present in Seed, then backups of the etcd from Shoot controlplane will be stored under the configured object store.",
							Ref:         ref("github.com/gardener/gardener/pkg/apis/garden/v1beta1.BackupProfile"),
						},
					},
				},
				Required: []string{"cloud", "ingressDomain", "networks"},
			},
		},
		Dependencies: []string{
			"github.com/gardener/gardener/pkg/apis/garden/v1beta1.BackupProfile", "github.com/gardener/gardener/pkg/apis/garden/v1beta1.SeedCloud", "github.com/gardener/gardener/pkg/apis/garden/v1beta1.SeedNetworks", "k8s.io/api/core/v1.SecretReference"},
	}
}

func schema_pkg_apis_garden_v1beta1_SeedStatus(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "SeedStatus holds the most recently observed status of the Seed cluster.",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"conditions": {
						VendorExtensible: spec.VendorExtensible{
							Extensions: spec.Extensions{
								"x-kubernetes-patch-merge-key": "type",
								"x-kubernetes-patch-strategy":  "merge",
							},
						},
						SchemaProps: spec.SchemaProps{
							Description: "Conditions represents the latest available observations of a Seed's current state.",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Ref: ref("github.com/gardener/gardener/pkg/apis/core/v1alpha1.Condition"),
									},
								},
							},
						},
					},
					"gardener": {
						SchemaProps: spec.SchemaProps{
							Description: "Gardener holds information about the Gardener which last acted on the Seed.",
							Ref:         ref("github.com/gardener/gardener/pkg/apis/garden/v1beta1.Gardener"),
						},
					},
					"kubernetesVersion": {
						SchemaProps: spec.SchemaProps{
							Description: "KubernetesVersion is the Kubernetes version of the seed cluster.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"observedGeneration": {
						SchemaProps: spec.SchemaProps{
							Description: "ObservedGeneration is the most recent generation observed for this Seed. It corresponds to the Seed's generation, which is updated on mutation by the API Server.",
							Type:        []string{"integer"},
							Format:      "int64",
						},
					},
				},
			},
		},
		Dependencies: []string{
			"github.com/gardener/gardener/pkg/apis/core/v1alpha1.Condition", "github.com/gardener/gardener/pkg/apis/garden/v1beta1.Gardener"},
	}
}

func schema_pkg_apis_garden_v1beta1_ServiceAccountConfig(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "ServiceAccountConfig is the kube-apiserver configuration for service accounts.",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"issuer": {
						SchemaProps: spec.SchemaProps{
							Description: "Issuer is the identifier of the service account token issuer. The issuer will assert this identifier in \"iss\" claim of issued tokens. This value is a string or URI.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"signingKeySecretName": {
						SchemaProps: spec.SchemaProps{
							Description: "SigningKeySecret is a reference to a secret that contains the current private key of the service account token issuer. The issuer will sign issued ID tokens with this private key. (Requires the 'TokenRequest' feature gate.)",
							Ref:         ref("k8s.io/api/core/v1.LocalObjectReference"),
						},
					},
				},
			},
		},
		Dependencies: []string{
			"k8s.io/api/core/v1.LocalObjectReference"},
	}
}

func schema_pkg_apis_garden_v1beta1_Shoot(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
				Properties: map[string]spec.Schema{
					"kind": {
						SchemaProps: spec.SchemaProps{
							Description: "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"apiVersion": {
						SchemaProps: spec.SchemaProps{
							Description: "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"metadata": {
						SchemaProps: spec.SchemaProps{
							Description: "Standard object metadata.",
							Ref:         ref("k8s.io/apimachinery/pkg/apis/meta/v1.ObjectMeta"),
						},
					},
					"spec": {
						SchemaProps: spec.SchemaProps{
							Description: "Specification of the Shoot cluster.",
							Ref:         ref("github.com/gardener/gardener/pkg/apis/garden/v1beta1.ShootSpec"),
						},
					},
					"status": {
						SchemaProps: spec.SchemaProps{
							Description: "Most recently observed status of the Shoot cluster.",
							Ref:         ref("github.com/gardener/gardener/pkg/apis/garden/v1beta1.ShootStatus"),
						},
					},
				},
			},
		},
		Dependencies: []string{
			"github.com/gardener/gardener/pkg/apis/garden/v1beta1.ShootSpec", "github.com/gardener/gardener/pkg/apis/garden/v1beta1.ShootStatus", "k8s.io/apimachinery/pkg/apis/meta/v1.ObjectMeta"},
	}
}

func schema_pkg_apis_garden_v1beta1_ShootList(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "ShootList is a list of Shoot objects.",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"kind": {
						SchemaProps: spec.SchemaProps{
							Description: "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"apiVersion": {
						SchemaProps: spec.SchemaProps{
							Description: "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"metadata": {
						SchemaProps: spec.SchemaProps{
							Description: "Standard list object metadata.",
							Ref:         ref("k8s.io/apimachinery/pkg/apis/meta/v1.ListMeta"),
						},
					},
					"items": {
						SchemaProps: spec.SchemaProps{
							Description: "Items is the list of Shoots.",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Ref: ref("github.com/gardener/gardener/pkg/apis/garden/v1beta1.Shoot"),
									},
								},
							},
						},
					},
				},
				Required: []string{"items"},
			},
		},
		Dependencies: []string{
			"github.com/gardener/gardener/pkg/apis/garden/v1beta1.Shoot", "k8s.io/apimachinery/pkg/apis/meta/v1.ListMeta"},
	}
}

func schema_pkg_apis_garden_v1beta1_ShootMachineImage(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "MachineImage defines the name and the version of the shoot's machine image in any environment. Has to be defined in the respective CloudProfile.",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"name": {
						SchemaProps: spec.SchemaProps{
							Description: "Name is the name of the image.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"version": {
						SchemaProps: spec.SchemaProps{
							Description: "Version is the version of the shoot's image.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"providerConfig": {
						SchemaProps: spec.SchemaProps{
							Description: "ProviderConfig is the shoot's individual configuration passed to an extension resource.",
							Ref:         ref("github.com/gardener/gardener/pkg/apis/core/v1alpha1.ProviderConfig"),
						},
					},
				},
				Required: []string{"name", "version"},
			},
		},
		Dependencies: []string{
			"github.com/gardener/gardener/pkg/apis/core/v1alpha1.ProviderConfig"},
	}
}

func schema_pkg_apis_garden_v1beta1_ShootNetworks(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "ShootNetworks contains the default networks CIDRs for shoots.",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"pods": {
						SchemaProps: spec.SchemaProps{
							Description: "Pods is the CIDR of the pod network.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"services": {
						SchemaProps: spec.SchemaProps{
							Description: "Services is the CIDR of the service network.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
				},
			},
		},
	}
}

func schema_pkg_apis_garden_v1beta1_ShootSpec(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "ShootSpec is the specification of a Shoot.",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"addons": {
						SchemaProps: spec.SchemaProps{
							Description: "Addons contains information about enabled/disabled addons and their configuration.",
							Ref:         ref("github.com/gardener/gardener/pkg/apis/garden/v1beta1.Addons"),
						},
					},
					"cloud": {
						SchemaProps: spec.SchemaProps{
							Description: "Cloud contains information about the cloud environment and their specific settings.",
							Ref:         ref("github.com/gardener/gardener/pkg/apis/garden/v1beta1.Cloud"),
						},
					},
					"dns": {
						SchemaProps: spec.SchemaProps{
							Description: "DNS contains information about the DNS settings of the Shoot.",
							Ref:         ref("github.com/gardener/gardener/pkg/apis/garden/v1beta1.DNS"),
						},
					},
					"extensions": {
						SchemaProps: spec.SchemaProps{
							Description: "Extensions contain type and provider information for Shoot extensions.",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Ref: ref("github.com/gardener/gardener/pkg/apis/garden/v1beta1.Extension"),
									},
								},
							},
						},
					},
					"hibernation": {
						SchemaProps: spec.SchemaProps{
							Description: "Hibernation contains information whether the Shoot is suspended or not.",
							Ref:         ref("github.com/gardener/gardener/pkg/apis/garden/v1beta1.Hibernation"),
						},
					},
					"kubernetes": {
						SchemaProps: spec.SchemaProps{
							Description: "Kubernetes contains the version and configuration settings of the control plane components.",
							Ref:         ref("github.com/gardener/gardener/pkg/apis/garden/v1beta1.Kubernetes"),
						},
					},
					"networking": {
						SchemaProps: spec.SchemaProps{
							Description: "Networking contains information about cluster networking such as CNI Plugin type, CIDRs, ...etc.",
							Ref:         ref("github.com/gardener/gardener/pkg/apis/garden/v1beta1.Networking"),
						},
					},
					"maintenance": {
						SchemaProps: spec.SchemaProps{
							Description: "Maintenance contains information about the time window for maintenance operations and which operations should be performed.",
							Ref:         ref("github.com/gardener/gardener/pkg/apis/garden/v1beta1.Maintenance"),
						},
					},
					"monitoring": {
						SchemaProps: spec.SchemaProps{
							Description: "Monitoring contains information about custom monitoring configurations for the shoot.",
							Ref:         ref("github.com/gardener/gardener/pkg/apis/garden/v1beta1.Monitoring"),
						},
					},
				},
				Required: []string{"cloud", "kubernetes"},
			},
		},
		Dependencies: []string{
			"github.com/gardener/gardener/pkg/apis/garden/v1beta1.Addons", "github.com/gardener/gardener/pkg/apis/garden/v1beta1.Cloud", "github.com/gardener/gardener/pkg/apis/garden/v1beta1.DNS", "github.com/gardener/gardener/pkg/apis/garden/v1beta1.Extension", "github.com/gardener/gardener/pkg/apis/garden/v1beta1.Hibernation", "github.com/gardener/gardener/pkg/apis/garden/v1beta1.Kubernetes", "github.com/gardener/gardener/pkg/apis/garden/v1beta1.Maintenance", "github.com/gardener/gardener/pkg/apis/garden/v1beta1.Monitoring", "github.com/gardener/gardener/pkg/apis/garden/v1beta1.Networking"},
	}
}

func schema_pkg_apis_garden_v1beta1_ShootStatus(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "ShootStatus holds the most recently observed status of the Shoot cluster.",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"conditions": {
						VendorExtensible: spec.VendorExtensible{
							Extensions: spec.Extensions{
								"x-kubernetes-patch-merge-key": "type",
								"x-kubernetes-patch-strategy":  "merge",
							},
						},
						SchemaProps: spec.SchemaProps{
							Description: "Conditions represents the latest available observations of a Shoots's current state.",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Ref: ref("github.com/gardener/gardener/pkg/apis/core/v1alpha1.Condition"),
									},
								},
							},
						},
					},
					"constraints": {
						VendorExtensible: spec.VendorExtensible{
							Extensions: spec.Extensions{
								"x-kubernetes-patch-merge-key": "type",
								"x-kubernetes-patch-strategy":  "merge",
							},
						},
						SchemaProps: spec.SchemaProps{
							Description: "Constraints represents conditions of a Shoot's current state that constraint some operations on it.",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Ref: ref("github.com/gardener/gardener/pkg/apis/core/v1alpha1.Condition"),
									},
								},
							},
						},
					},
					"gardener": {
						SchemaProps: spec.SchemaProps{
							Description: "Gardener holds information about the Gardener which last acted on the Shoot.",
							Ref:         ref("github.com/gardener/gardener/pkg/apis/garden/v1beta1.Gardener"),
						},
					},
					"lastOperation": {
						SchemaProps: spec.SchemaProps{
							Description: "LastOperation holds information about the last operation on the Shoot.",
							Ref:         ref("github.com/gardener/gardener/pkg/apis/core/v1alpha1.LastOperation"),
						},
					},
					"lastError": {
						SchemaProps: spec.SchemaProps{
							Description: "LastError holds information about the last occurred error during an operation.",
							Ref:         ref("github.com/gardener/gardener/pkg/apis/core/v1alpha1.LastError"),
						},
					},
					"lastErrors": {
						SchemaProps: spec.SchemaProps{
							Description: "LastErrors holds information about the last occurred error(s) during an operation.",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Ref: ref("github.com/gardener/gardener/pkg/apis/core/v1alpha1.LastError"),
									},
								},
							},
						},
					},
					"observedGeneration": {
						SchemaProps: spec.SchemaProps{
							Description: "ObservedGeneration is the most recent generation observed for this Shoot. It corresponds to the Shoot's generation, which is updated on mutation by the API Server.",
							Type:        []string{"integer"},
							Format:      "int64",
						},
					},
					"retryCycleStartTime": {
						SchemaProps: spec.SchemaProps{
							Description: "RetryCycleStartTime is the start time of the last retry cycle (used to determine how often an operation must be retried until we give up).",
							Ref:         ref("k8s.io/apimachinery/pkg/apis/meta/v1.Time"),
						},
					},
					"seed": {
						SchemaProps: spec.SchemaProps{
							Description: "Seed is the name of the seed cluster that runs the control plane of the Shoot. This value is only written after a successful create/reconcile operation. It will be used when control planes are moved between Seeds.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"hibernated": {
						SchemaProps: spec.SchemaProps{
							Description: "IsHibernated indicates whether the Shoot is currently hibernated.",
							Type:        []string{"boolean"},
							Format:      "",
						},
					},
					"technicalID": {
						SchemaProps: spec.SchemaProps{
							Description: "TechnicalID is the name that is used for creating the Seed namespace, the infrastructure resources, and basically everything that is related to this particular Shoot.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"uid": {
						SchemaProps: spec.SchemaProps{
							Description: "UID is a unique identifier for the Shoot cluster to avoid portability between Kubernetes clusters. It is used to compute unique hashes.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
				},
				Required: []string{"gardener", "technicalID", "uid"},
			},
		},
		Dependencies: []string{
			"github.com/gardener/gardener/pkg/apis/core/v1alpha1.Condition", "github.com/gardener/gardener/pkg/apis/core/v1alpha1.LastError", "github.com/gardener/gardener/pkg/apis/core/v1alpha1.LastOperation", "github.com/gardener/gardener/pkg/apis/garden/v1beta1.Gardener", "k8s.io/apimachinery/pkg/apis/meta/v1.Time"},
	}
}

func schema_pkg_apis_garden_v1beta1_VolumeType(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "VolumeType contains certain properties of a volume type.",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"name": {
						SchemaProps: spec.SchemaProps{
							Description: "Name is the name of the volume type.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"usable": {
						SchemaProps: spec.SchemaProps{
							Description: "Usable defines if the volume type can be used for shoot clusters.",
							Type:        []string{"boolean"},
							Format:      "",
						},
					},
					"class": {
						SchemaProps: spec.SchemaProps{
							Description: "Class is the class of the volume type.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
				},
				Required: []string{"name", "class"},
			},
		},
	}
}

func schema_pkg_apis_garden_v1beta1_Worker(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "Worker is the base definition of a worker group.",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"name": {
						SchemaProps: spec.SchemaProps{
							Description: "Name is the name of the worker group.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"machineType": {
						SchemaProps: spec.SchemaProps{
							Description: "MachineType is the machine type of the worker group.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"machineImage": {
						SchemaProps: spec.SchemaProps{
							Description: "ShootMachineImage holds information about the machine image to use for all workers. It will default to the latest version of the first image stated in the referenced CloudProfile if no value has been provided.",
							Ref:         ref("github.com/gardener/gardener/pkg/apis/garden/v1beta1.ShootMachineImage"),
						},
					},
					"autoScalerMin": {
						SchemaProps: spec.SchemaProps{
							Description: "AutoScalerMin is the minimum number of VMs to create.",
							Type:        []string{"integer"},
							Format:      "int32",
						},
					},
					"autoScalerMax": {
						SchemaProps: spec.SchemaProps{
							Description: "AutoScalerMin is the maximum number of VMs to create.",
							Type:        []string{"integer"},
							Format:      "int32",
						},
					},
					"maxSurge": {
						SchemaProps: spec.SchemaProps{
							Description: "MaxSurge is maximum number of VMs that are created during an update.",
							Ref:         ref("k8s.io/apimachinery/pkg/util/intstr.IntOrString"),
						},
					},
					"maxUnavailable": {
						SchemaProps: spec.SchemaProps{
							Description: "MaxUnavailable is the maximum number of VMs that can be unavailable during an update.",
							Ref:         ref("k8s.io/apimachinery/pkg/util/intstr.IntOrString"),
						},
					},
					"annotations": {
						SchemaProps: spec.SchemaProps{
							Description: "Annotations is a map of key/value pairs for annotations for all the `Node` objects in this worker pool.",
							Type:        []string{"object"},
							AdditionalProperties: &spec.SchemaOrBool{
								Allows: true,
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Type:   []string{"string"},
										Format: "",
									},
								},
							},
						},
					},
					"labels": {
						SchemaProps: spec.SchemaProps{
							Description: "Labels is a map of key/value pairs for labels for all the `Node` objects in this worker pool.",
							Type:        []string{"object"},
							AdditionalProperties: &spec.SchemaOrBool{
								Allows: true,
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Type:   []string{"string"},
										Format: "",
									},
								},
							},
						},
					},
					"taints": {
						SchemaProps: spec.SchemaProps{
							Description: "Taints is a list of taints for all the `Node` objects in this worker pool.",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Ref: ref("k8s.io/api/core/v1.Taint"),
									},
								},
							},
						},
					},
					"kubelet": {
						SchemaProps: spec.SchemaProps{
							Description: "Kubelet contains configuration settings for the kubelet.",
							Ref:         ref("github.com/gardener/gardener/pkg/apis/garden/v1beta1.KubeletConfig"),
						},
					},
					"caBundle": {
						SchemaProps: spec.SchemaProps{
							Description: "CABundle is a certificate bundle which will be installed onto every machine of this worker pool.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
				},
				Required: []string{"name", "machineType", "autoScalerMin", "autoScalerMax"},
			},
		},
		Dependencies: []string{
			"github.com/gardener/gardener/pkg/apis/garden/v1beta1.KubeletConfig", "github.com/gardener/gardener/pkg/apis/garden/v1beta1.ShootMachineImage", "k8s.io/api/core/v1.Taint", "k8s.io/apimachinery/pkg/util/intstr.IntOrString"},
	}
}

func schema_pkg_apis_garden_v1beta1_Zone(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "Zone contains certain properties of an availability zone.",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"region": {
						SchemaProps: spec.SchemaProps{
							Description: "Region is a region name.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"names": {
						SchemaProps: spec.SchemaProps{
							Description: "Names is a list of availability zone names in this region.",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Type:   []string{"string"},
										Format: "",
									},
								},
							},
						},
					},
				},
				Required: []string{"region"},
			},
		},
	}
}

func schema_pkg_apis_meta_v1_APIGroup(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "APIGroup contains the name, the supported versions, and the preferred version of a group.",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"kind": {
						SchemaProps: spec.SchemaProps{
							Description: "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"apiVersion": {
						SchemaProps: spec.SchemaProps{
							Description: "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"name": {
						SchemaProps: spec.SchemaProps{
							Description: "name is the name of the group.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"versions": {
						SchemaProps: spec.SchemaProps{
							Description: "versions are the versions supported in this group.",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Ref: ref("k8s.io/apimachinery/pkg/apis/meta/v1.GroupVersionForDiscovery"),
									},
								},
							},
						},
					},
					"preferredVersion": {
						SchemaProps: spec.SchemaProps{
							Description: "preferredVersion is the version preferred by the API server, which probably is the storage version.",
							Ref:         ref("k8s.io/apimachinery/pkg/apis/meta/v1.GroupVersionForDiscovery"),
						},
					},
					"serverAddressByClientCIDRs": {
						SchemaProps: spec.SchemaProps{
							Description: "a map of client CIDR to server address that is serving this group. This is to help clients reach servers in the most network-efficient way possible. Clients can use the appropriate server address as per the CIDR that they match. In case of multiple matches, clients should use the longest matching CIDR. The server returns only those CIDRs that it thinks that the client can match. For example: the master will return an internal IP CIDR only, if the client reaches the server using an internal IP. Server looks at X-Forwarded-For header or X-Real-Ip header or request.RemoteAddr (in that order) to get the client IP.",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Ref: ref("k8s.io/apimachinery/pkg/apis/meta/v1.ServerAddressByClientCIDR"),
									},
								},
							},
						},
					},
				},
				Required: []string{"name", "versions"},
			},
		},
		Dependencies: []string{
			"k8s.io/apimachinery/pkg/apis/meta/v1.GroupVersionForDiscovery", "k8s.io/apimachinery/pkg/apis/meta/v1.ServerAddressByClientCIDR"},
	}
}

func schema_pkg_apis_meta_v1_APIGroupList(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "APIGroupList is a list of APIGroup, to allow clients to discover the API at /apis.",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"kind": {
						SchemaProps: spec.SchemaProps{
							Description: "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"apiVersion": {
						SchemaProps: spec.SchemaProps{
							Description: "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"groups": {
						SchemaProps: spec.SchemaProps{
							Description: "groups is a list of APIGroup.",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Ref: ref("k8s.io/apimachinery/pkg/apis/meta/v1.APIGroup"),
									},
								},
							},
						},
					},
				},
				Required: []string{"groups"},
			},
		},
		Dependencies: []string{
			"k8s.io/apimachinery/pkg/apis/meta/v1.APIGroup"},
	}
}

func schema_pkg_apis_meta_v1_APIResource(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "APIResource specifies the name of a resource and whether it is namespaced.",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"name": {
						SchemaProps: spec.SchemaProps{
							Description: "name is the plural name of the resource.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"singularName": {
						SchemaProps: spec.SchemaProps{
							Description: "singularName is the singular name of the resource.  This allows clients to handle plural and singular opaquely. The singularName is more correct for reporting status on a single item and both singular and plural are allowed from the kubectl CLI interface.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"namespaced": {
						SchemaProps: spec.SchemaProps{
							Description: "namespaced indicates if a resource is namespaced or not.",
							Type:        []string{"boolean"},
							Format:      "",
						},
					},
					"group": {
						SchemaProps: spec.SchemaProps{
							Description: "group is the preferred group of the resource.  Empty implies the group of the containing resource list. For subresources, this may have a different value, for example: Scale\".",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"version": {
						SchemaProps: spec.SchemaProps{
							Description: "version is the preferred version of the resource.  Empty implies the version of the containing resource list For subresources, this may have a different value, for example: v1 (while inside a v1beta1 version of the core resource's group)\".",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"kind": {
						SchemaProps: spec.SchemaProps{
							Description: "kind is the kind for the resource (e.g. 'Foo' is the kind for a resource 'foo')",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"verbs": {
						SchemaProps: spec.SchemaProps{
							Description: "verbs is a list of supported kube verbs (this includes get, list, watch, create, update, patch, delete, deletecollection, and proxy)",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Type:   []string{"string"},
										Format: "",
									},
								},
							},
						},
					},
					"shortNames": {
						SchemaProps: spec.SchemaProps{
							Description: "shortNames is a list of suggested short names of the resource.",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Type:   []string{"string"},
										Format: "",
									},
								},
							},
						},
					},
					"categories": {
						SchemaProps: spec.SchemaProps{
							Description: "categories is a list of the grouped resources this resource belongs to (e.g. 'all')",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Type:   []string{"string"},
										Format: "",
									},
								},
							},
						},
					},
					"storageVersionHash": {
						SchemaProps: spec.SchemaProps{
							Description: "The hash value of the storage version, the version this resource is converted to when written to the data store. Value must be treated as opaque by clients. Only equality comparison on the value is valid. This is an alpha feature and may change or be removed in the future. The field is populated by the apiserver only if the StorageVersionHash feature gate is enabled. This field will remain optional even if it graduates.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
				},
				Required: []string{"name", "singularName", "namespaced", "kind", "verbs"},
			},
		},
	}
}

func schema_pkg_apis_meta_v1_APIResourceList(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "APIResourceList is a list of APIResource, it is used to expose the name of the resources supported in a specific group and version, and if the resource is namespaced.",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"kind": {
						SchemaProps: spec.SchemaProps{
							Description: "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"apiVersion": {
						SchemaProps: spec.SchemaProps{
							Description: "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"groupVersion": {
						SchemaProps: spec.SchemaProps{
							Description: "groupVersion is the group and version this APIResourceList is for.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"resources": {
						SchemaProps: spec.SchemaProps{
							Description: "resources contains the name of the resources and if they are namespaced.",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Ref: ref("k8s.io/apimachinery/pkg/apis/meta/v1.APIResource"),
									},
								},
							},
						},
					},
				},
				Required: []string{"groupVersion", "resources"},
			},
		},
		Dependencies: []string{
			"k8s.io/apimachinery/pkg/apis/meta/v1.APIResource"},
	}
}

func schema_pkg_apis_meta_v1_APIVersions(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "APIVersions lists the versions that are available, to allow clients to discover the API at /api, which is the root path of the legacy v1 API.",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"kind": {
						SchemaProps: spec.SchemaProps{
							Description: "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"apiVersion": {
						SchemaProps: spec.SchemaProps{
							Description: "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"versions": {
						SchemaProps: spec.SchemaProps{
							Description: "versions are the api versions that are available.",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Type:   []string{"string"},
										Format: "",
									},
								},
							},
						},
					},
					"serverAddressByClientCIDRs": {
						SchemaProps: spec.SchemaProps{
							Description: "a map of client CIDR to server address that is serving this group. This is to help clients reach servers in the most network-efficient way possible. Clients can use the appropriate server address as per the CIDR that they match. In case of multiple matches, clients should use the longest matching CIDR. The server returns only those CIDRs that it thinks that the client can match. For example: the master will return an internal IP CIDR only, if the client reaches the server using an internal IP. Server looks at X-Forwarded-For header or X-Real-Ip header or request.RemoteAddr (in that order) to get the client IP.",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Ref: ref("k8s.io/apimachinery/pkg/apis/meta/v1.ServerAddressByClientCIDR"),
									},
								},
							},
						},
					},
				},
				Required: []string{"versions", "serverAddressByClientCIDRs"},
			},
		},
		Dependencies: []string{
			"k8s.io/apimachinery/pkg/apis/meta/v1.ServerAddressByClientCIDR"},
	}
}

func schema_pkg_apis_meta_v1_CreateOptions(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "CreateOptions may be provided when creating an API object.",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"kind": {
						SchemaProps: spec.SchemaProps{
							Description: "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"apiVersion": {
						SchemaProps: spec.SchemaProps{
							Description: "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"dryRun": {
						SchemaProps: spec.SchemaProps{
							Description: "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Type:   []string{"string"},
										Format: "",
									},
								},
							},
						},
					},
					"fieldManager": {
						SchemaProps: spec.SchemaProps{
							Description: "fieldManager is a name associated with the actor or entity that is making these changes. The value must be less than or 128 characters long, and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
				},
			},
		},
	}
}

func schema_pkg_apis_meta_v1_DeleteOptions(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "DeleteOptions may be provided when deleting an API object.",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"kind": {
						SchemaProps: spec.SchemaProps{
							Description: "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"apiVersion": {
						SchemaProps: spec.SchemaProps{
							Description: "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"gracePeriodSeconds": {
						SchemaProps: spec.SchemaProps{
							Description: "The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately.",
							Type:        []string{"integer"},
							Format:      "int64",
						},
					},
					"preconditions": {
						SchemaProps: spec.SchemaProps{
							Description: "Must be fulfilled before a deletion is carried out. If not possible, a 409 Conflict status will be returned.",
							Ref:         ref("k8s.io/apimachinery/pkg/apis/meta/v1.Preconditions"),
						},
					},
					"orphanDependents": {
						SchemaProps: spec.SchemaProps{
							Description: "Deprecated: please use the PropagationPolicy, this field will be deprecated in 1.7. Should the dependent objects be orphaned. If true/false, the \"orphan\" finalizer will be added to/removed from the object's finalizers list. Either this field or PropagationPolicy may be set, but not both.",
							Type:        []string{"boolean"},
							Format:      "",
						},
					},
					"propagationPolicy": {
						SchemaProps: spec.SchemaProps{
							Description: "Whether and how garbage collection will be performed. Either this field or OrphanDependents may be set, but not both. The default policy is decided by the existing finalizer set in the metadata.finalizers and the resource-specific default policy. Acceptable values are: 'Orphan' - orphan the dependents; 'Background' - allow the garbage collector to delete the dependents in the background; 'Foreground' - a cascading policy that deletes all dependents in the foreground.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"dryRun": {
						SchemaProps: spec.SchemaProps{
							Description: "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Type:   []string{"string"},
										Format: "",
									},
								},
							},
						},
					},
				},
			},
		},
		Dependencies: []string{
			"k8s.io/apimachinery/pkg/apis/meta/v1.Preconditions"},
	}
}

func schema_pkg_apis_meta_v1_Duration(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "Duration is a wrapper around time.Duration which supports correct marshaling to YAML and JSON. In particular, it marshals into strings, which can be used as map keys in json.",
				Type:        v1.Duration{}.OpenAPISchemaType(),
				Format:      v1.Duration{}.OpenAPISchemaFormat(),
			},
		},
	}
}

func schema_pkg_apis_meta_v1_ExportOptions(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "ExportOptions is the query options to the standard REST get call. Deprecated. Planned for removal in 1.18.",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"kind": {
						SchemaProps: spec.SchemaProps{
							Description: "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"apiVersion": {
						SchemaProps: spec.SchemaProps{
							Description: "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"export": {
						SchemaProps: spec.SchemaProps{
							Description: "Should this value be exported.  Export strips fields that a user can not specify. Deprecated. Planned for removal in 1.18.",
							Type:        []string{"boolean"},
							Format:      "",
						},
					},
					"exact": {
						SchemaProps: spec.SchemaProps{
							Description: "Should the export be exact.  Exact export maintains cluster-specific fields like 'Namespace'. Deprecated. Planned for removal in 1.18.",
							Type:        []string{"boolean"},
							Format:      "",
						},
					},
				},
				Required: []string{"export", "exact"},
			},
		},
	}
}

func schema_pkg_apis_meta_v1_FieldsV1(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "FieldsV1 stores a set of fields in a data structure like a Trie, in JSON format.\n\nEach key is either a '.' representing the field itself, and will always map to an empty set, or a string representing a sub-field or item. The string will follow one of these four formats: 'f:<name>', where <name> is the name of a field in a struct, or key in a map 'v:<value>', where <value> is the exact json formatted value of a list item 'i:<index>', where <index> is position of a item in a list 'k:<keys>', where <keys> is a map of  a list item's key fields to their unique values If a key maps to an empty Fields value, the field that key represents is part of the set.\n\nThe exact format is defined in sigs.k8s.io/structured-merge-diff",
				Type:        []string{"object"},
			},
		},
	}
}

func schema_pkg_apis_meta_v1_GetOptions(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "GetOptions is the standard query options to the standard REST get call.",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"kind": {
						SchemaProps: spec.SchemaProps{
							Description: "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"apiVersion": {
						SchemaProps: spec.SchemaProps{
							Description: "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"resourceVersion": {
						SchemaProps: spec.SchemaProps{
							Description: "When specified: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
				},
			},
		},
	}
}

func schema_pkg_apis_meta_v1_GroupKind(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "GroupKind specifies a Group and a Kind, but does not force a version.  This is useful for identifying concepts during lookup stages without having partially valid types",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"group": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"kind": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
				},
				Required: []string{"group", "kind"},
			},
		},
	}
}

func schema_pkg_apis_meta_v1_GroupResource(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "GroupResource specifies a Group and a Resource, but does not force a version.  This is useful for identifying concepts during lookup stages without having partially valid types",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"group": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"resource": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
				},
				Required: []string{"group", "resource"},
			},
		},
	}
}

func schema_pkg_apis_meta_v1_GroupVersion(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "GroupVersion contains the \"group\" and the \"version\", which uniquely identifies the API.",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"group": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"version": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
				},
				Required: []string{"group", "version"},
			},
		},
	}
}

func schema_pkg_apis_meta_v1_GroupVersionForDiscovery(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "GroupVersion contains the \"group/version\" and \"version\" string of a version. It is made a struct to keep extensibility.",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"groupVersion": {
						SchemaProps: spec.SchemaProps{
							Description: "groupVersion specifies the API group and version in the form \"group/version\"",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"version": {
						SchemaProps: spec.SchemaProps{
							Description: "version specifies the version in the form of \"version\". This is to save the clients the trouble of splitting the GroupVersion.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
				},
				Required: []string{"groupVersion", "version"},
			},
		},
	}
}

func schema_pkg_apis_meta_v1_GroupVersionKind(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "GroupVersionKind unambiguously identifies a kind.  It doesn't anonymously include GroupVersion to avoid automatic coersion.  It doesn't use a GroupVersion to avoid custom marshalling",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"group": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"version": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"kind": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
				},
				Required: []string{"group", "version", "kind"},
			},
		},
	}
}

func schema_pkg_apis_meta_v1_GroupVersionResource(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "GroupVersionResource unambiguously identifies a resource.  It doesn't anonymously include GroupVersion to avoid automatic coersion.  It doesn't use a GroupVersion to avoid custom marshalling",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"group": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"version": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"resource": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
				},
				Required: []string{"group", "version", "resource"},
			},
		},
	}
}

func schema_pkg_apis_meta_v1_InternalEvent(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "InternalEvent makes watch.Event versioned",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"Type": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"Object": {
						SchemaProps: spec.SchemaProps{
							Description: "Object is:\n * If Type is Added or Modified: the new state of the object.\n * If Type is Deleted: the state of the object immediately before deletion.\n * If Type is Bookmark: the object (instance of a type being watched) where\n   only ResourceVersion field is set. On successful restart of watch from a\n   bookmark resourceVersion, client is guaranteed to not get repeat event\n   nor miss any events.\n * If Type is Error: *api.Status is recommended; other types may make sense\n   depending on context.",
							Ref:         ref("k8s.io/apimachinery/pkg/runtime.Object"),
						},
					},
				},
				Required: []string{"Type", "Object"},
			},
		},
		Dependencies: []string{
			"k8s.io/apimachinery/pkg/runtime.Object"},
	}
}

func schema_pkg_apis_meta_v1_LabelSelector(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "A label selector is a label query over a set of resources. The result of matchLabels and matchExpressions are ANDed. An empty label selector matches all objects. A null label selector matches no objects.",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"matchLabels": {
						SchemaProps: spec.SchemaProps{
							Description: "matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \"key\", the operator is \"In\", and the values array contains only \"value\". The requirements are ANDed.",
							Type:        []string{"object"},
							AdditionalProperties: &spec.SchemaOrBool{
								Allows: true,
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Type:   []string{"string"},
										Format: "",
									},
								},
							},
						},
					},
					"matchExpressions": {
						SchemaProps: spec.SchemaProps{
							Description: "matchExpressions is a list of label selector requirements. The requirements are ANDed.",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Ref: ref("k8s.io/apimachinery/pkg/apis/meta/v1.LabelSelectorRequirement"),
									},
								},
							},
						},
					},
				},
			},
		},
		Dependencies: []string{
			"k8s.io/apimachinery/pkg/apis/meta/v1.LabelSelectorRequirement"},
	}
}

func schema_pkg_apis_meta_v1_LabelSelectorRequirement(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"key": {
						VendorExtensible: spec.VendorExtensible{
							Extensions: spec.Extensions{
								"x-kubernetes-patch-merge-key": "key",
								"x-kubernetes-patch-strategy":  "merge",
							},
						},
						SchemaProps: spec.SchemaProps{
							Description: "key is the label key that the selector applies to.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"operator": {
						SchemaProps: spec.SchemaProps{
							Description: "operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"values": {
						SchemaProps: spec.SchemaProps{
							Description: "values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Type:   []string{"string"},
										Format: "",
									},
								},
							},
						},
					},
				},
				Required: []string{"key", "operator"},
			},
		},
	}
}

func schema_pkg_apis_meta_v1_List(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "List holds a list of objects, which may not be known by the server.",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"kind": {
						SchemaProps: spec.SchemaProps{
							Description: "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"apiVersion": {
						SchemaProps: spec.SchemaProps{
							Description: "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"metadata": {
						SchemaProps: spec.SchemaProps{
							Description: "Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
							Ref:         ref("k8s.io/apimachinery/pkg/apis/meta/v1.ListMeta"),
						},
					},
					"items": {
						SchemaProps: spec.SchemaProps{
							Description: "List of objects",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Ref: ref("k8s.io/apimachinery/pkg/runtime.RawExtension"),
									},
								},
							},
						},
					},
				},
				Required: []string{"items"},
			},
		},
		Dependencies: []string{
			"k8s.io/apimachinery/pkg/apis/meta/v1.ListMeta", "k8s.io/apimachinery/pkg/runtime.RawExtension"},
	}
}

func schema_pkg_apis_meta_v1_ListMeta(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "ListMeta describes metadata that synthetic resources must have, including lists and various status objects. A resource may have only one of {ObjectMeta, ListMeta}.",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"selfLink": {
						SchemaProps: spec.SchemaProps{
							Description: "selfLink is a URL representing this object. Populated by the system. Read-only.\n\nDEPRECATED Kubernetes will stop propagating this field in 1.20 release and the field is planned to be removed in 1.21 release.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"resourceVersion": {
						SchemaProps: spec.SchemaProps{
							Description: "String that identifies the server's internal version of this object that can be used by clients to determine when objects have changed. Value must be treated as opaque by clients and passed unmodified back to the server. Populated by the system. Read-only. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"continue": {
						SchemaProps: spec.SchemaProps{
							Description: "continue may be set if the user set a limit on the number of items returned, and indicates that the server has more data available. The value is opaque and may be used to issue another request to the endpoint that served this list to retrieve the next set of available objects. Continuing a consistent list may not be possible if the server configuration has changed or more than a few minutes have passed. The resourceVersion field returned when using this continue value will be identical to the value in the first response, unless you have received this token from an error message.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"remainingItemCount": {
						SchemaProps: spec.SchemaProps{
							Description: "remainingItemCount is the number of subsequent items in the list which are not included in this list response. If the list request contained label or field selectors, then the number of remaining items is unknown and the field will be left unset and omitted during serialization. If the list is complete (either because it is not chunking or because this is the last chunk), then there are no more remaining items and this field will be left unset and omitted during serialization. Servers older than v1.15 do not set this field. The intended use of the remainingItemCount is *estimating* the size of a collection. Clients should not rely on the remainingItemCount to be set or to be exact.",
							Type:        []string{"integer"},
							Format:      "int64",
						},
					},
				},
			},
		},
	}
}

func schema_pkg_apis_meta_v1_ListOptions(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "ListOptions is the query options to a standard REST list call.",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"kind": {
						SchemaProps: spec.SchemaProps{
							Description: "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"apiVersion": {
						SchemaProps: spec.SchemaProps{
							Description: "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"labelSelector": {
						SchemaProps: spec.SchemaProps{
							Description: "A selector to restrict the list of returned objects by their labels. Defaults to everything.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"fieldSelector": {
						SchemaProps: spec.SchemaProps{
							Description: "A selector to restrict the list of returned objects by their fields. Defaults to everything.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"watch": {
						SchemaProps: spec.SchemaProps{
							Description: "Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.",
							Type:        []string{"boolean"},
							Format:      "",
						},
					},
					"allowWatchBookmarks": {
						SchemaProps: spec.SchemaProps{
							Description: "allowWatchBookmarks requests watch events with type \"BOOKMARK\". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored. If the feature gate WatchBookmarks is not enabled in apiserver, this field is ignored.\n\nThis field is beta.",
							Type:        []string{"boolean"},
							Format:      "",
						},
					},
					"resourceVersion": {
						SchemaProps: spec.SchemaProps{
							Description: "When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"timeoutSeconds": {
						SchemaProps: spec.SchemaProps{
							Description: "Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.",
							Type:        []string{"integer"},
							Format:      "int64",
						},
					},
					"limit": {
						SchemaProps: spec.SchemaProps{
							Description: "limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.\n\nThe server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.",
							Type:        []string{"integer"},
							Format:      "int64",
						},
					},
					"continue": {
						SchemaProps: spec.SchemaProps{
							Description: "The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the \"next key\".\n\nThis field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
				},
			},
		},
	}
}

func schema_pkg_apis_meta_v1_ManagedFieldsEntry(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "ManagedFieldsEntry is a workflow-id, a FieldSet and the group version of the resource that the fieldset applies to.",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"manager": {
						SchemaProps: spec.SchemaProps{
							Description: "Manager is an identifier of the workflow managing these fields.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"operation": {
						SchemaProps: spec.SchemaProps{
							Description: "Operation is the type of operation which lead to this ManagedFieldsEntry being created. The only valid values for this field are 'Apply' and 'Update'.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"apiVersion": {
						SchemaProps: spec.SchemaProps{
							Description: "APIVersion defines the version of this resource that this field set applies to. The format is \"group/version\" just like the top-level APIVersion field. It is necessary to track the version of a field set because it cannot be automatically converted.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"time": {
						SchemaProps: spec.SchemaProps{
							Description: "Time is timestamp of when these fields were set. It should always be empty if Operation is 'Apply'",
							Ref:         ref("k8s.io/apimachinery/pkg/apis/meta/v1.Time"),
						},
					},
					"fieldsType": {
						SchemaProps: spec.SchemaProps{
							Description: "FieldsType is the discriminator for the different fields format and version. There is currently only one possible value: \"FieldsV1\"",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"fieldsV1": {
						SchemaProps: spec.SchemaProps{
							Description: "FieldsV1 holds the first JSON version format as described in the \"FieldsV1\" type.",
							Ref:         ref("k8s.io/apimachinery/pkg/apis/meta/v1.FieldsV1"),
						},
					},
				},
			},
		},
		Dependencies: []string{
			"k8s.io/apimachinery/pkg/apis/meta/v1.FieldsV1", "k8s.io/apimachinery/pkg/apis/meta/v1.Time"},
	}
}

func schema_pkg_apis_meta_v1_MicroTime(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "MicroTime is version of Time with microsecond level precision.",
				Type:        v1.MicroTime{}.OpenAPISchemaType(),
				Format:      v1.MicroTime{}.OpenAPISchemaFormat(),
			},
		},
	}
}

func schema_pkg_apis_meta_v1_ObjectMeta(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "ObjectMeta is metadata that all persisted resources must have, which includes all objects users must create.",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"name": {
						SchemaProps: spec.SchemaProps{
							Description: "Name must be unique within a namespace. Is required when creating resources, although some resources may allow a client to request the generation of an appropriate name automatically. Name is primarily intended for creation idempotence and configuration definition. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"generateName": {
						SchemaProps: spec.SchemaProps{
							Description: "GenerateName is an optional prefix, used by the server, to generate a unique name ONLY IF the Name field has not been provided. If this field is used, the name returned to the client will be different than the name passed. This value will also be combined with a unique suffix. The provided value has the same validation rules as the Name field, and may be truncated by the length of the suffix required to make the value unique on the server.\n\nIf this field is specified and the generated name exists, the server will NOT return a 409 - instead, it will either return 201 Created or 500 with Reason ServerTimeout indicating a unique name could not be found in the time allotted, and the client should retry (optionally after the time indicated in the Retry-After header).\n\nApplied only if Name is not specified. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#idempotency",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"namespace": {
						SchemaProps: spec.SchemaProps{
							Description: "Namespace defines the space within each name must be unique. An empty namespace is equivalent to the \"default\" namespace, but \"default\" is the canonical representation. Not all objects are required to be scoped to a namespace - the value of this field for those objects will be empty.\n\nMust be a DNS_LABEL. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/namespaces",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"selfLink": {
						SchemaProps: spec.SchemaProps{
							Description: "SelfLink is a URL representing this object. Populated by the system. Read-only.\n\nDEPRECATED Kubernetes will stop propagating this field in 1.20 release and the field is planned to be removed in 1.21 release.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"uid": {
						SchemaProps: spec.SchemaProps{
							Description: "UID is the unique in time and space value for this object. It is typically generated by the server on successful creation of a resource and is not allowed to change on PUT operations.\n\nPopulated by the system. Read-only. More info: http://kubernetes.io/docs/user-guide/identifiers#uids",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"resourceVersion": {
						SchemaProps: spec.SchemaProps{
							Description: "An opaque value that represents the internal version of this object that can be used by clients to determine when objects have changed. May be used for optimistic concurrency, change detection, and the watch operation on a resource or set of resources. Clients must treat these values as opaque and passed unmodified back to the server. They may only be valid for a particular resource or set of resources.\n\nPopulated by the system. Read-only. Value must be treated as opaque by clients and . More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"generation": {
						SchemaProps: spec.SchemaProps{
							Description: "A sequence number representing a specific generation of the desired state. Populated by the system. Read-only.",
							Type:        []string{"integer"},
							Format:      "int64",
						},
					},
					"creationTimestamp": {
						SchemaProps: spec.SchemaProps{
							Description: "CreationTimestamp is a timestamp representing the server time when this object was created. It is not guaranteed to be set in happens-before order across separate operations. Clients may not set this value. It is represented in RFC3339 form and is in UTC.\n\nPopulated by the system. Read-only. Null for lists. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata",
							Ref:         ref("k8s.io/apimachinery/pkg/apis/meta/v1.Time"),
						},
					},
					"deletionTimestamp": {
						SchemaProps: spec.SchemaProps{
							Description: "DeletionTimestamp is RFC 3339 date and time at which this resource will be deleted. This field is set by the server when a graceful deletion is requested by the user, and is not directly settable by a client. The resource is expected to be deleted (no longer visible from resource lists, and not reachable by name) after the time in this field, once the finalizers list is empty. As long as the finalizers list contains items, deletion is blocked. Once the deletionTimestamp is set, this value may not be unset or be set further into the future, although it may be shortened or the resource may be deleted prior to this time. For example, a user may request that a pod is deleted in 30 seconds. The Kubelet will react by sending a graceful termination signal to the containers in the pod. After that 30 seconds, the Kubelet will send a hard termination signal (SIGKILL) to the container and after cleanup, remove the pod from the API. In the presence of network partitions, this object may still exist after this timestamp, until an administrator or automated process can determine the resource is fully terminated. If not set, graceful deletion of the object has not been requested.\n\nPopulated by the system when a graceful deletion is requested. Read-only. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata",
							Ref:         ref("k8s.io/apimachinery/pkg/apis/meta/v1.Time"),
						},
					},
					"deletionGracePeriodSeconds": {
						SchemaProps: spec.SchemaProps{
							Description: "Number of seconds allowed for this object to gracefully terminate before it will be removed from the system. Only set when deletionTimestamp is also set. May only be shortened. Read-only.",
							Type:        []string{"integer"},
							Format:      "int64",
						},
					},
					"labels": {
						SchemaProps: spec.SchemaProps{
							Description: "Map of string keys and values that can be used to organize and categorize (scope and select) objects. May match selectors of replication controllers and services. More info: http://kubernetes.io/docs/user-guide/labels",
							Type:        []string{"object"},
							AdditionalProperties: &spec.SchemaOrBool{
								Allows: true,
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Type:   []string{"string"},
										Format: "",
									},
								},
							},
						},
					},
					"annotations": {
						SchemaProps: spec.SchemaProps{
							Description: "Annotations is an unstructured key value map stored with a resource that may be set by external tools to store and retrieve arbitrary metadata. They are not queryable and should be preserved when modifying objects. More info: http://kubernetes.io/docs/user-guide/annotations",
							Type:        []string{"object"},
							AdditionalProperties: &spec.SchemaOrBool{
								Allows: true,
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Type:   []string{"string"},
										Format: "",
									},
								},
							},
						},
					},
					"ownerReferences": {
						VendorExtensible: spec.VendorExtensible{
							Extensions: spec.Extensions{
								"x-kubernetes-patch-merge-key": "uid",
								"x-kubernetes-patch-strategy":  "merge",
							},
						},
						SchemaProps: spec.SchemaProps{
							Description: "List of objects depended by this object. If ALL objects in the list have been deleted, this object will be garbage collected. If this object is managed by a controller, then an entry in this list will point to this controller, with the controller field set to true. There cannot be more than one managing controller.",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Ref: ref("k8s.io/apimachinery/pkg/apis/meta/v1.OwnerReference"),
									},
								},
							},
						},
					},
					"finalizers": {
						VendorExtensible: spec.VendorExtensible{
							Extensions: spec.Extensions{
								"x-kubernetes-patch-strategy": "merge",
							},
						},
						SchemaProps: spec.SchemaProps{
							Description: "Must be empty before the object is deleted from the registry. Each entry is an identifier for the responsible component that will remove the entry from the list. If the deletionTimestamp of the object is non-nil, entries in this list can only be removed.",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Type:   []string{"string"},
										Format: "",
									},
								},
							},
						},
					},
					"clusterName": {
						SchemaProps: spec.SchemaProps{
							Description: "The name of the cluster which the object belongs to. This is used to distinguish resources with same name and namespace in different clusters. This field is not set anywhere right now and apiserver is going to ignore it if set in create or update request.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"managedFields": {
						SchemaProps: spec.SchemaProps{
							Description: "ManagedFields maps workflow-id and version to the set of fields that are managed by that workflow. This is mostly for internal housekeeping, and users typically shouldn't need to set or understand this field. A workflow can be the user's name, a controller's name, or the name of a specific apply path like \"ci-cd\". The set of fields is always in the version that the workflow used when modifying the object.",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Ref: ref("k8s.io/apimachinery/pkg/apis/meta/v1.ManagedFieldsEntry"),
									},
								},
							},
						},
					},
				},
			},
		},
		Dependencies: []string{
			"k8s.io/apimachinery/pkg/apis/meta/v1.ManagedFieldsEntry", "k8s.io/apimachinery/pkg/apis/meta/v1.OwnerReference", "k8s.io/apimachinery/pkg/apis/meta/v1.Time"},
	}
}

func schema_pkg_apis_meta_v1_OwnerReference(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "OwnerReference contains enough information to let you identify an owning object. An owning object must be in the same namespace as the dependent, or be cluster-scoped, so there is no namespace field.",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"apiVersion": {
						SchemaProps: spec.SchemaProps{
							Description: "API version of the referent.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"kind": {
						SchemaProps: spec.SchemaProps{
							Description: "Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"name": {
						SchemaProps: spec.SchemaProps{
							Description: "Name of the referent. More info: http://kubernetes.io/docs/user-guide/identifiers#names",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"uid": {
						SchemaProps: spec.SchemaProps{
							Description: "UID of the referent. More info: http://kubernetes.io/docs/user-guide/identifiers#uids",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"controller": {
						SchemaProps: spec.SchemaProps{
							Description: "If true, this reference points to the managing controller.",
							Type:        []string{"boolean"},
							Format:      "",
						},
					},
					"blockOwnerDeletion": {
						SchemaProps: spec.SchemaProps{
							Description: "If true, AND if the owner has the \"foregroundDeletion\" finalizer, then the owner cannot be deleted from the key-value store until this reference is removed. Defaults to false. To set this field, a user needs \"delete\" permission of the owner, otherwise 422 (Unprocessable Entity) will be returned.",
							Type:        []string{"boolean"},
							Format:      "",
						},
					},
				},
				Required: []string{"apiVersion", "kind", "name", "uid"},
			},
		},
	}
}

func schema_pkg_apis_meta_v1_PartialObjectMetadata(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "PartialObjectMetadata is a generic representation of any object with ObjectMeta. It allows clients to get access to a particular ObjectMeta schema without knowing the details of the version.",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"kind": {
						SchemaProps: spec.SchemaProps{
							Description: "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"apiVersion": {
						SchemaProps: spec.SchemaProps{
							Description: "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"metadata": {
						SchemaProps: spec.SchemaProps{
							Description: "Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata",
							Ref:         ref("k8s.io/apimachinery/pkg/apis/meta/v1.ObjectMeta"),
						},
					},
				},
			},
		},
		Dependencies: []string{
			"k8s.io/apimachinery/pkg/apis/meta/v1.ObjectMeta"},
	}
}

func schema_pkg_apis_meta_v1_PartialObjectMetadataList(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "PartialObjectMetadataList contains a list of objects containing only their metadata",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"kind": {
						SchemaProps: spec.SchemaProps{
							Description: "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"apiVersion": {
						SchemaProps: spec.SchemaProps{
							Description: "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"metadata": {
						SchemaProps: spec.SchemaProps{
							Description: "Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
							Ref:         ref("k8s.io/apimachinery/pkg/apis/meta/v1.ListMeta"),
						},
					},
					"items": {
						SchemaProps: spec.SchemaProps{
							Description: "items contains each of the included items.",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Ref: ref("k8s.io/apimachinery/pkg/apis/meta/v1.PartialObjectMetadata"),
									},
								},
							},
						},
					},
				},
				Required: []string{"items"},
			},
		},
		Dependencies: []string{
			"k8s.io/apimachinery/pkg/apis/meta/v1.ListMeta", "k8s.io/apimachinery/pkg/apis/meta/v1.PartialObjectMetadata"},
	}
}

func schema_pkg_apis_meta_v1_Patch(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "Patch is provided to give a concrete name and type to the Kubernetes PATCH request body.",
				Type:        []string{"object"},
			},
		},
	}
}

func schema_pkg_apis_meta_v1_PatchOptions(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "PatchOptions may be provided when patching an API object. PatchOptions is meant to be a superset of UpdateOptions.",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"kind": {
						SchemaProps: spec.SchemaProps{
							Description: "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"apiVersion": {
						SchemaProps: spec.SchemaProps{
							Description: "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"dryRun": {
						SchemaProps: spec.SchemaProps{
							Description: "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Type:   []string{"string"},
										Format: "",
									},
								},
							},
						},
					},
					"force": {
						SchemaProps: spec.SchemaProps{
							Description: "Force is going to \"force\" Apply requests. It means user will re-acquire conflicting fields owned by other people. Force flag must be unset for non-apply patch requests.",
							Type:        []string{"boolean"},
							Format:      "",
						},
					},
					"fieldManager": {
						SchemaProps: spec.SchemaProps{
							Description: "fieldManager is a name associated with the actor or entity that is making these changes. The value must be less than or 128 characters long, and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint. This field is required for apply requests (application/apply-patch) but optional for non-apply patch types (JsonPatch, MergePatch, StrategicMergePatch).",
							Type:        []string{"string"},
							Format:      "",
						},
					},
				},
			},
		},
	}
}

func schema_pkg_apis_meta_v1_Preconditions(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "Preconditions must be fulfilled before an operation (update, delete, etc.) is carried out.",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"uid": {
						SchemaProps: spec.SchemaProps{
							Description: "Specifies the target UID.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"resourceVersion": {
						SchemaProps: spec.SchemaProps{
							Description: "Specifies the target ResourceVersion",
							Type:        []string{"string"},
							Format:      "",
						},
					},
				},
			},
		},
	}
}

func schema_pkg_apis_meta_v1_RootPaths(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "RootPaths lists the paths available at root. For example: \"/healthz\", \"/apis\".",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"paths": {
						SchemaProps: spec.SchemaProps{
							Description: "paths are the paths available at root.",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Type:   []string{"string"},
										Format: "",
									},
								},
							},
						},
					},
				},
				Required: []string{"paths"},
			},
		},
	}
}

func schema_pkg_apis_meta_v1_ServerAddressByClientCIDR(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "ServerAddressByClientCIDR helps the client to determine the server address that they should use, depending on the clientCIDR that they match.",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"clientCIDR": {
						SchemaProps: spec.SchemaProps{
							Description: "The CIDR with which clients can match their IP to figure out the server address that they should use.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"serverAddress": {
						SchemaProps: spec.SchemaProps{
							Description: "Address of this server, suitable for a client that matches the above CIDR. This can be a hostname, hostname:port, IP or IP:port.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
				},
				Required: []string{"clientCIDR", "serverAddress"},
			},
		},
	}
}

func schema_pkg_apis_meta_v1_Status(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "Status is a return value for calls that don't return other objects.",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"kind": {
						SchemaProps: spec.SchemaProps{
							Description: "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"apiVersion": {
						SchemaProps: spec.SchemaProps{
							Description: "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"metadata": {
						SchemaProps: spec.SchemaProps{
							Description: "Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
							Ref:         ref("k8s.io/apimachinery/pkg/apis/meta/v1.ListMeta"),
						},
					},
					"status": {
						SchemaProps: spec.SchemaProps{
							Description: "Status of the operation. One of: \"Success\" or \"Failure\". More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"message": {
						SchemaProps: spec.SchemaProps{
							Description: "A human-readable description of the status of this operation.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"reason": {
						SchemaProps: spec.SchemaProps{
							Description: "A machine-readable description of why this operation is in the \"Failure\" status. If this value is empty there is no information available. A Reason clarifies an HTTP status code but does not override it.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"details": {
						SchemaProps: spec.SchemaProps{
							Description: "Extended data associated with the reason.  Each reason may define its own extended details. This field is optional and the data returned is not guaranteed to conform to any schema except that defined by the reason type.",
							Ref:         ref("k8s.io/apimachinery/pkg/apis/meta/v1.StatusDetails"),
						},
					},
					"code": {
						SchemaProps: spec.SchemaProps{
							Description: "Suggested HTTP return code for this status, 0 if not set.",
							Type:        []string{"integer"},
							Format:      "int32",
						},
					},
				},
			},
		},
		Dependencies: []string{
			"k8s.io/apimachinery/pkg/apis/meta/v1.ListMeta", "k8s.io/apimachinery/pkg/apis/meta/v1.StatusDetails"},
	}
}

func schema_pkg_apis_meta_v1_StatusCause(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "StatusCause provides more information about an api.Status failure, including cases when multiple errors are encountered.",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"reason": {
						SchemaProps: spec.SchemaProps{
							Description: "A machine-readable description of the cause of the error. If this value is empty there is no information available.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"message": {
						SchemaProps: spec.SchemaProps{
							Description: "A human-readable description of the cause of the error.  This field may be presented as-is to a reader.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"field": {
						SchemaProps: spec.SchemaProps{
							Description: "The field of the resource that has caused this error, as named by its JSON serialization. May include dot and postfix notation for nested attributes. Arrays are zero-indexed.  Fields may appear more than once in an array of causes due to fields having multiple errors. Optional.\n\nExamples:\n  \"name\" - the field \"name\" on the current resource\n  \"items[0].name\" - the field \"name\" on the first array entry in \"items\"",
							Type:        []string{"string"},
							Format:      "",
						},
					},
				},
			},
		},
	}
}

func schema_pkg_apis_meta_v1_StatusDetails(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "StatusDetails is a set of additional properties that MAY be set by the server to provide additional information about a response. The Reason field of a Status object defines what attributes will be set. Clients must ignore fields that do not match the defined type of each attribute, and should assume that any attribute may be empty, invalid, or under defined.",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"name": {
						SchemaProps: spec.SchemaProps{
							Description: "The name attribute of the resource associated with the status StatusReason (when there is a single name which can be described).",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"group": {
						SchemaProps: spec.SchemaProps{
							Description: "The group attribute of the resource associated with the status StatusReason.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"kind": {
						SchemaProps: spec.SchemaProps{
							Description: "The kind attribute of the resource associated with the status StatusReason. On some operations may differ from the requested resource Kind. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"uid": {
						SchemaProps: spec.SchemaProps{
							Description: "UID of the resource. (when there is a single resource which can be described). More info: http://kubernetes.io/docs/user-guide/identifiers#uids",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"causes": {
						SchemaProps: spec.SchemaProps{
							Description: "The Causes array includes more details associated with the StatusReason failure. Not all StatusReasons may provide detailed causes.",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Ref: ref("k8s.io/apimachinery/pkg/apis/meta/v1.StatusCause"),
									},
								},
							},
						},
					},
					"retryAfterSeconds": {
						SchemaProps: spec.SchemaProps{
							Description: "If specified, the time in seconds before the operation should be retried. Some errors may indicate the client must take an alternate action - for those errors this field may indicate how long to wait before taking the alternate action.",
							Type:        []string{"integer"},
							Format:      "int32",
						},
					},
				},
			},
		},
		Dependencies: []string{
			"k8s.io/apimachinery/pkg/apis/meta/v1.StatusCause"},
	}
}

func schema_pkg_apis_meta_v1_Table(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "Table is a tabular representation of a set of API resources. The server transforms the object into a set of preferred columns for quickly reviewing the objects.",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"kind": {
						SchemaProps: spec.SchemaProps{
							Description: "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"apiVersion": {
						SchemaProps: spec.SchemaProps{
							Description: "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"metadata": {
						SchemaProps: spec.SchemaProps{
							Description: "Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
							Ref:         ref("k8s.io/apimachinery/pkg/apis/meta/v1.ListMeta"),
						},
					},
					"columnDefinitions": {
						SchemaProps: spec.SchemaProps{
							Description: "columnDefinitions describes each column in the returned items array. The number of cells per row will always match the number of column definitions.",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Ref: ref("k8s.io/apimachinery/pkg/apis/meta/v1.TableColumnDefinition"),
									},
								},
							},
						},
					},
					"rows": {
						SchemaProps: spec.SchemaProps{
							Description: "rows is the list of items in the table.",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Ref: ref("k8s.io/apimachinery/pkg/apis/meta/v1.TableRow"),
									},
								},
							},
						},
					},
				},
				Required: []string{"columnDefinitions", "rows"},
			},
		},
		Dependencies: []string{
			"k8s.io/apimachinery/pkg/apis/meta/v1.ListMeta", "k8s.io/apimachinery/pkg/apis/meta/v1.TableColumnDefinition", "k8s.io/apimachinery/pkg/apis/meta/v1.TableRow"},
	}
}

func schema_pkg_apis_meta_v1_TableColumnDefinition(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "TableColumnDefinition contains information about a column returned in the Table.",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"name": {
						SchemaProps: spec.SchemaProps{
							Description: "name is a human readable name for the column.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"type": {
						SchemaProps: spec.SchemaProps{
							Description: "type is an OpenAPI type definition for this column, such as number, integer, string, or array. See https://github.com/OAI/OpenAPI-Specification/blob/master/versions/2.0.md#data-types for more.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"format": {
						SchemaProps: spec.SchemaProps{
							Description: "format is an optional OpenAPI type modifier for this column. A format modifies the type and imposes additional rules, like date or time formatting for a string. The 'name' format is applied to the primary identifier column which has type 'string' to assist in clients identifying column is the resource name. See https://github.com/OAI/OpenAPI-Specification/blob/master/versions/2.0.md#data-types for more.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"description": {
						SchemaProps: spec.SchemaProps{
							Description: "description is a human readable description of this column.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"priority": {
						SchemaProps: spec.SchemaProps{
							Description: "priority is an integer defining the relative importance of this column compared to others. Lower numbers are considered higher priority. Columns that may be omitted in limited space scenarios should be given a higher priority.",
							Type:        []string{"integer"},
							Format:      "int32",
						},
					},
				},
				Required: []string{"name", "type", "format", "description", "priority"},
			},
		},
	}
}

func schema_pkg_apis_meta_v1_TableOptions(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "TableOptions are used when a Table is requested by the caller.",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"kind": {
						SchemaProps: spec.SchemaProps{
							Description: "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"apiVersion": {
						SchemaProps: spec.SchemaProps{
							Description: "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"includeObject": {
						SchemaProps: spec.SchemaProps{
							Description: "includeObject decides whether to include each object along with its columnar information. Specifying \"None\" will return no object, specifying \"Object\" will return the full object contents, and specifying \"Metadata\" (the default) will return the object's metadata in the PartialObjectMetadata kind in version v1beta1 of the meta.k8s.io API group.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
				},
			},
		},
	}
}

func schema_pkg_apis_meta_v1_TableRow(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "TableRow is an individual row in a table.",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"cells": {
						SchemaProps: spec.SchemaProps{
							Description: "cells will be as wide as the column definitions array and may contain strings, numbers (float64 or int64), booleans, simple maps, lists, or null. See the type field of the column definition for a more detailed description.",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Type:   []string{"object"},
										Format: "",
									},
								},
							},
						},
					},
					"conditions": {
						SchemaProps: spec.SchemaProps{
							Description: "conditions describe additional status of a row that are relevant for a human user. These conditions apply to the row, not to the object, and will be specific to table output. The only defined condition type is 'Completed', for a row that indicates a resource that has run to completion and can be given less visual priority.",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Ref: ref("k8s.io/apimachinery/pkg/apis/meta/v1.TableRowCondition"),
									},
								},
							},
						},
					},
					"object": {
						SchemaProps: spec.SchemaProps{
							Description: "This field contains the requested additional information about each object based on the includeObject policy when requesting the Table. If \"None\", this field is empty, if \"Object\" this will be the default serialization of the object for the current API version, and if \"Metadata\" (the default) will contain the object metadata. Check the returned kind and apiVersion of the object before parsing. The media type of the object will always match the enclosing list - if this as a JSON table, these will be JSON encoded objects.",
							Ref:         ref("k8s.io/apimachinery/pkg/runtime.RawExtension"),
						},
					},
				},
				Required: []string{"cells"},
			},
		},
		Dependencies: []string{
			"k8s.io/apimachinery/pkg/apis/meta/v1.TableRowCondition", "k8s.io/apimachinery/pkg/runtime.RawExtension"},
	}
}

func schema_pkg_apis_meta_v1_TableRowCondition(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "TableRowCondition allows a row to be marked with additional information.",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"type": {
						SchemaProps: spec.SchemaProps{
							Description: "Type of row condition. The only defined value is 'Completed' indicating that the object this row represents has reached a completed state and may be given less visual priority than other rows. Clients are not required to honor any conditions but should be consistent where possible about handling the conditions.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"status": {
						SchemaProps: spec.SchemaProps{
							Description: "Status of the condition, one of True, False, Unknown.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"reason": {
						SchemaProps: spec.SchemaProps{
							Description: "(brief) machine readable reason for the condition's last transition.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"message": {
						SchemaProps: spec.SchemaProps{
							Description: "Human readable message indicating details about last transition.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
				},
				Required: []string{"type", "status"},
			},
		},
	}
}

func schema_pkg_apis_meta_v1_Time(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "Time is a wrapper around time.Time which supports correct marshaling to YAML and JSON.  Wrappers are provided for many of the factory methods that the time package offers.",
				Type:        v1.Time{}.OpenAPISchemaType(),
				Format:      v1.Time{}.OpenAPISchemaFormat(),
			},
		},
	}
}

func schema_pkg_apis_meta_v1_Timestamp(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "Timestamp is a struct that is equivalent to Time, but intended for protobuf marshalling/unmarshalling. It is generated into a serialization that matches Time. Do not use in Go structs.",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"seconds": {
						SchemaProps: spec.SchemaProps{
							Description: "Represents seconds of UTC time since Unix epoch 1970-01-01T00:00:00Z. Must be from 0001-01-01T00:00:00Z to 9999-12-31T23:59:59Z inclusive.",
							Type:        []string{"integer"},
							Format:      "int64",
						},
					},
					"nanos": {
						SchemaProps: spec.SchemaProps{
							Description: "Non-negative fractions of a second at nanosecond resolution. Negative second values with fractions must still have non-negative nanos values that count forward in time. Must be from 0 to 999,999,999 inclusive. This field may be limited in precision depending on context.",
							Type:        []string{"integer"},
							Format:      "int32",
						},
					},
				},
				Required: []string{"seconds", "nanos"},
			},
		},
	}
}

func schema_pkg_apis_meta_v1_TypeMeta(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "TypeMeta describes an individual object in an API response or request with strings representing the type of the object and its API schema version. Structures that are versioned or persisted should inline TypeMeta.",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"kind": {
						SchemaProps: spec.SchemaProps{
							Description: "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"apiVersion": {
						SchemaProps: spec.SchemaProps{
							Description: "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
							Type:        []string{"string"},
							Format:      "",
						},
					},
				},
			},
		},
	}
}

func schema_pkg_apis_meta_v1_UpdateOptions(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "UpdateOptions may be provided when updating an API object. All fields in UpdateOptions should also be present in PatchOptions.",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"kind": {
						SchemaProps: spec.SchemaProps{
							Description: "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"apiVersion": {
						SchemaProps: spec.SchemaProps{
							Description: "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"dryRun": {
						SchemaProps: spec.SchemaProps{
							Description: "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Type:   []string{"string"},
										Format: "",
									},
								},
							},
						},
					},
					"fieldManager": {
						SchemaProps: spec.SchemaProps{
							Description: "fieldManager is a name associated with the actor or entity that is making these changes. The value must be less than or 128 characters long, and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
				},
			},
		},
	}
}

func schema_pkg_apis_meta_v1_WatchEvent(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "Event represents a single event to a watched resource.",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"type": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"object": {
						SchemaProps: spec.SchemaProps{
							Description: "Object is:\n * If Type is Added or Modified: the new state of the object.\n * If Type is Deleted: the state of the object immediately before deletion.\n * If Type is Error: *Status is recommended; other types may make sense\n   depending on context.",
							Ref:         ref("k8s.io/apimachinery/pkg/runtime.RawExtension"),
						},
					},
				},
				Required: []string{"type", "object"},
			},
		},
		Dependencies: []string{
			"k8s.io/apimachinery/pkg/runtime.RawExtension"},
	}
}

func schema_k8sio_apimachinery_pkg_runtime_RawExtension(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "RawExtension is used to hold extensions in external versions.\n\nTo use this, make a field which has RawExtension as its type in your external, versioned struct, and Object in your internal struct. You also need to register your various plugin types.\n\n// Internal package: type MyAPIObject struct {\n\truntime.TypeMeta `json:\",inline\"`\n\tMyPlugin runtime.Object `json:\"myPlugin\"`\n} type PluginA struct {\n\tAOption string `json:\"aOption\"`\n}\n\n// External package: type MyAPIObject struct {\n\truntime.TypeMeta `json:\",inline\"`\n\tMyPlugin runtime.RawExtension `json:\"myPlugin\"`\n} type PluginA struct {\n\tAOption string `json:\"aOption\"`\n}\n\n// On the wire, the JSON will look something like this: {\n\t\"kind\":\"MyAPIObject\",\n\t\"apiVersion\":\"v1\",\n\t\"myPlugin\": {\n\t\t\"kind\":\"PluginA\",\n\t\t\"aOption\":\"foo\",\n\t},\n}\n\nSo what happens? Decode first uses json or yaml to unmarshal the serialized data into your external MyAPIObject. That causes the raw JSON to be stored, but not unpacked. The next step is to copy (using pkg/conversion) into the internal struct. The runtime package's DefaultScheme has conversion functions installed which will unpack the JSON stored in RawExtension, turning it into the correct object type, and storing it in the Object. (TODO: In the case where the object is of an unknown type, a runtime.Unknown object will be created and stored.)",
				Type:        []string{"object"},
			},
		},
	}
}

func schema_k8sio_apimachinery_pkg_runtime_TypeMeta(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "TypeMeta is shared by all top level objects. The proper way to use it is to inline it in your type, like this: type MyAwesomeAPIObject struct {\n     runtime.TypeMeta    `json:\",inline\"`\n     ... // other fields\n} func (obj *MyAwesomeAPIObject) SetGroupVersionKind(gvk *metav1.GroupVersionKind) { metav1.UpdateTypeMeta(obj,gvk) }; GroupVersionKind() *GroupVersionKind\n\nTypeMeta is provided here for convenience. You may use it directly from this package or define your own with the same fields.",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"apiVersion": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"kind": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
				},
			},
		},
	}
}

func schema_k8sio_apimachinery_pkg_runtime_Unknown(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "Unknown allows api objects with unknown types to be passed-through. This can be used to deal with the API objects from a plug-in. Unknown objects still have functioning TypeMeta features-- kind, version, etc. metadata and field mutatation.",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"apiVersion": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"kind": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"Raw": {
						SchemaProps: spec.SchemaProps{
							Description: "Raw will hold the complete serialized object which couldn't be matched with a registered type. Most likely, nothing should be done with this except for passing it through the system.",
							Type:        []string{"string"},
							Format:      "byte",
						},
					},
					"ContentEncoding": {
						SchemaProps: spec.SchemaProps{
							Description: "ContentEncoding is encoding used to encode 'Raw' data. Unspecified means no encoding.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"ContentType": {
						SchemaProps: spec.SchemaProps{
							Description: "ContentType  is serialization method used to serialize 'Raw'. Unspecified means ContentTypeJSON.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
				},
				Required: []string{"Raw", "ContentEncoding", "ContentType"},
			},
		},
	}
}

func schema_k8sio_apimachinery_pkg_version_Info(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "Info contains versioning information. how we'll want to distribute that information.",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"major": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"minor": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"gitVersion": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"gitCommit": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"gitTreeState": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"buildDate": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"goVersion": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"compiler": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"platform": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
				},
				Required: []string{"major", "minor", "gitVersion", "gitCommit", "gitTreeState", "buildDate", "goVersion", "compiler", "platform"},
			},
		},
	}
}
